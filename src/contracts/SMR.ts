/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "get_version()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_sml_precompile(byte[],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_smi_precompile(byte[],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "append_extra_approval_chunk(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_sml(address,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_smi(address,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_sml(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_sml(address,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_smi(application,application,address,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_smi(application,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "sma_id": {
          "type": "uint64",
          "key": "sma_id",
          "descr": "ID of Subtopia Price Oracle contract"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SMR",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "uint64",
            "name": "sma_id"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_version",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "update_sml_precompile",
        "args": [
          {
            "type": "byte[]",
            "name": "approval"
          },
          {
            "type": "byte[]",
            "name": "clear"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_smi_precompile",
        "args": [
          {
            "type": "byte[]",
            "name": "approval"
          },
          {
            "type": "byte[]",
            "name": "clear"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "append_extra_approval_chunk",
        "args": [
          {
            "type": "byte[]",
            "name": "approval"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_sml",
        "args": [
          {
            "type": "address",
            "name": "manager"
          },
          {
            "type": "application",
            "name": "locker"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_smi",
        "args": [
          {
            "type": "address",
            "name": "manager"
          },
          {
            "type": "application",
            "name": "smi"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_sml",
        "args": [
          {
            "type": "address",
            "name": "manager"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "create_sml",
        "args": [
          {
            "type": "address",
            "name": "manager"
          },
          {
            "type": "pay",
            "name": "fee_txn"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "create_smi",
        "args": [
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "uint64",
            "name": "sub_type"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "uint64",
            "name": "max_subs"
          },
          {
            "type": "asset",
            "name": "coin"
          },
          {
            "type": "string",
            "name": "unit_name"
          },
          {
            "type": "string",
            "name": "image_url"
          },
          {
            "type": "address",
            "name": "manager"
          },
          {
            "type": "application",
            "name": "locker"
          },
          {
            "type": "application",
            "name": "sma"
          },
          {
            "type": "pay",
            "name": "fee_txn"
          },
          {
            "type": "pay",
            "name": "platform_fee_txn"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "transfer_smi",
        "args": [
          {
            "type": "application",
            "name": "smi"
          },
          {
            "type": "application",
            "name": "old_locker"
          },
          {
            "type": "address",
            "name": "new_manager"
          },
          {
            "type": "pay",
            "name": "transfer_fee_txn"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delete_smi",
        "args": [
          {
            "type": "application",
            "name": "smi"
          },
          {
            "type": "application",
            "name": "locker"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Smr smart contract.
 */
export type Smr = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint64)void' | 'create', {
      argsObj: {
        sma_id: bigint | number
      }
      argsTuple: [sma_id: bigint | number]
      returns: void
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'update_sml_precompile(byte[],byte[])void' | 'update_sml_precompile', {
      argsObj: {
        approval: Uint8Array
        clear: Uint8Array
      }
      argsTuple: [approval: Uint8Array, clear: Uint8Array]
      returns: void
    }>
    & Record<'update_smi_precompile(byte[],byte[])void' | 'update_smi_precompile', {
      argsObj: {
        approval: Uint8Array
        clear: Uint8Array
      }
      argsTuple: [approval: Uint8Array, clear: Uint8Array]
      returns: void
    }>
    & Record<'append_extra_approval_chunk(byte[])void' | 'append_extra_approval_chunk', {
      argsObj: {
        approval: Uint8Array
      }
      argsTuple: [approval: Uint8Array]
      returns: void
    }>
    & Record<'update_sml(address,application)void' | 'update_sml', {
      argsObj: {
        manager: string
        locker: number | bigint
      }
      argsTuple: [manager: string, locker: number | bigint]
      returns: void
    }>
    & Record<'update_smi(address,application)void' | 'update_smi', {
      argsObj: {
        manager: string
        smi: number | bigint
      }
      argsTuple: [manager: string, smi: number | bigint]
      returns: void
    }>
    & Record<'get_sml(address)uint64' | 'get_sml', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: bigint
    }>
    & Record<'create_sml(address,pay)uint64' | 'create_sml', {
      argsObj: {
        manager: string
        fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [manager: string, fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64' | 'create_smi', {
      argsObj: {
        name: string
        sub_type: bigint | number
        price: bigint | number
        max_subs: bigint | number
        coin: number | bigint
        unit_name: string
        image_url: string
        manager: string
        locker: number | bigint
        sma: number | bigint
        fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        platform_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [name: string, sub_type: bigint | number, price: bigint | number, max_subs: bigint | number, coin: number | bigint, unit_name: string, image_url: string, manager: string, locker: number | bigint, sma: number | bigint, fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, platform_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'transfer_smi(application,application,address,pay)void' | 'transfer_smi', {
      argsObj: {
        smi: number | bigint
        old_locker: number | bigint
        new_manager: string
        transfer_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [smi: number | bigint, old_locker: number | bigint, new_manager: string, transfer_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'delete_smi(application,application)void' | 'delete_smi', {
      argsObj: {
        smi: number | bigint
        locker: number | bigint
      }
      argsTuple: [smi: number | bigint, locker: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * ID of Subtopia Price Oracle contract
       */
      'sma_id'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SmrSig = keyof Smr['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SmrSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Smr smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SmrSig> = Smr['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Smr smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SmrSig> = Smr['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SmrCreateCalls = (typeof SmrCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SmrCreateCallParams =
  | (TypedCallParams<'create(uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type SmrUpdateCalls = (typeof SmrCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type SmrUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type SmrDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SmrCreateCalls) => SmrCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: SmrUpdateCalls) => SmrUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SmrCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SMR smart contract using the create(uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create(uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.sma_id],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the SMR smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_version()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_sml_precompile(byte[],byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSmlPrecompile(args: MethodArgs<'update_sml_precompile(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_sml_precompile(byte[],byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval, args.clear],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_smi_precompile(byte[],byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSmiPrecompile(args: MethodArgs<'update_smi_precompile(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_smi_precompile(byte[],byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval, args.clear],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the append_extra_approval_chunk(byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static appendExtraApprovalChunk(args: MethodArgs<'append_extra_approval_chunk(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'append_extra_approval_chunk(byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_sml(address,application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSml(args: MethodArgs<'update_sml(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_sml(address,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager, args.locker],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_smi(address,application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSmi(args: MethodArgs<'update_smi(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_smi(address,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager, args.smi],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_sml(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSml(args: MethodArgs<'get_sml(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_sml(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_sml(address,pay)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSml(args: MethodArgs<'create_sml(address,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_sml(address,pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager, args.fee_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSmi(args: MethodArgs<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.sub_type, args.price, args.max_subs, args.coin, args.unit_name, args.image_url, args.manager, args.locker, args.sma, args.fee_txn, args.platform_fee_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_smi(application,application,address,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferSmi(args: MethodArgs<'transfer_smi(application,application,address,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_smi(application,application,address,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.smi, args.old_locker, args.new_manager, args.transfer_fee_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_smi(application,application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteSmi(args: MethodArgs<'delete_smi(application,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_smi(application,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.smi, args.locker],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SMR smart contract
 */
export class SmrClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SmrClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Smr['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SMR smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SmrDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SmrCallFactory.create)
    const updateArgs = params.updateCall?.(SmrCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SMR smart contract using the create(uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create(uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'create(uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(SmrCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the SMR smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SMR smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.getVersion(args, params))
  }

  /**
   * Calls the update_sml_precompile(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSmlPrecompile(args: MethodArgs<'update_sml_precompile(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.updateSmlPrecompile(args, params))
  }

  /**
   * Calls the update_smi_precompile(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSmiPrecompile(args: MethodArgs<'update_smi_precompile(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.updateSmiPrecompile(args, params))
  }

  /**
   * Calls the append_extra_approval_chunk(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public appendExtraApprovalChunk(args: MethodArgs<'append_extra_approval_chunk(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.appendExtraApprovalChunk(args, params))
  }

  /**
   * Calls the update_sml(address,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSml(args: MethodArgs<'update_sml(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.updateSml(args, params))
  }

  /**
   * Calls the update_smi(address,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSmi(args: MethodArgs<'update_smi(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.updateSmi(args, params))
  }

  /**
   * Calls the get_sml(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getSml(args: MethodArgs<'get_sml(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.getSml(args, params))
  }

  /**
   * Calls the create_sml(address,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSml(args: MethodArgs<'create_sml(address,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.createSml(args, params))
  }

  /**
   * Calls the create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSmi(args: MethodArgs<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.createSmi(args, params))
  }

  /**
   * Calls the transfer_smi(application,application,address,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferSmi(args: MethodArgs<'transfer_smi(application,application,address,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.transferSmi(args, params))
  }

  /**
   * Calls the delete_smi(application,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteSmi(args: MethodArgs<'delete_smi(application,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmrCallFactory.deleteSmi(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Smr['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get sma_id() {
        return SmrClient.getIntegerState(state, 'sma_id')
      },
    }
  }

  public compose(): SmrComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSmlPrecompile(args: MethodArgs<'update_sml_precompile(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSmlPrecompile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSmiPrecompile(args: MethodArgs<'update_smi_precompile(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSmiPrecompile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      appendExtraApprovalChunk(args: MethodArgs<'append_extra_approval_chunk(byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.appendExtraApprovalChunk(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSml(args: MethodArgs<'update_sml(address,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSml(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSmi(args: MethodArgs<'update_smi(address,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSml(args: MethodArgs<'get_sml(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSml(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createSml(args: MethodArgs<'create_sml(address,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSml(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createSmi(args: MethodArgs<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferSmi(args: MethodArgs<'transfer_smi(application,application,address,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteSmi(args: MethodArgs<'delete_smi(application,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SmrComposer
  }
}
export type SmrComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'get_version()string'>]>

  /**
   * Calls the update_sml_precompile(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSmlPrecompile(args: MethodArgs<'update_sml_precompile(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'update_sml_precompile(byte[],byte[])void'>]>

  /**
   * Calls the update_smi_precompile(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSmiPrecompile(args: MethodArgs<'update_smi_precompile(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'update_smi_precompile(byte[],byte[])void'>]>

  /**
   * Calls the append_extra_approval_chunk(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  appendExtraApprovalChunk(args: MethodArgs<'append_extra_approval_chunk(byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'append_extra_approval_chunk(byte[])void'>]>

  /**
   * Calls the update_sml(address,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSml(args: MethodArgs<'update_sml(address,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'update_sml(address,application)void'>]>

  /**
   * Calls the update_smi(address,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSmi(args: MethodArgs<'update_smi(address,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'update_smi(address,application)void'>]>

  /**
   * Calls the get_sml(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSml(args: MethodArgs<'get_sml(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'get_sml(address)uint64'>]>

  /**
   * Calls the create_sml(address,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSml(args: MethodArgs<'create_sml(address,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'create_sml(address,pay)uint64'>]>

  /**
   * Calls the create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSmi(args: MethodArgs<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'create_smi(string,uint64,uint64,uint64,asset,string,string,address,application,application,pay,pay)uint64'>]>

  /**
   * Calls the transfer_smi(application,application,address,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferSmi(args: MethodArgs<'transfer_smi(application,application,address,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'transfer_smi(application,application,address,pay)void'>]>

  /**
   * Calls the delete_smi(application,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteSmi(args: MethodArgs<'delete_smi(application,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, MethodReturn<'delete_smi(application,application)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the SMR smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): SmrComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the SMR smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmrComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SmrComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<SmrComposerResults<TReturns>>
}
export type SmrComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
