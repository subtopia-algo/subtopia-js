import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class Subscription {
  sub_type = BigInt(0);
  sub_id = BigInt(0);
  created_at = BigInt(0);
  expires_at = BigInt(0);
  static codec: algosdk.ABIType = algosdk.ABIType.from(
    "(uint64,uint64,uint64,uint64)"
  );
  static fields: string[] = ["sub_type", "sub_id", "created_at", "expires_at"];
  static decodeResult(val: algosdk.ABIValue | undefined): Subscription {
    return bkr.decodeNamedTuple(val, Subscription.fields) as Subscription;
  }
  static decodeBytes(val: Uint8Array): Subscription {
    return bkr.decodeNamedTuple(
      Subscription.codec.decode(val),
      Subscription.fields
    ) as Subscription;
  }
}
export class SMI extends bkr.ApplicationClient {
  desc = "";
  override appSchema: bkr.Schema = {
    declared: {
      active_subs: {
        type: bkr.AVMType.uint64,
        key: "active_subs",
        desc: "",
        static: false,
      },
      coin_id: {
        type: bkr.AVMType.uint64,
        key: "coin_id",
        desc: "",
        static: false,
      },
      expires_in: {
        type: bkr.AVMType.uint64,
        key: "expires_in",
        desc: "",
        static: false,
      },
      lifecycle: {
        type: bkr.AVMType.uint64,
        key: "lifecycle",
        desc: "",
        static: false,
      },
      manager: {
        type: bkr.AVMType.bytes,
        key: "manager",
        desc: "",
        static: false,
      },
      max_subs: {
        type: bkr.AVMType.uint64,
        key: "max_subs",
        desc: "",
        static: false,
      },
      name: { type: bkr.AVMType.bytes, key: "name", desc: "", static: false },
      price: {
        type: bkr.AVMType.uint64,
        key: "price",
        desc: "",
        static: false,
      },
      sub_type: {
        type: bkr.AVMType.uint64,
        key: "sub_type",
        desc: "",
        static: false,
      },
      total_subs: {
        type: bkr.AVMType.uint64,
        key: "total_subs",
        desc: "",
        static: false,
      },
      version: {
        type: bkr.AVMType.bytes,
        key: "version",
        desc: "",
        static: false,
      },
    },
    reserved: {},
  };
  override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
  override approvalProgram =
    "";
  override clearProgram =
    "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu";
  override methods: algosdk.ABIMethod[] = [
    new algosdk.ABIMethod({
      name: "create",
      desc: "Creates a new instance of the subscription service with the provided parameters.",
      args: [
        {
          type: "string",
          name: "version",
          desc: "The version of the subscription service.",
        },
        {
          type: "string",
          name: "name",
          desc: "The name of the subscription service.",
        },
        {
          type: "address",
          name: "manager",
          desc: "Manager of the subscription service.",
        },
        {
          type: "uint64",
          name: "sub_type",
          desc: "The type of subscription service (e.g., monthly, yearly).",
        },
        {
          type: "uint64",
          name: "price",
          desc: "The price of the subscription in the specified coin.",
        },
        {
          type: "uint64",
          name: "max_subs",
          desc: "The maximum number of allowed subscriptions.",
        },
        {
          type: "uint64",
          name: "coin_id",
          desc: "The ID of the coin used for subscription payments.",
        },
        {
          type: "uint64",
          name: "expires_in",
          desc: "The number of seconds until the subscription expires.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "update_manager",
      desc: "Updates the manager account of the subscription service.",
      args: [
        {
          type: "address",
          name: "new_manager_account",
          desc: "The new manager account address.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "subscribe",
      desc: "Subscribes a user to the subscription service and creates a new\nsubscription.",
      args: [
        {
          type: "address",
          name: "subscriber_account",
          desc: "The subscriber's account address.",
        },
        {
          type: "pay",
          name: "fee_txn",
          desc: "The transaction for the subscription fee payment.",
        },
        {
          type: "txn",
          name: "subscribe_pay_txn",
          desc: "The transaction representing the payment for the subscription. Can be either abi.PaymentTransaction or abi.AssetTransferTransaction.",
        },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that subscribes the user and creates a new subscription.",
      },
    }),
    new algosdk.ABIMethod({
      name: "get_subscription",
      desc: "Retrieves the subscription details of a given subscriber.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address.",
        },
      ],
      returns: {
        type: "(uint64,uint64,uint64,uint64)",
        desc: "An expression that retrieves the subscription details.",
      },
    }),
    new algosdk.ABIMethod({
      name: "is_subscriber",
      desc: "Checks if a given address is a subscriber of the subscription service.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address.",
        },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that checks if the address is a subscriber.",
      },
    }),
    new algosdk.ABIMethod({
      name: "claim_subscription",
      desc: "Allows a subscriber to claim their subscription.",
      args: [{ type: "uint64", name: "subscription_id", desc: "" }],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "transfer_subscription",
      desc: "Transfers a subscription from the sender's address to a new address.",
      args: [
        {
          type: "address",
          name: "new_address",
          desc: "The new address to transfer the subscription to.",
        },
        { type: "uint64", name: "subscription_id", desc: "" },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "unsubscribe",
      desc: "Unsubscribes a user from the subscription service and deletes the\nsubscription.",
      args: [
        { type: "asset", name: "sub_id", desc: "The subscription ASA ID." },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that unsubscribes the user and deletes the subscription.",
      },
    }),
    new algosdk.ABIMethod({
      name: "mark_for_deletion",
      desc: "Marks the subscription service for deletion. Can only be called by the\nmanager account.",
      args: [
        {
          type: "pay",
          name: "locker_fund_txn",
          desc: "The locker fund transaction.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "delete_subscription",
      desc: "Deletes a subscription for a given subscriber. Can only be called by the\nmanager account.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address whose subscription needs to be deleted.",
        },
        {
          type: "uint64",
          name: "subscription_id",
          desc: "The subscription ID to delete.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "delete",
      desc: "Deletes the subscription service. Can only be called by the manager account\nwhen there are no active subscriptions or the lifecycle state is not active.",
      args: [],
      returns: { type: "void", desc: "" },
    }),
  ];
  async create(
    args: {
      version: string;
      name: string;
      manager: string;
      sub_type: bigint;
      price: bigint;
      max_subs: bigint;
      coin_id: bigint;
      expires_in: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.create(
        {
          version: args.version,
          name: args.name,
          manager: args.manager,
          sub_type: args.sub_type,
          price: args.price,
          max_subs: args.max_subs,
          coin_id: args.coin_id,
          expires_in: args.expires_in,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async update_manager(
    args: {
      new_manager_account: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.update_manager(
        { new_manager_account: args.new_manager_account },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async subscribe(
    args: {
      subscriber_account: string;
      fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      subscribe_pay_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.subscribe(
        {
          subscriber_account: args.subscriber_account,
          fee_txn: args.fee_txn,
          subscribe_pay_txn: args.subscribe_pay_txn,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async get_subscription(
    args: {
      subscriber: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<Subscription>> {
    const result = await this._execute(
      await this.compose.get_subscription(
        { subscriber: args.subscriber },
        txnParams
      )
    );
    return new bkr.ABIResult<Subscription>(
      result,
      Subscription.decodeResult(result.returnValue)
    );
  }
  async is_subscriber(
    args: {
      subscriber: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.is_subscriber(
        { subscriber: args.subscriber },
        txnParams
      )
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async claim_subscription(
    args: {
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.claim_subscription(
        { subscription_id: args.subscription_id },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async transfer_subscription(
    args: {
      new_address: string;
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.transfer_subscription(
        {
          new_address: args.new_address,
          subscription_id: args.subscription_id,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async unsubscribe(
    args: {
      sub_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.unsubscribe({ sub_id: args.sub_id }, txnParams)
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async mark_for_deletion(
    args: {
      locker_fund_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.mark_for_deletion(
        { locker_fund_txn: args.locker_fund_txn },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async delete_subscription(
    args: {
      subscriber: string;
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.delete_subscription(
        { subscriber: args.subscriber, subscription_id: args.subscription_id },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async delete(
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(await this.compose.delete(txnParams));
    return new bkr.ABIResult<void>(result);
  }
  compose = {
    create: async (
      args: {
        version: string;
        name: string;
        manager: string;
        sub_type: bigint;
        price: bigint;
        max_subs: bigint;
        coin_id: bigint;
        expires_in: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "create"),
        {
          version: args.version,
          name: args.name,
          manager: args.manager,
          sub_type: args.sub_type,
          price: args.price,
          max_subs: args.max_subs,
          coin_id: args.coin_id,
          expires_in: args.expires_in,
        },
        txnParams,
        atc
      );
    },
    update_manager: async (
      args: {
        new_manager_account: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "update_manager"),
        { new_manager_account: args.new_manager_account },
        txnParams,
        atc
      );
    },
    subscribe: async (
      args: {
        subscriber_account: string;
        fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
        subscribe_pay_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "subscribe"),
        {
          subscriber_account: args.subscriber_account,
          fee_txn: args.fee_txn,
          subscribe_pay_txn: args.subscribe_pay_txn,
        },
        txnParams,
        atc
      );
    },
    get_subscription: async (
      args: {
        subscriber: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "get_subscription"),
        { subscriber: args.subscriber },
        txnParams,
        atc
      );
    },
    is_subscriber: async (
      args: {
        subscriber: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "is_subscriber"),
        { subscriber: args.subscriber },
        txnParams,
        atc
      );
    },
    claim_subscription: async (
      args: {
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "claim_subscription"),
        { subscription_id: args.subscription_id },
        txnParams,
        atc
      );
    },
    transfer_subscription: async (
      args: {
        new_address: string;
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "transfer_subscription"),
        {
          new_address: args.new_address,
          subscription_id: args.subscription_id,
        },
        txnParams,
        atc
      );
    },
    unsubscribe: async (
      args: {
        sub_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "unsubscribe"),
        { sub_id: args.sub_id },
        txnParams,
        atc
      );
    },
    mark_for_deletion: async (
      args: {
        locker_fund_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "mark_for_deletion"),
        { locker_fund_txn: args.locker_fund_txn },
        txnParams,
        atc
      );
    },
    delete_subscription: async (
      args: {
        subscriber: string;
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "delete_subscription"),
        { subscriber: args.subscriber, subscription_id: args.subscription_id },
        txnParams,
        atc
      );
    },
    delete: async (
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      const deleteParams = await this._deleteParameters({ ...txnParams });
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "delete"),
        {},
        deleteParams,
        atc
      );
    },
  };
}
