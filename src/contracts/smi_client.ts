import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class Subscription {
  sub_type = BigInt(0);
  sub_id = BigInt(0);
  created_at = BigInt(0);
  expires_at = BigInt(0);
  expiration_type = BigInt(0);
  static codec: algosdk.ABIType = algosdk.ABIType.from(
    "(uint64,uint64,uint64,uint64,uint64)"
  );
  static fields: string[] = [
    "sub_type",
    "sub_id",
    "created_at",
    "expires_at",
    "expiration_type",
  ];
  static decodeResult(val: algosdk.ABIValue | undefined): Subscription {
    return bkr.decodeNamedTuple(val, Subscription.fields) as Subscription;
  }
  static decodeBytes(val: Uint8Array): Subscription {
    return bkr.decodeNamedTuple(
      Subscription.codec.decode(val),
      Subscription.fields
    ) as Subscription;
  }
}
export class SMI extends bkr.ApplicationClient {
  desc = "";
  override appSchema: bkr.Schema = {
    declared: {
      active_subs: {
        type: bkr.AVMType.uint64,
        key: "active_subs",
        desc: "",
        static: false,
      },
      coin_id: {
        type: bkr.AVMType.uint64,
        key: "coin_id",
        desc: "",
        static: false,
      },
      lifecycle: {
        type: bkr.AVMType.uint64,
        key: "lifecycle",
        desc: "",
        static: false,
      },
      manager: {
        type: bkr.AVMType.bytes,
        key: "manager",
        desc: "",
        static: false,
      },
      max_subs: {
        type: bkr.AVMType.uint64,
        key: "max_subs",
        desc: "",
        static: false,
      },
      name: { type: bkr.AVMType.bytes, key: "name", desc: "", static: false },
      price: {
        type: bkr.AVMType.uint64,
        key: "price",
        desc: "",
        static: false,
      },
      sub_type: {
        type: bkr.AVMType.uint64,
        key: "sub_type",
        desc: "",
        static: false,
      },
      total_subs: {
        type: bkr.AVMType.uint64,
        key: "total_subs",
        desc: "",
        static: false,
      },
      version: {
        type: bkr.AVMType.bytes,
        key: "version",
        desc: "",
        static: false,
      },
    },
    reserved: {},
  };
  override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
  override approvalProgram =
    "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA4IDMgMTI4IDI1NQpieXRlY2Jsb2NrIDB4IDB4NmQ2MTZlNjE2NzY1NzIgMHg2MTYzNzQ2OTc2NjU1ZjczNzU2MjczIDB4MDgyMDA0MDEwMDAyMDQ4MDAwMzUwMDgwMDAzNTAxMzIwNDI0MTI0MDAxNWUyMzQwMDE1MDMyMDQyNDEyNDAwMTM0MjM0MDAxMjgzMjA0MjIxMjQwMDExMjIzNDAwMGZhMzIwNDI0MTI0MDAwZGUzMjA0ODEwMzEyNDAwMGJiMjM0MDAwOTQzMjA0MjQxMjQwMDA3OTIzNDAwMDZkMzIwNDgxMTEwZTQwMDAwOTIzNDAwMDAxMDAyMjQyMDEyYTIzMzUwMjIzMzUwMzIzMzUwMjM0MDIzMjA0MGM0MDAwMDgzNDAzMzIwNDEyNDJmZmRmMzQwMjM4MTA4MTA2MTI0NDM0MDIzODE5MjMxMjQ0MzQwMjM4MDkzMjAzMTI0NDM0MDIzODIwMzIwMzEyNDQzNDAyMzgwMTIzMTIzNDAyMzgwMTMyMDA4MTAzMzIwNDBiMGIwZTExNDQzNDAzMjIwODM1MDMzNDAyMjIwODM1MDI0MmZmYWQzNDAwODgwMWU0NDIwMGM2MjMzODEwMjIxMjIyMzgxMDI1MTIyMjM4MTAyMjEyMTExMDQyZmY3NDMyMDQyNDEyNDAwMDE0MzIwNDgxMDMxMjQwMDAwNDIzNDIwMDlmMzQwMTg4MDExMTQyMDA5NzM0MDE4ODAwZTY0MjAwOGYyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTAyNDM4MTAyNTEyMTA0MmZmMmIyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTA0MmZmMTYyMzgxMDY4ODAwNWEyMzM4MDEzMjAwMzIwNDBiMGU0NDIyNDIwMDRiMjMzODEwODEwNjEyMjMzODE5MjQxMjEwNDJmZWUwMzQwMTg4MDEwZTQyMDAzNDIzMzgxMDIyMTIyMjM4MTAyNTEyMTAyMjM4MTQzNDAwMTMxMDQyZmViODM0MDAzNDAxODgwMGFjNDIwMDE1MjMzODEwMjIxMjIyMzgxMDIyMTIxMDIyMzgwNzM0MDAxMzEwNDJmZThlNDM4YTAyMDA4YmZlMzIwNDBjNDQ4YmZlMzgxMDhiZmYxMjQ0OGJmZTM4MDkzMjAzMTI0NDhiZmUzODEwMjUxMjQxMDAwODhiZmUzODE1MzIwMzEyNDQ4OThhMDMwMDhiZmQ4YmZmODhmZmNiOGJmZDM4MDE4YmZlMTI0NDg5OGEwMzAwOGJmZDhiZmU4YmZmODhmZmUxOGJmZDM4MjAzMjAzMTI0NDg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmZGUyMjIzODEwNjg4ZmZkNzIzMzgwMDhiZmYxMjQ0MjIzODE5MjIxMjQ0MjI4OThhMDEwMTI0MjMyNTg4ZmZiZjI0MzgxMzI0MzgwNzEyNDQyNDM4MTIyMzEyNDQ4YmZmODhmZmMxODk4YTAyMDEyMzMyMDAzMjA0MGIyMjg4ZmY5ZTIyMjMyMjg4ZmY4NTIzMzgwMDhiZmUxMjQ0MjMzODA4ODFhMDhkMDYwZjQ0MjIzODAwMjIzODA3MTI0NDIyMzgwODIzMTI0NDIyMzgyMDhiZmYxMjIyMzgyMDMyMDMxMjExMjIxMjQ0MjI4OThhMDEwMTIzMzIwMDI0MGIyMjg4ZmY1YzIyMzIwMDI0MGIyNTg4ZmY1MzIyMzgxMzMyMDMxMjQ0MjMzODAwOGJmZjEyNDQyMzM4MDcyMjM4MDAxMjQ0MjMzODA4ODFkMGU4MGMwZjQ0MjIzODAwMjIzODE0MTI0NDIyMzgxMjIzMTI0NDIyODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmYxNzIyMzgxMDI1MTI0MDAwMDkyMjIzMjI4OGZmMDk0MjAwMDYyMjIzMjU4OGZmMDAyMzM4MDA4YmZmMTI0NDIyMzgwNzhiZmYxMjIyMzgxNDhiZmYxMjExMjIxMjQ0MjI4OSAweDcwNzI2OTYzNjUgMHg3Mzc1NjI1Zjc0Nzk3MDY1IDB4MTUxZjdjNzUgMHg2YzY5NjY2NTYzNzk2MzZjNjUgMHg2ZDYxNzg1ZjczNzU2MjczIDB4NzQ2Zjc0NjE2YzVmNzM3NTYyNzMgMHg2ZTYxNmQ2NSAweDUwNzI2ZjY3NzI2MTZkIDB4NjM2ZjY5NmU1ZjY5NjQgMHg3NjY1NzI3MzY5NmY2ZQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMjgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgxN2Q3MTU1YSAvLyAiY3JlYXRlKHN0cmluZyxzdHJpbmcsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDI3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Yzg2ZmRiMDEgLy8gInVwZGF0ZV9tYW5hZ2VyKGFkZHJlc3Mpdm9pZCIKPT0KYm56IG1haW5fbDI2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NzRlYmFhMGIgLy8gImNyZWF0ZV9kaXNjb3VudCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQscGF5KXZvaWQiCj09CmJueiBtYWluX2wyNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGE5YzBlY2MwIC8vICJkZWxldGVfZGlzY291bnQodWludDY0KXZvaWQiCj09CmJueiBtYWluX2wyNAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGRjNzE2ZTUwIC8vICJzdWJzY3JpYmUoYWRkcmVzcyx1aW50NjQscGF5LHR4bil1aW50NjQiCj09CmJueiBtYWluX2wyMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGMxNjg2ZmVkIC8vICJnZXRfc3Vic2NyaXB0aW9uKGFkZHJlc3MpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpIgo9PQpibnogbWFpbl9sMjIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgxZWM1ZTk4YSAvLyAiaXNfc3Vic2NyaWJlcihhZGRyZXNzKXVpbnQ2NCIKPT0KYm56IG1haW5fbDIxCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzU0OTM4NjggLy8gImNsYWltX3N1YnNjcmlwdGlvbih1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDIwCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4N2IyZWNjMzEgLy8gInRyYW5zZmVyX3N1YnNjcmlwdGlvbihhZGRyZXNzLHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg5MmE5MGFmNiAvLyAidW5zdWJzY3JpYmUoYXNzZXQpdWludDY0Igo9PQpibnogbWFpbl9sMTgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4MmQ1N2ZjYyAvLyAibWFya19mb3JfZGVsZXRpb24ocGF5KXZvaWQiCj09CmJueiBtYWluX2wxNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDI4ZTFlYThmIC8vICJkZWxldGVfc3Vic2NyaXB0aW9uKGFkZHJlc3MsdWludDY0KXZvaWQiCj09CmJueiBtYWluX2wxNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDI0Mzc4ZDNjIC8vICJkZWxldGUoKXZvaWQiCj09CmJueiBtYWluX2wxNQplcnIKbWFpbl9sMTU6CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGRlbGV0ZV8yNgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMjMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDI0CmxvYWQgMjMKbG9hZCAyNApjYWxsc3ViIGRlbGV0ZXN1YnNjcmlwdGlvbl8yNQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0Kc3RvcmUgMjIKbG9hZCAyMgpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApsb2FkIDIyCmNhbGxzdWIgbWFya2ZvcmRlbGV0aW9uXzI0CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmNhbGxzdWIgdW5zdWJzY3JpYmVfMjMKc3RvcmUgMjEKYnl0ZWMgNiAvLyAweDE1MWY3Yzc1CmxvYWQgMjEKaXRvYgpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAxOQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgMjAKbG9hZCAxOQpsb2FkIDIwCmNhbGxzdWIgdHJhbnNmZXJzdWJzY3JpcHRpb25fMjIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKY2FsbHN1YiBjbGFpbXN1YnNjcmlwdGlvbl8yMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjE6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBpc3N1YnNjcmliZXJfMjAKc3RvcmUgMTgKYnl0ZWMgNiAvLyAweDE1MWY3Yzc1CmxvYWQgMTgKaXRvYgpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpjYWxsc3ViIGdldHN1YnNjcmlwdGlvbl8xOQpzdG9yZSAxNwpieXRlYyA2IC8vIDB4MTUxZjdjNzUKbG9hZCAxNwpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAxMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgMTMKdHhuIEdyb3VwSW5kZXgKcHVzaGludCAyIC8vIDIKLQpzdG9yZSAxNApsb2FkIDE0Cmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0Kc3RvcmUgMTUKbG9hZCAxMgpsb2FkIDEzCmxvYWQgMTQKbG9hZCAxNQpjYWxsc3ViIHN1YnNjcmliZV8xOApzdG9yZSAxNgpieXRlYyA2IC8vIDB4MTUxZjdjNzUKbG9hZCAxNgppdG9iCmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI0Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKY2FsbHN1YiBkZWxldGVkaXNjb3VudF8xNwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpzdG9yZSA3CnR4bmEgQXBwbGljYXRpb25BcmdzIDIKYnRvaQpzdG9yZSA4CnR4bmEgQXBwbGljYXRpb25BcmdzIDMKYnRvaQpzdG9yZSA5CnR4bmEgQXBwbGljYXRpb25BcmdzIDQKYnRvaQpzdG9yZSAxMAp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCnN0b3JlIDExCmxvYWQgMTEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKbG9hZCA3CmxvYWQgOApsb2FkIDkKbG9hZCAxMApsb2FkIDExCmNhbGxzdWIgY3JlYXRlZGlzY291bnRfMTYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmNhbGxzdWIgdXBkYXRlbWFuYWdlcl8xNQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCnN0b3JlIDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpzdG9yZSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDQKYnRvaQpzdG9yZSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDUKYnRvaQpzdG9yZSA0CnR4bmEgQXBwbGljYXRpb25BcmdzIDYKYnRvaQpzdG9yZSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDcKYnRvaQpzdG9yZSA2CmxvYWQgMApsb2FkIDEKbG9hZCAyCmxvYWQgMwpsb2FkIDQKbG9hZCA1CmxvYWQgNgpjYWxsc3ViIGNyZWF0ZV8xMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wzMgp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgMiAvLyBDbG9zZU91dAo9PQpibnogbWFpbl9sMzEKZXJyCm1haW5fbDMxOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBjbG9zZW91dF8xNAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMzI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzEzCmludGNfMSAvLyAxCnJldHVybgoKLy8gaW50X3RvX2FzY2lpCmludHRvYXNjaWlfMDoKcHJvdG8gMSAxCnB1c2hieXRlcyAweDMwMzEzMjMzMzQzNTM2MzczODM5IC8vICIwMTIzNDU2Nzg5IgpmcmFtZV9kaWcgLTEKaW50Y18xIC8vIDEKZXh0cmFjdDMKcmV0c3ViCgovLyBpdG9hCml0b2FfMToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQppbnRjXzAgLy8gMAo9PQpibnogaXRvYV8xX2w1CmZyYW1lX2RpZyAtMQpwdXNoaW50IDEwIC8vIDEwCi8KaW50Y18wIC8vIDAKPgpibnogaXRvYV8xX2w0CmJ5dGVjXzAgLy8gIiIKaXRvYV8xX2wzOgpmcmFtZV9kaWcgLTEKcHVzaGludCAxMCAvLyAxMAolCmNhbGxzdWIgaW50dG9hc2NpaV8wCmNvbmNhdApiIGl0b2FfMV9sNgppdG9hXzFfbDQ6CmZyYW1lX2RpZyAtMQpwdXNoaW50IDEwIC8vIDEwCi8KY2FsbHN1YiBpdG9hXzEKYiBpdG9hXzFfbDMKaXRvYV8xX2w1OgpwdXNoYnl0ZXMgMHgzMCAvLyAiMCIKaXRvYV8xX2w2OgpyZXRzdWIKCi8vIGVuY29kZV91dmFyaW50X2ltcGwKZW5jb2RldXZhcmludGltcGxfMjoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMQpmcmFtZV9kaWcgLTIKaW50YyA0IC8vIDEyOAo+PQpibnogZW5jb2RldXZhcmludGltcGxfMl9sMgpmcmFtZV9kaWcgLTIKaW50YyA1IC8vIDI1NQomCml0b2IKZXh0cmFjdCA3IDEKYiBlbmNvZGV1dmFyaW50aW1wbF8yX2wzCmVuY29kZXV2YXJpbnRpbXBsXzJfbDI6CmZyYW1lX2RpZyAtMgpwdXNoaW50IDcgLy8gNwpzaHIKZnJhbWVfZGlnIC0yCmludGMgNSAvLyAyNTUKJgppbnRjIDQgLy8gMTI4CnwKaXRvYgpleHRyYWN0IDcgMQpjYWxsc3ViIGVuY29kZXV2YXJpbnRpbXBsXzIKZW5jb2RldXZhcmludGltcGxfMl9sMzoKY29uY2F0CnJldHN1YgoKLy8gaW5uZXJfY3JlYXRlX25mdAppbm5lcmNyZWF0ZW5mdF8zOgpwcm90byAzIDEKaXR4bl9iZWdpbgppbnRjXzMgLy8gYWNmZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmludGNfMSAvLyAxCml0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKaW50Y18xIC8vIDEKaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KZnJhbWVfZGlnIC0yCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQpmcmFtZV9kaWcgLTMKaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKZnJhbWVfZGlnIC0xCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKaXR4biBDcmVhdGVkQXNzZXRJRApyZXRzdWIKCi8vIGlubmVyX3RyYW5zZmVyX25mdAppbm5lcnRyYW5zZmVybmZ0XzQ6CnByb3RvIDMgMAppdHhuX2JlZ2luCnB1c2hpbnQgNCAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMwppdHhuX2ZpZWxkIFhmZXJBc3NldAppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIEFzc2V0QW1vdW50CmZyYW1lX2RpZyAtMgppdHhuX2ZpZWxkIEFzc2V0U2VuZGVyCmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBpbm5lcl9kZWxldGVfbmZ0CmlubmVyZGVsZXRlbmZ0XzU6CnByb3RvIDEgMAppdHhuX2JlZ2luCmludGNfMyAvLyBhY2ZnCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0xCml0eG5fZmllbGQgQ29uZmlnQXNzZXQKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBpbm5lcl9kZWxldGVfc3Vic2NyaXB0aW9uCmlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzY6CnByb3RvIDIgMApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA2MwpzdG9yZSA2Mgpsb2FkIDYzCmxvYWQgNjIKaW50Y18wIC8vIDAKPgomJgpibnogaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sMwppbm5lcmRlbGV0ZXN1YnNjcmlwdGlvbl82X2wxOgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBpbm5lcmRlbGV0ZW5mdF81CmJ5dGVjXzIgLy8gImFjdGl2ZV9zdWJzIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAohPQpieiBpbm5lcmRlbGV0ZXN1YnNjcmlwdGlvbl82X2w0CmJ5dGVjXzIgLy8gImFjdGl2ZV9zdWJzIgpieXRlY18yIC8vICJhY3RpdmVfc3VicyIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKLQphcHBfZ2xvYmFsX3B1dApiIGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzZfbDQKaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sMzoKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAtMgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpjYWxsc3ViIGlubmVydHJhbnNmZXJuZnRfNApiIGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzZfbDEKaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sNDoKZnJhbWVfZGlnIC0yCmJveF9kZWwKcG9wCnJldHN1YgoKLy8gaW5uZXJfY29tcHV0ZV9leHBpcmF0aW9uCmlubmVyY29tcHV0ZWV4cGlyYXRpb25fNzoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgppbnRjXzAgLy8gMAo9PQpibnogaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83X2wxMApmcmFtZV9kaWcgLTEKaW50Y18xIC8vIDEKPT0KYm56IGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sOQpmcmFtZV9kaWcgLTEKcHVzaGludCAyIC8vIDIKPT0KYm56IGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sOApmcmFtZV9kaWcgLTEKaW50Y18zIC8vIDMKPT0KYm56IGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sNwpmcmFtZV9kaWcgLTEKcHVzaGludCA0IC8vIDQKPT0KYm56IGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sNgplcnIKaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83X2w2OgpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCnB1c2hpbnQgMzE1MzYwMDAgLy8gMzE1MzYwMDAKKwpiIGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sMTEKaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83X2w3OgpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCnB1c2hpbnQgMTU1NTIwMDAgLy8gMTU1NTIwMDAKKwpiIGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sMTEKaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83X2w4OgpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCnB1c2hpbnQgNzc3NjAwMCAvLyA3Nzc2MDAwCisKYiBpbm5lcmNvbXB1dGVleHBpcmF0aW9uXzdfbDExCmlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sOToKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApwdXNoaW50IDI1OTIwMDAgLy8gMjU5MjAwMAorCmIgaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83X2wxMQppbm5lcmNvbXB1dGVleHBpcmF0aW9uXzdfbDEwOgppbnRjXzAgLy8gMAppbm5lcmNvbXB1dGVleHBpcmF0aW9uXzdfbDExOgpyZXRzdWIKCi8vIGluY3JlbWVudF9kaXNjb3VudF90b3RhbF9jbGFpbXMKaW5jcmVtZW50ZGlzY291bnR0b3RhbGNsYWltc184Ogpwcm90byAxIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDUKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0xCml0b2IKYm94X2xlbgpzdG9yZSA0MwpzdG9yZSA0Mgpsb2FkIDQzCmJ6IGluY3JlbWVudGRpc2NvdW50dG90YWxjbGFpbXNfOF9sMgpmcmFtZV9kaWcgLTEKaXRvYgpib3hfZ2V0CnN0b3JlIDQ1CnN0b3JlIDQ0CmxvYWQgNDUKYXNzZXJ0CmxvYWQgNDQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMiAvLyA4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQppbmNyZW1lbnRkaXNjb3VudHRvdGFsY2xhaW1zXzhfbDI6CmZyYW1lX2RpZyAwCnB1c2hpbnQgMTYgLy8gMTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgMjQgLy8gMjQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCnB1c2hpbnQgMzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmludGNfMSAvLyAxCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAtMQppdG9iCmZyYW1lX2RpZyAxCml0b2IKY29uY2F0CmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA0Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2Cml0b2IKY29uY2F0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgLTEKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEKaXRvYgpmcmFtZV9kaWcgNwpib3hfcHV0CnJldHN1YgoKLy8gaW5uZXJfY29tcHV0ZV9kaXNjb3VudF9wcmljZQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzk6CnByb3RvIDIgMQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gMgpmcmFtZV9kaWcgLTIKaXRvYgpib3hfbGVuCnN0b3JlIDM5CnN0b3JlIDM4CmxvYWQgMzkKYm56IGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sMgpmcmFtZV9kaWcgLTEKYiBpbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDkKaW5uZXJjb21wdXRlZGlzY291bnRwcmljZV85X2wyOgpmcmFtZV9kaWcgLTIKaXRvYgpib3hfZ2V0CnN0b3JlIDQxCnN0b3JlIDQwCmxvYWQgNDEKYXNzZXJ0CmxvYWQgNDAKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMiAvLyA4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMApwdXNoaW50IDE2IC8vIDE2CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApwdXNoaW50IDI0IC8vIDI0CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCjwKZnJhbWVfZGlnIC0yCmludGNfMCAvLyAwCiE9CiYmCmJueiBpbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDgKZnJhbWVfZGlnIDEKaW50Y18wIC8vIDAKPT0KYm56IGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sNwpmcmFtZV9kaWcgMQppbnRjXzEgLy8gMQo9PQpibnogaW5uZXJjb21wdXRlZGlzY291bnRwcmljZV85X2w2CmZyYW1lX2RpZyAtMQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDY6CmZyYW1lX2RpZyAtMgpjYWxsc3ViIGluY3JlbWVudGRpc2NvdW50dG90YWxjbGFpbXNfOApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDIKLQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDc6CmZyYW1lX2RpZyAtMgpjYWxsc3ViIGluY3JlbWVudGRpc2NvdW50dG90YWxjbGFpbXNfOApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAyCioKcHVzaGludCAxMDAgLy8gMTAwCi8KLQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDg6CmZyYW1lX2RpZyAtMgppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDk6CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGlubmVyX2NvbXB1dGVfcHJpY2UKaW5uZXJjb21wdXRlcHJpY2VfMTA6CnByb3RvIDEgMQppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTEKaW50Y18wIC8vIDAKPT0KYm56IGlubmVyY29tcHV0ZXByaWNlXzEwX2wxMApmcmFtZV9kaWcgLTEKaW50Y18xIC8vIDEKPT0KYm56IGlubmVyY29tcHV0ZXByaWNlXzEwX2w5CmZyYW1lX2RpZyAtMQpwdXNoaW50IDIgLy8gMgo9PQpibnogaW5uZXJjb21wdXRlcHJpY2VfMTBfbDgKZnJhbWVfZGlnIC0xCmludGNfMyAvLyAzCj09CmJueiBpbm5lcmNvbXB1dGVwcmljZV8xMF9sNwpmcmFtZV9kaWcgLTEKcHVzaGludCA0IC8vIDQKPT0KYm56IGlubmVyY29tcHV0ZXByaWNlXzEwX2w2CmVycgppbm5lcmNvbXB1dGVwcmljZV8xMF9sNjoKYnl0ZWMgNCAvLyAicHJpY2UiCmFwcF9nbG9iYWxfZ2V0CnB1c2hpbnQgMTIgLy8gMTIKKgpiIGlubmVyY29tcHV0ZXByaWNlXzEwX2wxMQppbm5lcmNvbXB1dGVwcmljZV8xMF9sNzoKYnl0ZWMgNCAvLyAicHJpY2UiCmFwcF9nbG9iYWxfZ2V0CnB1c2hpbnQgNiAvLyA2CioKYiBpbm5lcmNvbXB1dGVwcmljZV8xMF9sMTEKaW5uZXJjb21wdXRlcHJpY2VfMTBfbDg6CmJ5dGVjIDQgLy8gInByaWNlIgphcHBfZ2xvYmFsX2dldAppbnRjXzMgLy8gMwoqCmIgaW5uZXJjb21wdXRlcHJpY2VfMTBfbDExCmlubmVyY29tcHV0ZXByaWNlXzEwX2w5OgpieXRlYyA0IC8vICJwcmljZSIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKKgpiIGlubmVyY29tcHV0ZXByaWNlXzEwX2wxMQppbm5lcmNvbXB1dGVwcmljZV8xMF9sMTA6CmJ5dGVjIDQgLy8gInByaWNlIgphcHBfZ2xvYmFsX2dldAppbm5lcmNvbXB1dGVwcmljZV8xMF9sMTE6CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDAKY2FsbHN1YiBpbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzkKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gaW5uZXJfdmVyaWZ5X2V4cGlyYXRpb25fdHlwZQppbm5lcnZlcmlmeWV4cGlyYXRpb250eXBlXzExOgpwcm90byAxIDAKYnl0ZWMgNSAvLyAic3ViX3R5cGUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj09CmZyYW1lX2RpZyAtMQppbnRjXzEgLy8gMQo9PQp8fApmcmFtZV9kaWcgLTEKcHVzaGludCAyIC8vIDIKPT0KfHwKZnJhbWVfZGlnIC0xCmludGNfMyAvLyAzCj09Cnx8CmZyYW1lX2RpZyAtMQpwdXNoaW50IDQgLy8gNAo9PQp8fAovLyBFeHBpcmF0aW9uIHR5cGUgaXMgaW52YWxpZAphc3NlcnQKcmV0c3ViCgovLyBjcmVhdGUKY3JlYXRlXzEyOgpwcm90byA3IDAKYnl0ZWNfMiAvLyAiYWN0aXZlX3N1YnMiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEyIC8vICJjb2luX2lkIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA3IC8vICJsaWZlY3ljbGUiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwphcHBfZ2xvYmFsX3B1dApieXRlYyA4IC8vICJtYXhfc3VicyIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgMTAgLy8gIm5hbWUiCnB1c2hieXRlcyAweDY0NjU2NjYxNzU2Yzc0IC8vICJkZWZhdWx0IgphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJwcmljZSIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNSAvLyAic3ViX3R5cGUiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDkgLy8gInRvdGFsX3N1YnMiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEzIC8vICJ2ZXJzaW9uIgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEzIC8vICJ2ZXJzaW9uIgpmcmFtZV9kaWcgLTcKZXh0cmFjdCAyIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgMTAgLy8gIm5hbWUiCmZyYW1lX2RpZyAtNgpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlY18xIC8vICJtYW5hZ2VyIgpmcmFtZV9kaWcgLTUKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNSAvLyAic3ViX3R5cGUiCmZyYW1lX2RpZyAtNAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJwcmljZSIKZnJhbWVfZGlnIC0zCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDggLy8gIm1heF9zdWJzIgpmcmFtZV9kaWcgLTIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgMTIgLy8gImNvaW5faWQiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIG9wdGluCm9wdGluXzEzOgpwcm90byAwIDAKcmV0c3ViCgovLyBjbG9zZW91dApjbG9zZW91dF8xNDoKcHJvdG8gMCAwCmludGNfMSAvLyAxCnJldHVybgoKLy8gdXBkYXRlX21hbmFnZXIKdXBkYXRlbWFuYWdlcl8xNToKcHJvdG8gMSAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMSAvLyAibWFuYWdlciIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCiE9Ci8vIE5ldyBtYW5hZ2VyIGNhbm5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgb2xkIG1hbmFnZXIKYXNzZXJ0CmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGNyZWF0ZV9kaXNjb3VudApjcmVhdGVkaXNjb3VudF8xNjoKcHJvdG8gNSAwCmludGNfMCAvLyAwCmR1cG4gMgpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cAp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIFNlbmRlcgpieXRlY18xIC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldAo9PQovLyBGZWUgdHhuIG11c3QgYmUgc2VudCBieSB0aGUgbWFuYWdlciBhbmQgbXVzdCBiZSBhdCAgICAgICAgICAgICAgICAgbGVhc3QgdGhlIHN1YnNjcmliZXIgYm94IGZlZQphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApwdXNoaW50IDE4NTAwIC8vIDE4NTAwCj49Ci8vIEZlZSB0eG4gbXVzdCBiZSBzZW50IGJ5IHRoZSBtYW5hZ2VyIGFuZCBtdXN0IGJlIGF0ICAgICAgICAgICAgICAgICBsZWFzdCB0aGUgc3Vic2NyaWJlciBib3ggZmVlCmFzc2VydApmcmFtZV9kaWcgLTUKaXRvYgpib3hfbGVuCnN0b3JlIDI2CnN0b3JlIDI1CmxvYWQgMjYKaW50Y18xIC8vIDEKIT0KLy8gRGlzY291bnQgYWxyZWFkeSBleGlzdHMsIGRlbGV0ZSBvbmUgZmlyc3QKYXNzZXJ0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAtMgppbnRjXzAgLy8gMAo+CmJueiBjcmVhdGVkaXNjb3VudF8xNl9sMgppbnRjXzAgLy8gMApiIGNyZWF0ZWRpc2NvdW50XzE2X2wzCmNyZWF0ZWRpc2NvdW50XzE2X2wyOgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTIKKwpjcmVhdGVkaXNjb3VudF8xNl9sMzoKZnJhbWVfYnVyeSAxCmludGNfMCAvLyAwCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTUKaXRvYgpmcmFtZV9kaWcgLTQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0zCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxCml0b2IKY29uY2F0CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgLTUKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTUKaXRvYgpmcmFtZV9kaWcgMwpib3hfcHV0CnJldHN1YgoKLy8gZGVsZXRlX2Rpc2NvdW50CmRlbGV0ZWRpc2NvdW50XzE3Ogpwcm90byAxIDAKdHhuIFNlbmRlcgpieXRlY18xIC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldAo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmZyYW1lX2RpZyAtMQppdG9iCmJveF9sZW4Kc3RvcmUgMjgKc3RvcmUgMjcKbG9hZCAyOAppbnRjXzEgLy8gMQo9PQovLyBEaXNjb3VudCBkb2VzIG5vdCBleGlzdAphc3NlcnQKZnJhbWVfZGlnIC0xCml0b2IKYm94X2RlbApwb3AKcmV0c3ViCgovLyBzdWJzY3JpYmUKc3Vic2NyaWJlXzE4Ogpwcm90byA0IDEKaW50Y18wIC8vIDAKZHVwbiAyCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmR1cG4gMwpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cApmcmFtZV9kaWcgLTMKY2FsbHN1YiBpbm5lcnZlcmlmeWV4cGlyYXRpb250eXBlXzExCmJ5dGVjIDUgLy8gInN1Yl90eXBlIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTMKY2FsbHN1YiBpbm5lcmNvbXB1dGVleHBpcmF0aW9uXzcKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtMwpjYWxsc3ViIGlubmVyY29tcHV0ZXByaWNlXzEwCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTQKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgo9PQovLyBTdWJzY3JpYmVyIGFjY291bnQgbXVzdCBiZSB0aGUgc2VuZGVyCmFzc2VydApieXRlYyAxMSAvLyAiUHJvZ3JhbSIKaW50Y18wIC8vIDAKc3RvcmUgMzAKaW50Y18wIC8vIDAKc3RvcmUgMzEKYnl0ZWNfMCAvLyAiIgpzdG9yZSAzMgpieXRlY18wIC8vICIiCnN0b3JlIDMzCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0CmxlbgpieXRlY18wIC8vICIiCmNhbGxzdWIgZW5jb2RldXZhcmludGltcGxfMgpieXRlY18xIC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldApjb25jYXQKc3RvcmUgMzIKbG9hZCAzMwpieXRlY18zIC8vIDB4MDgyMDA0MDEwMDAyMDQ4MDAwMzUwMDgwMDAzNTAxMzIwNDI0MTI0MDAxNWUyMzQwMDE1MDMyMDQyNDEyNDAwMTM0MjM0MDAxMjgzMjA0MjIxMjQwMDExMjIzNDAwMGZhMzIwNDI0MTI0MDAwZGUzMjA0ODEwMzEyNDAwMGJiMjM0MDAwOTQzMjA0MjQxMjQwMDA3OTIzNDAwMDZkMzIwNDgxMTEwZTQwMDAwOTIzNDAwMDAxMDAyMjQyMDEyYTIzMzUwMjIzMzUwMzIzMzUwMjM0MDIzMjA0MGM0MDAwMDgzNDAzMzIwNDEyNDJmZmRmMzQwMjM4MTA4MTA2MTI0NDM0MDIzODE5MjMxMjQ0MzQwMjM4MDkzMjAzMTI0NDM0MDIzODIwMzIwMzEyNDQzNDAyMzgwMTIzMTIzNDAyMzgwMTMyMDA4MTAzMzIwNDBiMGIwZTExNDQzNDAzMjIwODM1MDMzNDAyMjIwODM1MDI0MmZmYWQzNDAwODgwMWU0NDIwMGM2MjMzODEwMjIxMjIyMzgxMDI1MTIyMjM4MTAyMjEyMTExMDQyZmY3NDMyMDQyNDEyNDAwMDE0MzIwNDgxMDMxMjQwMDAwNDIzNDIwMDlmMzQwMTg4MDExMTQyMDA5NzM0MDE4ODAwZTY0MjAwOGYyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTAyNDM4MTAyNTEyMTA0MmZmMmIyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTA0MmZmMTYyMzgxMDY4ODAwNWEyMzM4MDEzMjAwMzIwNDBiMGU0NDIyNDIwMDRiMjMzODEwODEwNjEyMjMzODE5MjQxMjEwNDJmZWUwMzQwMTg4MDEwZTQyMDAzNDIzMzgxMDIyMTIyMjM4MTAyNTEyMTAyMjM4MTQzNDAwMTMxMDQyZmViODM0MDAzNDAxODgwMGFjNDIwMDE1MjMzODEwMjIxMjIyMzgxMDIyMTIxMDIyMzgwNzM0MDAxMzEwNDJmZThlNDM4YTAyMDA4YmZlMzIwNDBjNDQ4YmZlMzgxMDhiZmYxMjQ0OGJmZTM4MDkzMjAzMTI0NDhiZmUzODEwMjUxMjQxMDAwODhiZmUzODE1MzIwMzEyNDQ4OThhMDMwMDhiZmQ4YmZmODhmZmNiOGJmZDM4MDE4YmZlMTI0NDg5OGEwMzAwOGJmZDhiZmU4YmZmODhmZmUxOGJmZDM4MjAzMjAzMTI0NDg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmZGUyMjIzODEwNjg4ZmZkNzIzMzgwMDhiZmYxMjQ0MjIzODE5MjIxMjQ0MjI4OThhMDEwMTI0MjMyNTg4ZmZiZjI0MzgxMzI0MzgwNzEyNDQyNDM4MTIyMzEyNDQ4YmZmODhmZmMxODk4YTAyMDEyMzMyMDAzMjA0MGIyMjg4ZmY5ZTIyMjMyMjg4ZmY4NTIzMzgwMDhiZmUxMjQ0MjMzODA4ODFhMDhkMDYwZjQ0MjIzODAwMjIzODA3MTI0NDIyMzgwODIzMTI0NDIyMzgyMDhiZmYxMjIyMzgyMDMyMDMxMjExMjIxMjQ0MjI4OThhMDEwMTIzMzIwMDI0MGIyMjg4ZmY1YzIyMzIwMDI0MGIyNTg4ZmY1MzIyMzgxMzMyMDMxMjQ0MjMzODAwOGJmZjEyNDQyMzM4MDcyMjM4MDAxMjQ0MjMzODA4ODFkMGU4MGMwZjQ0MjIzODAwMjIzODE0MTI0NDIyMzgxMjIzMTI0NDIyODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmYxNzIyMzgxMDI1MTI0MDAwMDkyMjIzMjI4OGZmMDk0MjAwMDYyMjIzMjU4OGZmMDAyMzM4MDA4YmZmMTI0NDIyMzgwNzhiZmYxMjIyMzgxNDhiZmYxMjExMjIxMjQ0MjI4OQpsb2FkIDMwCmludGNfMiAvLyA4CnN1YnN0cmluZzMKY29uY2F0CmxvYWQgMzIKY29uY2F0CnN0b3JlIDMzCmxvYWQgMzEKbG9hZCAzMgpsZW4KKwppbnRjXzEgLy8gMQotCnN0b3JlIDMxCmludGNfMiAvLyA4CmludGNfMSAvLyAxCisKc3RvcmUgMzAKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCmxlbgpieXRlY18wIC8vICIiCmNhbGxzdWIgZW5jb2RldXZhcmludGltcGxfMgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKY29uY2F0CnN0b3JlIDMyCmxvYWQgMzMKYnl0ZWNfMyAvLyAweDA4MjAwNDAxMDAwMjA0ODAwMDM1MDA4MDAwMzUwMTMyMDQyNDEyNDAwMTVlMjM0MDAxNTAzMjA0MjQxMjQwMDEzNDIzNDAwMTI4MzIwNDIyMTI0MDAxMTIyMzQwMDBmYTMyMDQyNDEyNDAwMGRlMzIwNDgxMDMxMjQwMDBiYjIzNDAwMDk0MzIwNDI0MTI0MDAwNzkyMzQwMDA2ZDMyMDQ4MTExMGU0MDAwMDkyMzQwMDAwMTAwMjI0MjAxMmEyMzM1MDIyMzM1MDMyMzM1MDIzNDAyMzIwNDBjNDAwMDA4MzQwMzMyMDQxMjQyZmZkZjM0MDIzODEwODEwNjEyNDQzNDAyMzgxOTIzMTI0NDM0MDIzODA5MzIwMzEyNDQzNDAyMzgyMDMyMDMxMjQ0MzQwMjM4MDEyMzEyMzQwMjM4MDEzMjAwODEwMzMyMDQwYjBiMGUxMTQ0MzQwMzIyMDgzNTAzMzQwMjIyMDgzNTAyNDJmZmFkMzQwMDg4MDFlNDQyMDBjNjIzMzgxMDIyMTIyMjM4MTAyNTEyMjIzODEwMjIxMjExMTA0MmZmNzQzMjA0MjQxMjQwMDAxNDMyMDQ4MTAzMTI0MDAwMDQyMzQyMDA5ZjM0MDE4ODAxMTE0MjAwOTczNDAxODgwMGU2NDIwMDhmMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwMjQzODEwMjUxMjEwNDJmZjJiMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwNDJmZjE2MjM4MTA2ODgwMDVhMjMzODAxMzIwMDMyMDQwYjBlNDQyMjQyMDA0YjIzMzgxMDgxMDYxMjIzMzgxOTI0MTIxMDQyZmVlMDM0MDE4ODAxMGU0MjAwMzQyMzM4MTAyMjEyMjIzODEwMjUxMjEwMjIzODE0MzQwMDEzMTA0MmZlYjgzNDAwMzQwMTg4MDBhYzQyMDAxNTIzMzgxMDIyMTIyMjM4MTAyMjEyMTAyMjM4MDczNDAwMTMxMDQyZmU4ZTQzOGEwMjAwOGJmZTMyMDQwYzQ0OGJmZTM4MTA4YmZmMTI0NDhiZmUzODA5MzIwMzEyNDQ4YmZlMzgxMDI1MTI0MTAwMDg4YmZlMzgxNTMyMDMxMjQ0ODk4YTAzMDA4YmZkOGJmZjg4ZmZjYjhiZmQzODAxOGJmZTEyNDQ4OThhMDMwMDhiZmQ4YmZlOGJmZjg4ZmZlMThiZmQzODIwMzIwMzEyNDQ4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZmRlMjIyMzgxMDY4OGZmZDcyMzM4MDA4YmZmMTI0NDIyMzgxOTIyMTI0NDIyODk4YTAxMDEyNDIzMjU4OGZmYmYyNDM4MTMyNDM4MDcxMjQ0MjQzODEyMjMxMjQ0OGJmZjg4ZmZjMTg5OGEwMjAxMjMzMjAwMzIwNDBiMjI4OGZmOWUyMjIzMjI4OGZmODUyMzM4MDA4YmZlMTI0NDIzMzgwODgxYTA4ZDA2MGY0NDIyMzgwMDIyMzgwNzEyNDQyMjM4MDgyMzEyNDQyMjM4MjA4YmZmMTIyMjM4MjAzMjAzMTIxMTIyMTI0NDIyODk4YTAxMDEyMzMyMDAyNDBiMjI4OGZmNWMyMjMyMDAyNDBiMjU4OGZmNTMyMjM4MTMzMjAzMTI0NDIzMzgwMDhiZmYxMjQ0MjMzODA3MjIzODAwMTI0NDIzMzgwODgxZDBlODBjMGY0NDIyMzgwMDIyMzgxNDEyNDQyMjM4MTIyMzEyNDQyMjg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmMTcyMjM4MTAyNTEyNDAwMDA5MjIyMzIyODhmZjA5NDIwMDA2MjIyMzI1ODhmZjAwMjMzODAwOGJmZjEyNDQyMjM4MDc4YmZmMTIyMjM4MTQ4YmZmMTIxMTIyMTI0NDIyODkKbG9hZCAzMApwdXNoaW50IDEyIC8vIDEyCnN1YnN0cmluZzMKY29uY2F0CmxvYWQgMzIKY29uY2F0CnN0b3JlIDMzCmxvYWQgMzEKbG9hZCAzMgpsZW4KKwppbnRjXzEgLy8gMQotCnN0b3JlIDMxCnB1c2hpbnQgMTIgLy8gMTIKaW50Y18xIC8vIDEKKwpzdG9yZSAzMApsb2FkIDMzCmJ5dGVjXzMgLy8gMHgwODIwMDQwMTAwMDIwNDgwMDAzNTAwODAwMDM1MDEzMjA0MjQxMjQwMDE1ZTIzNDAwMTUwMzIwNDI0MTI0MDAxMzQyMzQwMDEyODMyMDQyMjEyNDAwMTEyMjM0MDAwZmEzMjA0MjQxMjQwMDBkZTMyMDQ4MTAzMTI0MDAwYmIyMzQwMDA5NDMyMDQyNDEyNDAwMDc5MjM0MDAwNmQzMjA0ODExMTBlNDAwMDA5MjM0MDAwMDEwMDIyNDIwMTJhMjMzNTAyMjMzNTAzMjMzNTAyMzQwMjMyMDQwYzQwMDAwODM0MDMzMjA0MTI0MmZmZGYzNDAyMzgxMDgxMDYxMjQ0MzQwMjM4MTkyMzEyNDQzNDAyMzgwOTMyMDMxMjQ0MzQwMjM4MjAzMjAzMTI0NDM0MDIzODAxMjMxMjM0MDIzODAxMzIwMDgxMDMzMjA0MGIwYjBlMTE0NDM0MDMyMjA4MzUwMzM0MDIyMjA4MzUwMjQyZmZhZDM0MDA4ODAxZTQ0MjAwYzYyMzM4MTAyMjEyMjIzODEwMjUxMjIyMzgxMDIyMTIxMTEwNDJmZjc0MzIwNDI0MTI0MDAwMTQzMjA0ODEwMzEyNDAwMDA0MjM0MjAwOWYzNDAxODgwMTExNDIwMDk3MzQwMTg4MDBlNjQyMDA4ZjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDI0MzgxMDI1MTIxMDQyZmYyYjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDQyZmYxNjIzODEwNjg4MDA1YTIzMzgwMTMyMDAzMjA0MGIwZTQ0MjI0MjAwNGIyMzM4MTA4MTA2MTIyMzM4MTkyNDEyMTA0MmZlZTAzNDAxODgwMTBlNDIwMDM0MjMzODEwMjIxMjIyMzgxMDI1MTIxMDIyMzgxNDM0MDAxMzEwNDJmZWI4MzQwMDM0MDE4ODAwYWM0MjAwMTUyMzM4MTAyMjEyMjIzODEwMjIxMjEwMjIzODA3MzQwMDEzMTA0MmZlOGU0MzhhMDIwMDhiZmUzMjA0MGM0NDhiZmUzODEwOGJmZjEyNDQ4YmZlMzgwOTMyMDMxMjQ0OGJmZTM4MTAyNTEyNDEwMDA4OGJmZTM4MTUzMjAzMTI0NDg5OGEwMzAwOGJmZDhiZmY4OGZmY2I4YmZkMzgwMThiZmUxMjQ0ODk4YTAzMDA4YmZkOGJmZThiZmY4OGZmZTE4YmZkMzgyMDMyMDMxMjQ0ODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmZkZTIyMjM4MTA2ODhmZmQ3MjMzODAwOGJmZjEyNDQyMjM4MTkyMjEyNDQyMjg5OGEwMTAxMjQyMzI1ODhmZmJmMjQzODEzMjQzODA3MTI0NDI0MzgxMjIzMTI0NDhiZmY4OGZmYzE4OThhMDIwMTIzMzIwMDMyMDQwYjIyODhmZjllMjIyMzIyODhmZjg1MjMzODAwOGJmZTEyNDQyMzM4MDg4MWEwOGQwNjBmNDQyMjM4MDAyMjM4MDcxMjQ0MjIzODA4MjMxMjQ0MjIzODIwOGJmZjEyMjIzODIwMzIwMzEyMTEyMjEyNDQyMjg5OGEwMTAxMjMzMjAwMjQwYjIyODhmZjVjMjIzMjAwMjQwYjI1ODhmZjUzMjIzODEzMzIwMzEyNDQyMzM4MDA4YmZmMTI0NDIzMzgwNzIyMzgwMDEyNDQyMzM4MDg4MWQwZTgwYzBmNDQyMjM4MDAyMjM4MTQxMjQ0MjIzODEyMjMxMjQ0MjI4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZjE3MjIzODEwMjUxMjQwMDAwOTIyMjMyMjg4ZmYwOTQyMDAwNjIyMjMyNTg4ZmYwMDIzMzgwMDhiZmYxMjQ0MjIzODA3OGJmZjEyMjIzODE0OGJmZjEyMTEyMjEyNDQyMjg5CmxvYWQgMzAKZGlnIDEKbGVuCnN1YnN0cmluZzMKY29uY2F0CnN0b3JlIDMzCmxvYWQgMzMKY29uY2F0CnNoYTUxMl8yNTYKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAzCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApmcmFtZV9kaWcgMgo9PQomJgpmcmFtZV9kaWcgLTEKZ3R4bnMgUmVjZWl2ZXIKZnJhbWVfZGlnIDMKPT0KJiYKZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCnB1c2hpbnQgNCAvLyBheGZlcgo9PQpmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKZnJhbWVfZGlnIDIKPT0KJiYKZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIDMKPT0KJiYKfHwKLy8gU3Vic2NyaXB0aW9uIHBheW1lbnQgbXVzdCBiZSBzZW5kIHRvIGxvY2tlciB3aXRoIHJpZ2h0IHBheQphc3NlcnQKYnl0ZWMgOCAvLyAibWF4X3N1YnMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj4KYm56IHN1YnNjcmliZV8xOF9sNgpzdWJzY3JpYmVfMThfbDE6CmZyYW1lX2RpZyAtNApib3hfbGVuCnN0b3JlIDM1CnN0b3JlIDM0CmxvYWQgMzUKYm56IHN1YnNjcmliZV8xOF9sMwpieXRlY18yIC8vICJhY3RpdmVfc3VicyIKYnl0ZWNfMiAvLyAiYWN0aXZlX3N1YnMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCisKYXBwX2dsb2JhbF9wdXQKYiBzdWJzY3JpYmVfMThfbDcKc3Vic2NyaWJlXzE4X2wzOgpmcmFtZV9kaWcgLTQKYm94X2dldApzdG9yZSAzNwpzdG9yZSAzNgpsb2FkIDM3CmFzc2VydApsb2FkIDM2CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgNApwdXNoaW50IDI0IC8vIDI0CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQppbnRjXzAgLy8gMAohPQpibnogc3Vic2NyaWJlXzE4X2w1CmludGNfMCAvLyAwCnJldHVybgpzdWJzY3JpYmVfMThfbDU6CmZyYW1lX2RpZyA1Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKPAovLyBTdWJzY3JpcHRpb24gc3RpbGwgYWN0aXZlCmFzc2VydApiIHN1YnNjcmliZV8xOF9sNwpzdWJzY3JpYmVfMThfbDY6CmJ5dGVjXzIgLy8gImFjdGl2ZV9zdWJzIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmJ5dGVjIDggLy8gIm1heF9zdWJzIgphcHBfZ2xvYmFsX2dldAo8PQovLyBNYXggaXRlbXMgcmVhY2hlZAphc3NlcnQKYiBzdWJzY3JpYmVfMThfbDEKc3Vic2NyaWJlXzE4X2w3OgpieXRlYyA5IC8vICJ0b3RhbF9zdWJzIgpieXRlYyA5IC8vICJ0b3RhbF9zdWJzIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmFwcF9nbG9iYWxfcHV0CnB1c2hieXRlcyAweDIzIC8vICIjIgpieXRlYyA5IC8vICJ0b3RhbF9zdWJzIgphcHBfZ2xvYmFsX2dldApjYWxsc3ViIGl0b2FfMQpjb25jYXQKcHVzaGJ5dGVzIDB4MjAyZDIwIC8vICIgLSAiCmNvbmNhdApieXRlYyAxMCAvLyAibmFtZSIKYXBwX2dsb2JhbF9nZXQKY29uY2F0CnB1c2hieXRlcyAweDUzNTQ1MCAvLyAiU1RQIgpwdXNoYnl0ZXMgMHg2OTcwNjY3MzNhMmYyZjYyNjE2Njc5NjI2NTY5NjM2NDY0N2EzNzZiNjI3NTc4NjE2YTZhMzY2MjZmNjIzNTYyNmE3MTc0Nzc2NTcxMzY3NzYzNjg2YjY0NmI2OTcxMzQ3Njc2Njg3NzcyNzc3MjZlNjUzNzY5N2EzNDY2MzIzNTc4NjkgLy8gImlwZnM6Ly9iYWZ5YmVpY2RkejdrYnV4YWpqNmJvYjVianF0d2VxNndjaGtka2lxNHZ2aHdyd3JuZTdpejRmMjV4aSIKY2FsbHN1YiBpbm5lcmNyZWF0ZW5mdF8zCnN0b3JlIDI5CmxvYWQgMjkKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmJ5dGVjIDUgLy8gInN1Yl90eXBlIgphcHBfZ2xvYmFsX2dldApmcmFtZV9idXJ5IDYKbG9hZCAyOQpmcmFtZV9idXJ5IDcKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDYKaXRvYgpmcmFtZV9kaWcgNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgOAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgLTMKaXRvYgpjb25jYXQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyAtNApib3hfZGVsCnBvcApmcmFtZV9kaWcgLTQKZnJhbWVfZGlnIDkKYm94X3B1dApsb2FkIDI5CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGdldF9zdWJzY3JpcHRpb24KZ2V0c3Vic2NyaXB0aW9uXzE5Ogpwcm90byAxIDEKYnl0ZWNfMCAvLyAiIgpmcmFtZV9kaWcgLTEKYm94X2dldApzdG9yZSA0NwpzdG9yZSA0Ngpsb2FkIDQ3CmFzc2VydApsb2FkIDQ2CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGlzX3N1YnNjcmliZXIKaXNzdWJzY3JpYmVyXzIwOgpwcm90byAxIDEKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTEKYm94X2xlbgpzdG9yZSA0OQpzdG9yZSA0OApsb2FkIDQ5CmJueiBpc3N1YnNjcmliZXJfMjBfbDIKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAwCmIgaXNzdWJzY3JpYmVyXzIwX2wzCmlzc3Vic2NyaWJlcl8yMF9sMjoKZnJhbWVfZGlnIC0xCmJveF9nZXQKc3RvcmUgNTEKc3RvcmUgNTAKbG9hZCA1MQphc3NlcnQKbG9hZCA1MApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKcHVzaGludCAyNCAvLyAyNApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAo+CmZyYW1lX2J1cnkgMAppc3N1YnNjcmliZXJfMjBfbDM6CnJldHN1YgoKLy8gY2xhaW1fc3Vic2NyaXB0aW9uCmNsYWltc3Vic2NyaXB0aW9uXzIxOgpwcm90byAxIDAKdHhuIFNlbmRlcgpmcmFtZV9kaWcgLTEKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDUzCnN0b3JlIDUyCmxvYWQgNTMKLy8gU3Vic2NyaWJlciBub3Qgb3B0ZWQtaW4gZm9yIFN1YnNjcmlwdGlvbiBORlQKYXNzZXJ0CmZyYW1lX2RpZyAtMQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwp0eG4gU2VuZGVyCmNhbGxzdWIgaW5uZXJ0cmFuc2Zlcm5mdF80CnJldHN1YgoKLy8gdHJhbnNmZXJfc3Vic2NyaXB0aW9uCnRyYW5zZmVyc3Vic2NyaXB0aW9uXzIyOgpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgp0eG4gU2VuZGVyCmJveF9sZW4Kc3RvcmUgNTUKc3RvcmUgNTQKbG9hZCA1NQovLyBDdXJyZW50IGFkZHJlc3Mgbm90IHN1YnNjcmliZWQKYXNzZXJ0CnR4biBTZW5kZXIKZnJhbWVfZGlnIC0xCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA1NwpzdG9yZSA1Ngpsb2FkIDU3CmxvYWQgNTYKaW50Y18wIC8vIDAKPgomJgpieiB0cmFuc2ZlcnN1YnNjcmlwdGlvbl8yMl9sMgpmcmFtZV9kaWcgLTEKdHhuIFNlbmRlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpjYWxsc3ViIGlubmVydHJhbnNmZXJuZnRfNAp0cmFuc2ZlcnN1YnNjcmlwdGlvbl8yMl9sMjoKdHhuIFNlbmRlcgpib3hfZ2V0CnN0b3JlIDU5CnN0b3JlIDU4CmxvYWQgNTkKYXNzZXJ0CmxvYWQgNTgKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAtMgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIDAKYm94X3B1dAp0eG4gU2VuZGVyCmJveF9kZWwKcG9wCnJldHN1YgoKLy8gdW5zdWJzY3JpYmUKdW5zdWJzY3JpYmVfMjM6CnByb3RvIDEgMQppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4biBTZW5kZXIKYm94X2xlbgpzdG9yZSA2MQpzdG9yZSA2MApsb2FkIDYxCi8vIE5vdCBzdWJzY3JpYmVkCmFzc2VydAp0eG4gU2VuZGVyCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpsZW4KcHVzaGludCAzMiAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiBpbm5lcmRlbGV0ZXN1YnNjcmlwdGlvbl82CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gbWFya19mb3JfZGVsZXRpb24KbWFya2ZvcmRlbGV0aW9uXzI0Ogpwcm90byAxIDAKYnl0ZWNfMCAvLyAiIgp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKdHhuIFNlbmRlcgpieXRlY18xIC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldAo9PQovLyBPbmx5IG1hbmFnZXIgY2FuIG1hcmsgZm9yIGRlbGV0aW9uCmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgU2VuZGVyCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIE9ubHkgbWFuYWdlciBjYW4gbWFyayBmb3IgZGVsZXRpb24KYXNzZXJ0CmJ5dGVjIDExIC8vICJQcm9ncmFtIgppbnRjXzAgLy8gMApzdG9yZSA2NAppbnRjXzAgLy8gMApzdG9yZSA2NQpieXRlY18wIC8vICIiCnN0b3JlIDY2CmJ5dGVjXzAgLy8gIiIKc3RvcmUgNjcKYnl0ZWNfMSAvLyAibWFuYWdlciIKYXBwX2dsb2JhbF9nZXQKbGVuCmJ5dGVjXzAgLy8gIiIKY2FsbHN1YiBlbmNvZGV1dmFyaW50aW1wbF8yCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0CmNvbmNhdApzdG9yZSA2Ngpsb2FkIDY3CmJ5dGVjXzMgLy8gMHgwODIwMDQwMTAwMDIwNDgwMDAzNTAwODAwMDM1MDEzMjA0MjQxMjQwMDE1ZTIzNDAwMTUwMzIwNDI0MTI0MDAxMzQyMzQwMDEyODMyMDQyMjEyNDAwMTEyMjM0MDAwZmEzMjA0MjQxMjQwMDBkZTMyMDQ4MTAzMTI0MDAwYmIyMzQwMDA5NDMyMDQyNDEyNDAwMDc5MjM0MDAwNmQzMjA0ODExMTBlNDAwMDA5MjM0MDAwMDEwMDIyNDIwMTJhMjMzNTAyMjMzNTAzMjMzNTAyMzQwMjMyMDQwYzQwMDAwODM0MDMzMjA0MTI0MmZmZGYzNDAyMzgxMDgxMDYxMjQ0MzQwMjM4MTkyMzEyNDQzNDAyMzgwOTMyMDMxMjQ0MzQwMjM4MjAzMjAzMTI0NDM0MDIzODAxMjMxMjM0MDIzODAxMzIwMDgxMDMzMjA0MGIwYjBlMTE0NDM0MDMyMjA4MzUwMzM0MDIyMjA4MzUwMjQyZmZhZDM0MDA4ODAxZTQ0MjAwYzYyMzM4MTAyMjEyMjIzODEwMjUxMjIyMzgxMDIyMTIxMTEwNDJmZjc0MzIwNDI0MTI0MDAwMTQzMjA0ODEwMzEyNDAwMDA0MjM0MjAwOWYzNDAxODgwMTExNDIwMDk3MzQwMTg4MDBlNjQyMDA4ZjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDI0MzgxMDI1MTIxMDQyZmYyYjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDQyZmYxNjIzODEwNjg4MDA1YTIzMzgwMTMyMDAzMjA0MGIwZTQ0MjI0MjAwNGIyMzM4MTA4MTA2MTIyMzM4MTkyNDEyMTA0MmZlZTAzNDAxODgwMTBlNDIwMDM0MjMzODEwMjIxMjIyMzgxMDI1MTIxMDIyMzgxNDM0MDAxMzEwNDJmZWI4MzQwMDM0MDE4ODAwYWM0MjAwMTUyMzM4MTAyMjEyMjIzODEwMjIxMjEwMjIzODA3MzQwMDEzMTA0MmZlOGU0MzhhMDIwMDhiZmUzMjA0MGM0NDhiZmUzODEwOGJmZjEyNDQ4YmZlMzgwOTMyMDMxMjQ0OGJmZTM4MTAyNTEyNDEwMDA4OGJmZTM4MTUzMjAzMTI0NDg5OGEwMzAwOGJmZDhiZmY4OGZmY2I4YmZkMzgwMThiZmUxMjQ0ODk4YTAzMDA4YmZkOGJmZThiZmY4OGZmZTE4YmZkMzgyMDMyMDMxMjQ0ODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmZkZTIyMjM4MTA2ODhmZmQ3MjMzODAwOGJmZjEyNDQyMjM4MTkyMjEyNDQyMjg5OGEwMTAxMjQyMzI1ODhmZmJmMjQzODEzMjQzODA3MTI0NDI0MzgxMjIzMTI0NDhiZmY4OGZmYzE4OThhMDIwMTIzMzIwMDMyMDQwYjIyODhmZjllMjIyMzIyODhmZjg1MjMzODAwOGJmZTEyNDQyMzM4MDg4MWEwOGQwNjBmNDQyMjM4MDAyMjM4MDcxMjQ0MjIzODA4MjMxMjQ0MjIzODIwOGJmZjEyMjIzODIwMzIwMzEyMTEyMjEyNDQyMjg5OGEwMTAxMjMzMjAwMjQwYjIyODhmZjVjMjIzMjAwMjQwYjI1ODhmZjUzMjIzODEzMzIwMzEyNDQyMzM4MDA4YmZmMTI0NDIzMzgwNzIyMzgwMDEyNDQyMzM4MDg4MWQwZTgwYzBmNDQyMjM4MDAyMjM4MTQxMjQ0MjIzODEyMjMxMjQ0MjI4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZjE3MjIzODEwMjUxMjQwMDAwOTIyMjMyMjg4ZmYwOTQyMDAwNjIyMjMyNTg4ZmYwMDIzMzgwMDhiZmYxMjQ0MjIzODA3OGJmZjEyMjIzODE0OGJmZjEyMTEyMjEyNDQyMjg5CmxvYWQgNjQKaW50Y18yIC8vIDgKc3Vic3RyaW5nMwpjb25jYXQKbG9hZCA2Ngpjb25jYXQKc3RvcmUgNjcKbG9hZCA2NQpsb2FkIDY2CmxlbgorCmludGNfMSAvLyAxCi0Kc3RvcmUgNjUKaW50Y18yIC8vIDgKaW50Y18xIC8vIDEKKwpzdG9yZSA2NApnbG9iYWwgQ3JlYXRvckFkZHJlc3MKbGVuCmJ5dGVjXzAgLy8gIiIKY2FsbHN1YiBlbmNvZGV1dmFyaW50aW1wbF8yCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwpjb25jYXQKc3RvcmUgNjYKbG9hZCA2NwpieXRlY18zIC8vIDB4MDgyMDA0MDEwMDAyMDQ4MDAwMzUwMDgwMDAzNTAxMzIwNDI0MTI0MDAxNWUyMzQwMDE1MDMyMDQyNDEyNDAwMTM0MjM0MDAxMjgzMjA0MjIxMjQwMDExMjIzNDAwMGZhMzIwNDI0MTI0MDAwZGUzMjA0ODEwMzEyNDAwMGJiMjM0MDAwOTQzMjA0MjQxMjQwMDA3OTIzNDAwMDZkMzIwNDgxMTEwZTQwMDAwOTIzNDAwMDAxMDAyMjQyMDEyYTIzMzUwMjIzMzUwMzIzMzUwMjM0MDIzMjA0MGM0MDAwMDgzNDAzMzIwNDEyNDJmZmRmMzQwMjM4MTA4MTA2MTI0NDM0MDIzODE5MjMxMjQ0MzQwMjM4MDkzMjAzMTI0NDM0MDIzODIwMzIwMzEyNDQzNDAyMzgwMTIzMTIzNDAyMzgwMTMyMDA4MTAzMzIwNDBiMGIwZTExNDQzNDAzMjIwODM1MDMzNDAyMjIwODM1MDI0MmZmYWQzNDAwODgwMWU0NDIwMGM2MjMzODEwMjIxMjIyMzgxMDI1MTIyMjM4MTAyMjEyMTExMDQyZmY3NDMyMDQyNDEyNDAwMDE0MzIwNDgxMDMxMjQwMDAwNDIzNDIwMDlmMzQwMTg4MDExMTQyMDA5NzM0MDE4ODAwZTY0MjAwOGYyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTAyNDM4MTAyNTEyMTA0MmZmMmIyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTA0MmZmMTYyMzgxMDY4ODAwNWEyMzM4MDEzMjAwMzIwNDBiMGU0NDIyNDIwMDRiMjMzODEwODEwNjEyMjMzODE5MjQxMjEwNDJmZWUwMzQwMTg4MDEwZTQyMDAzNDIzMzgxMDIyMTIyMjM4MTAyNTEyMTAyMjM4MTQzNDAwMTMxMDQyZmViODM0MDAzNDAxODgwMGFjNDIwMDE1MjMzODEwMjIxMjIyMzgxMDIyMTIxMDIyMzgwNzM0MDAxMzEwNDJmZThlNDM4YTAyMDA4YmZlMzIwNDBjNDQ4YmZlMzgxMDhiZmYxMjQ0OGJmZTM4MDkzMjAzMTI0NDhiZmUzODEwMjUxMjQxMDAwODhiZmUzODE1MzIwMzEyNDQ4OThhMDMwMDhiZmQ4YmZmODhmZmNiOGJmZDM4MDE4YmZlMTI0NDg5OGEwMzAwOGJmZDhiZmU4YmZmODhmZmUxOGJmZDM4MjAzMjAzMTI0NDg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmZGUyMjIzODEwNjg4ZmZkNzIzMzgwMDhiZmYxMjQ0MjIzODE5MjIxMjQ0MjI4OThhMDEwMTI0MjMyNTg4ZmZiZjI0MzgxMzI0MzgwNzEyNDQyNDM4MTIyMzEyNDQ4YmZmODhmZmMxODk4YTAyMDEyMzMyMDAzMjA0MGIyMjg4ZmY5ZTIyMjMyMjg4ZmY4NTIzMzgwMDhiZmUxMjQ0MjMzODA4ODFhMDhkMDYwZjQ0MjIzODAwMjIzODA3MTI0NDIyMzgwODIzMTI0NDIyMzgyMDhiZmYxMjIyMzgyMDMyMDMxMjExMjIxMjQ0MjI4OThhMDEwMTIzMzIwMDI0MGIyMjg4ZmY1YzIyMzIwMDI0MGIyNTg4ZmY1MzIyMzgxMzMyMDMxMjQ0MjMzODAwOGJmZjEyNDQyMzM4MDcyMjM4MDAxMjQ0MjMzODA4ODFkMGU4MGMwZjQ0MjIzODAwMjIzODE0MTI0NDIyMzgxMjIzMTI0NDIyODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmYxNzIyMzgxMDI1MTI0MDAwMDkyMjIzMjI4OGZmMDk0MjAwMDYyMjIzMjU4OGZmMDAyMzM4MDA4YmZmMTI0NDIyMzgwNzhiZmYxMjIyMzgxNDhiZmYxMjExMjIxMjQ0MjI4OQpsb2FkIDY0CnB1c2hpbnQgMTIgLy8gMTIKc3Vic3RyaW5nMwpjb25jYXQKbG9hZCA2Ngpjb25jYXQKc3RvcmUgNjcKbG9hZCA2NQpsb2FkIDY2CmxlbgorCmludGNfMSAvLyAxCi0Kc3RvcmUgNjUKcHVzaGludCAxMiAvLyAxMgppbnRjXzEgLy8gMQorCnN0b3JlIDY0CmxvYWQgNjcKYnl0ZWNfMyAvLyAweDA4MjAwNDAxMDAwMjA0ODAwMDM1MDA4MDAwMzUwMTMyMDQyNDEyNDAwMTVlMjM0MDAxNTAzMjA0MjQxMjQwMDEzNDIzNDAwMTI4MzIwNDIyMTI0MDAxMTIyMzQwMDBmYTMyMDQyNDEyNDAwMGRlMzIwNDgxMDMxMjQwMDBiYjIzNDAwMDk0MzIwNDI0MTI0MDAwNzkyMzQwMDA2ZDMyMDQ4MTExMGU0MDAwMDkyMzQwMDAwMTAwMjI0MjAxMmEyMzM1MDIyMzM1MDMyMzM1MDIzNDAyMzIwNDBjNDAwMDA4MzQwMzMyMDQxMjQyZmZkZjM0MDIzODEwODEwNjEyNDQzNDAyMzgxOTIzMTI0NDM0MDIzODA5MzIwMzEyNDQzNDAyMzgyMDMyMDMxMjQ0MzQwMjM4MDEyMzEyMzQwMjM4MDEzMjAwODEwMzMyMDQwYjBiMGUxMTQ0MzQwMzIyMDgzNTAzMzQwMjIyMDgzNTAyNDJmZmFkMzQwMDg4MDFlNDQyMDBjNjIzMzgxMDIyMTIyMjM4MTAyNTEyMjIzODEwMjIxMjExMTA0MmZmNzQzMjA0MjQxMjQwMDAxNDMyMDQ4MTAzMTI0MDAwMDQyMzQyMDA5ZjM0MDE4ODAxMTE0MjAwOTczNDAxODgwMGU2NDIwMDhmMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwMjQzODEwMjUxMjEwNDJmZjJiMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwNDJmZjE2MjM4MTA2ODgwMDVhMjMzODAxMzIwMDMyMDQwYjBlNDQyMjQyMDA0YjIzMzgxMDgxMDYxMjIzMzgxOTI0MTIxMDQyZmVlMDM0MDE4ODAxMGU0MjAwMzQyMzM4MTAyMjEyMjIzODEwMjUxMjEwMjIzODE0MzQwMDEzMTA0MmZlYjgzNDAwMzQwMTg4MDBhYzQyMDAxNTIzMzgxMDIyMTIyMjM4MTAyMjEyMTAyMjM4MDczNDAwMTMxMDQyZmU4ZTQzOGEwMjAwOGJmZTMyMDQwYzQ0OGJmZTM4MTA4YmZmMTI0NDhiZmUzODA5MzIwMzEyNDQ4YmZlMzgxMDI1MTI0MTAwMDg4YmZlMzgxNTMyMDMxMjQ0ODk4YTAzMDA4YmZkOGJmZjg4ZmZjYjhiZmQzODAxOGJmZTEyNDQ4OThhMDMwMDhiZmQ4YmZlOGJmZjg4ZmZlMThiZmQzODIwMzIwMzEyNDQ4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZmRlMjIyMzgxMDY4OGZmZDcyMzM4MDA4YmZmMTI0NDIyMzgxOTIyMTI0NDIyODk4YTAxMDEyNDIzMjU4OGZmYmYyNDM4MTMyNDM4MDcxMjQ0MjQzODEyMjMxMjQ0OGJmZjg4ZmZjMTg5OGEwMjAxMjMzMjAwMzIwNDBiMjI4OGZmOWUyMjIzMjI4OGZmODUyMzM4MDA4YmZlMTI0NDIzMzgwODgxYTA4ZDA2MGY0NDIyMzgwMDIyMzgwNzEyNDQyMjM4MDgyMzEyNDQyMjM4MjA4YmZmMTIyMjM4MjAzMjAzMTIxMTIyMTI0NDIyODk4YTAxMDEyMzMyMDAyNDBiMjI4OGZmNWMyMjMyMDAyNDBiMjU4OGZmNTMyMjM4MTMzMjAzMTI0NDIzMzgwMDhiZmYxMjQ0MjMzODA3MjIzODAwMTI0NDIzMzgwODgxZDBlODBjMGY0NDIyMzgwMDIyMzgxNDEyNDQyMjM4MTIyMzEyNDQyMjg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmMTcyMjM4MTAyNTEyNDAwMDA5MjIyMzIyODhmZjA5NDIwMDA2MjIyMzI1ODhmZjAwMjMzODAwOGJmZjEyNDQyMjM4MDc4YmZmMTIyMjM4MTQ4YmZmMTIxMTIyMTI0NDIyODkKbG9hZCA2NApkaWcgMQpsZW4Kc3Vic3RyaW5nMwpjb25jYXQKc3RvcmUgNjcKbG9hZCA2Nwpjb25jYXQKc2hhNTEyXzI1NgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCnB1c2hpbnQgMzIgLy8gMzIKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWNlaXZlcgpmcmFtZV9kaWcgMAo9PQovLyBJbnZhbGlkIGxvY2tlciBhZGRyZXNzCmFzc2VydApieXRlY18yIC8vICJhY3RpdmVfc3VicyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPgpibnogbWFya2ZvcmRlbGV0aW9uXzI0X2wyCmZyYW1lX2RpZyAtMQpndHhucyBBbW91bnQKaW50Y18wIC8vIDAKPT0KLy8gTm8gc3Vic2NyaXB0aW9ucyB0byBkZWxldGUsIHNvIGZlZSBtdXN0IGJlIDAKYXNzZXJ0CmIgbWFya2ZvcmRlbGV0aW9uXzI0X2wzCm1hcmtmb3JkZWxldGlvbl8yNF9sMjoKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApnbG9iYWwgTWluVHhuRmVlCmludGNfMyAvLyAzCioKYnl0ZWNfMiAvLyAiYWN0aXZlX3N1YnMiCmFwcF9nbG9iYWxfZ2V0CioKPj0KLy8gTm90IGVub3VnaCBmdW5kcyB0byBkZWxldGUgYWxsIHN1YnNjcmlwdGlvbnMKYXNzZXJ0Cm1hcmtmb3JkZWxldGlvbl8yNF9sMzoKYnl0ZWMgNyAvLyAibGlmZWN5Y2xlIgppbnRjXzEgLy8gMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGRlbGV0ZV9zdWJzY3JpcHRpb24KZGVsZXRlc3Vic2NyaXB0aW9uXzI1Ogpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgpieXRlYyA3IC8vICJsaWZlY3ljbGUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCj09Ci8vIFN1YnNjcmlwdGlvbiBzZXJ2aWNlIG5vdCBtYXJrZWQgZm9yIGRlbGV0aW9uCmFzc2VydApieXRlYyAxMSAvLyAiUHJvZ3JhbSIKaW50Y18wIC8vIDAKc3RvcmUgNjgKaW50Y18wIC8vIDAKc3RvcmUgNjkKYnl0ZWNfMCAvLyAiIgpzdG9yZSA3MApieXRlY18wIC8vICIiCnN0b3JlIDcxCmJ5dGVjXzEgLy8gIm1hbmFnZXIiCmFwcF9nbG9iYWxfZ2V0CmxlbgpieXRlY18wIC8vICIiCmNhbGxzdWIgZW5jb2RldXZhcmludGltcGxfMgpieXRlY18xIC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldApjb25jYXQKc3RvcmUgNzAKbG9hZCA3MQpieXRlY18zIC8vIDB4MDgyMDA0MDEwMDAyMDQ4MDAwMzUwMDgwMDAzNTAxMzIwNDI0MTI0MDAxNWUyMzQwMDE1MDMyMDQyNDEyNDAwMTM0MjM0MDAxMjgzMjA0MjIxMjQwMDExMjIzNDAwMGZhMzIwNDI0MTI0MDAwZGUzMjA0ODEwMzEyNDAwMGJiMjM0MDAwOTQzMjA0MjQxMjQwMDA3OTIzNDAwMDZkMzIwNDgxMTEwZTQwMDAwOTIzNDAwMDAxMDAyMjQyMDEyYTIzMzUwMjIzMzUwMzIzMzUwMjM0MDIzMjA0MGM0MDAwMDgzNDAzMzIwNDEyNDJmZmRmMzQwMjM4MTA4MTA2MTI0NDM0MDIzODE5MjMxMjQ0MzQwMjM4MDkzMjAzMTI0NDM0MDIzODIwMzIwMzEyNDQzNDAyMzgwMTIzMTIzNDAyMzgwMTMyMDA4MTAzMzIwNDBiMGIwZTExNDQzNDAzMjIwODM1MDMzNDAyMjIwODM1MDI0MmZmYWQzNDAwODgwMWU0NDIwMGM2MjMzODEwMjIxMjIyMzgxMDI1MTIyMjM4MTAyMjEyMTExMDQyZmY3NDMyMDQyNDEyNDAwMDE0MzIwNDgxMDMxMjQwMDAwNDIzNDIwMDlmMzQwMTg4MDExMTQyMDA5NzM0MDE4ODAwZTY0MjAwOGYyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTAyNDM4MTAyNTEyMTA0MmZmMmIyMzM4MTAyMjEyMjIzODEwODEwNjEyMTAyMjM4MTkyMjEyMTA0MmZmMTYyMzgxMDY4ODAwNWEyMzM4MDEzMjAwMzIwNDBiMGU0NDIyNDIwMDRiMjMzODEwODEwNjEyMjMzODE5MjQxMjEwNDJmZWUwMzQwMTg4MDEwZTQyMDAzNDIzMzgxMDIyMTIyMjM4MTAyNTEyMTAyMjM4MTQzNDAwMTMxMDQyZmViODM0MDAzNDAxODgwMGFjNDIwMDE1MjMzODEwMjIxMjIyMzgxMDIyMTIxMDIyMzgwNzM0MDAxMzEwNDJmZThlNDM4YTAyMDA4YmZlMzIwNDBjNDQ4YmZlMzgxMDhiZmYxMjQ0OGJmZTM4MDkzMjAzMTI0NDhiZmUzODEwMjUxMjQxMDAwODhiZmUzODE1MzIwMzEyNDQ4OThhMDMwMDhiZmQ4YmZmODhmZmNiOGJmZDM4MDE4YmZlMTI0NDg5OGEwMzAwOGJmZDhiZmU4YmZmODhmZmUxOGJmZDM4MjAzMjAzMTI0NDg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmZGUyMjIzODEwNjg4ZmZkNzIzMzgwMDhiZmYxMjQ0MjIzODE5MjIxMjQ0MjI4OThhMDEwMTI0MjMyNTg4ZmZiZjI0MzgxMzI0MzgwNzEyNDQyNDM4MTIyMzEyNDQ4YmZmODhmZmMxODk4YTAyMDEyMzMyMDAzMjA0MGIyMjg4ZmY5ZTIyMjMyMjg4ZmY4NTIzMzgwMDhiZmUxMjQ0MjMzODA4ODFhMDhkMDYwZjQ0MjIzODAwMjIzODA3MTI0NDIyMzgwODIzMTI0NDIyMzgyMDhiZmYxMjIyMzgyMDMyMDMxMjExMjIxMjQ0MjI4OThhMDEwMTIzMzIwMDI0MGIyMjg4ZmY1YzIyMzIwMDI0MGIyNTg4ZmY1MzIyMzgxMzMyMDMxMjQ0MjMzODAwOGJmZjEyNDQyMzM4MDcyMjM4MDAxMjQ0MjMzODA4ODFkMGU4MGMwZjQ0MjIzODAwMjIzODE0MTI0NDIyMzgxMjIzMTI0NDIyODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmYxNzIyMzgxMDI1MTI0MDAwMDkyMjIzMjI4OGZmMDk0MjAwMDYyMjIzMjU4OGZmMDAyMzM4MDA4YmZmMTI0NDIyMzgwNzhiZmYxMjIyMzgxNDhiZmYxMjExMjIxMjQ0MjI4OQpsb2FkIDY4CmludGNfMiAvLyA4CnN1YnN0cmluZzMKY29uY2F0CmxvYWQgNzAKY29uY2F0CnN0b3JlIDcxCmxvYWQgNjkKbG9hZCA3MApsZW4KKwppbnRjXzEgLy8gMQotCnN0b3JlIDY5CmludGNfMiAvLyA4CmludGNfMSAvLyAxCisKc3RvcmUgNjgKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCmxlbgpieXRlY18wIC8vICIiCmNhbGxzdWIgZW5jb2RldXZhcmludGltcGxfMgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKY29uY2F0CnN0b3JlIDcwCmxvYWQgNzEKYnl0ZWNfMyAvLyAweDA4MjAwNDAxMDAwMjA0ODAwMDM1MDA4MDAwMzUwMTMyMDQyNDEyNDAwMTVlMjM0MDAxNTAzMjA0MjQxMjQwMDEzNDIzNDAwMTI4MzIwNDIyMTI0MDAxMTIyMzQwMDBmYTMyMDQyNDEyNDAwMGRlMzIwNDgxMDMxMjQwMDBiYjIzNDAwMDk0MzIwNDI0MTI0MDAwNzkyMzQwMDA2ZDMyMDQ4MTExMGU0MDAwMDkyMzQwMDAwMTAwMjI0MjAxMmEyMzM1MDIyMzM1MDMyMzM1MDIzNDAyMzIwNDBjNDAwMDA4MzQwMzMyMDQxMjQyZmZkZjM0MDIzODEwODEwNjEyNDQzNDAyMzgxOTIzMTI0NDM0MDIzODA5MzIwMzEyNDQzNDAyMzgyMDMyMDMxMjQ0MzQwMjM4MDEyMzEyMzQwMjM4MDEzMjAwODEwMzMyMDQwYjBiMGUxMTQ0MzQwMzIyMDgzNTAzMzQwMjIyMDgzNTAyNDJmZmFkMzQwMDg4MDFlNDQyMDBjNjIzMzgxMDIyMTIyMjM4MTAyNTEyMjIzODEwMjIxMjExMTA0MmZmNzQzMjA0MjQxMjQwMDAxNDMyMDQ4MTAzMTI0MDAwMDQyMzQyMDA5ZjM0MDE4ODAxMTE0MjAwOTczNDAxODgwMGU2NDIwMDhmMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwMjQzODEwMjUxMjEwNDJmZjJiMjMzODEwMjIxMjIyMzgxMDgxMDYxMjEwMjIzODE5MjIxMjEwNDJmZjE2MjM4MTA2ODgwMDVhMjMzODAxMzIwMDMyMDQwYjBlNDQyMjQyMDA0YjIzMzgxMDgxMDYxMjIzMzgxOTI0MTIxMDQyZmVlMDM0MDE4ODAxMGU0MjAwMzQyMzM4MTAyMjEyMjIzODEwMjUxMjEwMjIzODE0MzQwMDEzMTA0MmZlYjgzNDAwMzQwMTg4MDBhYzQyMDAxNTIzMzgxMDIyMTIyMjM4MTAyMjEyMTAyMjM4MDczNDAwMTMxMDQyZmU4ZTQzOGEwMjAwOGJmZTMyMDQwYzQ0OGJmZTM4MTA4YmZmMTI0NDhiZmUzODA5MzIwMzEyNDQ4YmZlMzgxMDI1MTI0MTAwMDg4YmZlMzgxNTMyMDMxMjQ0ODk4YTAzMDA4YmZkOGJmZjg4ZmZjYjhiZmQzODAxOGJmZTEyNDQ4OThhMDMwMDhiZmQ4YmZlOGJmZjg4ZmZlMThiZmQzODIwMzIwMzEyNDQ4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZmRlMjIyMzgxMDY4OGZmZDcyMzM4MDA4YmZmMTI0NDIyMzgxOTIyMTI0NDIyODk4YTAxMDEyNDIzMjU4OGZmYmYyNDM4MTMyNDM4MDcxMjQ0MjQzODEyMjMxMjQ0OGJmZjg4ZmZjMTg5OGEwMjAxMjMzMjAwMzIwNDBiMjI4OGZmOWUyMjIzMjI4OGZmODUyMzM4MDA4YmZlMTI0NDIzMzgwODgxYTA4ZDA2MGY0NDIyMzgwMDIyMzgwNzEyNDQyMjM4MDgyMzEyNDQyMjM4MjA4YmZmMTIyMjM4MjAzMjAzMTIxMTIyMTI0NDIyODk4YTAxMDEyMzMyMDAyNDBiMjI4OGZmNWMyMjMyMDAyNDBiMjU4OGZmNTMyMjM4MTMzMjAzMTI0NDIzMzgwMDhiZmYxMjQ0MjMzODA3MjIzODAwMTI0NDIzMzgwODgxZDBlODBjMGY0NDIyMzgwMDIyMzgxNDEyNDQyMjM4MTIyMzEyNDQyMjg5OGEwMTAxMjMzMjAwMzIwNDBiMjI4OGZmMTcyMjM4MTAyNTEyNDAwMDA5MjIyMzIyODhmZjA5NDIwMDA2MjIyMzI1ODhmZjAwMjMzODAwOGJmZjEyNDQyMjM4MDc4YmZmMTIyMjM4MTQ4YmZmMTIxMTIyMTI0NDIyODkKbG9hZCA2OApwdXNoaW50IDEyIC8vIDEyCnN1YnN0cmluZzMKY29uY2F0CmxvYWQgNzAKY29uY2F0CnN0b3JlIDcxCmxvYWQgNjkKbG9hZCA3MApsZW4KKwppbnRjXzEgLy8gMQotCnN0b3JlIDY5CnB1c2hpbnQgMTIgLy8gMTIKaW50Y18xIC8vIDEKKwpzdG9yZSA2OApsb2FkIDcxCmJ5dGVjXzMgLy8gMHgwODIwMDQwMTAwMDIwNDgwMDAzNTAwODAwMDM1MDEzMjA0MjQxMjQwMDE1ZTIzNDAwMTUwMzIwNDI0MTI0MDAxMzQyMzQwMDEyODMyMDQyMjEyNDAwMTEyMjM0MDAwZmEzMjA0MjQxMjQwMDBkZTMyMDQ4MTAzMTI0MDAwYmIyMzQwMDA5NDMyMDQyNDEyNDAwMDc5MjM0MDAwNmQzMjA0ODExMTBlNDAwMDA5MjM0MDAwMDEwMDIyNDIwMTJhMjMzNTAyMjMzNTAzMjMzNTAyMzQwMjMyMDQwYzQwMDAwODM0MDMzMjA0MTI0MmZmZGYzNDAyMzgxMDgxMDYxMjQ0MzQwMjM4MTkyMzEyNDQzNDAyMzgwOTMyMDMxMjQ0MzQwMjM4MjAzMjAzMTI0NDM0MDIzODAxMjMxMjM0MDIzODAxMzIwMDgxMDMzMjA0MGIwYjBlMTE0NDM0MDMyMjA4MzUwMzM0MDIyMjA4MzUwMjQyZmZhZDM0MDA4ODAxZTQ0MjAwYzYyMzM4MTAyMjEyMjIzODEwMjUxMjIyMzgxMDIyMTIxMTEwNDJmZjc0MzIwNDI0MTI0MDAwMTQzMjA0ODEwMzEyNDAwMDA0MjM0MjAwOWYzNDAxODgwMTExNDIwMDk3MzQwMTg4MDBlNjQyMDA4ZjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDI0MzgxMDI1MTIxMDQyZmYyYjIzMzgxMDIyMTIyMjM4MTA4MTA2MTIxMDIyMzgxOTIyMTIxMDQyZmYxNjIzODEwNjg4MDA1YTIzMzgwMTMyMDAzMjA0MGIwZTQ0MjI0MjAwNGIyMzM4MTA4MTA2MTIyMzM4MTkyNDEyMTA0MmZlZTAzNDAxODgwMTBlNDIwMDM0MjMzODEwMjIxMjIyMzgxMDI1MTIxMDIyMzgxNDM0MDAxMzEwNDJmZWI4MzQwMDM0MDE4ODAwYWM0MjAwMTUyMzM4MTAyMjEyMjIzODEwMjIxMjEwMjIzODA3MzQwMDEzMTA0MmZlOGU0MzhhMDIwMDhiZmUzMjA0MGM0NDhiZmUzODEwOGJmZjEyNDQ4YmZlMzgwOTMyMDMxMjQ0OGJmZTM4MTAyNTEyNDEwMDA4OGJmZTM4MTUzMjAzMTI0NDg5OGEwMzAwOGJmZDhiZmY4OGZmY2I4YmZkMzgwMThiZmUxMjQ0ODk4YTAzMDA4YmZkOGJmZThiZmY4OGZmZTE4YmZkMzgyMDMyMDMxMjQ0ODk4YTAxMDEyMzMyMDAzMjA0MGIyMjg4ZmZkZTIyMjM4MTA2ODhmZmQ3MjMzODAwOGJmZjEyNDQyMjM4MTkyMjEyNDQyMjg5OGEwMTAxMjQyMzI1ODhmZmJmMjQzODEzMjQzODA3MTI0NDI0MzgxMjIzMTI0NDhiZmY4OGZmYzE4OThhMDIwMTIzMzIwMDMyMDQwYjIyODhmZjllMjIyMzIyODhmZjg1MjMzODAwOGJmZTEyNDQyMzM4MDg4MWEwOGQwNjBmNDQyMjM4MDAyMjM4MDcxMjQ0MjIzODA4MjMxMjQ0MjIzODIwOGJmZjEyMjIzODIwMzIwMzEyMTEyMjEyNDQyMjg5OGEwMTAxMjMzMjAwMjQwYjIyODhmZjVjMjIzMjAwMjQwYjI1ODhmZjUzMjIzODEzMzIwMzEyNDQyMzM4MDA4YmZmMTI0NDIzMzgwNzIyMzgwMDEyNDQyMzM4MDg4MWQwZTgwYzBmNDQyMjM4MDAyMjM4MTQxMjQ0MjIzODEyMjMxMjQ0MjI4OThhMDEwMTIzMzIwMDMyMDQwYjIyODhmZjE3MjIzODEwMjUxMjQwMDAwOTIyMjMyMjg4ZmYwOTQyMDAwNjIyMjMyNTg4ZmYwMDIzMzgwMDhiZmYxMjQ0MjIzODA3OGJmZjEyMjIzODE0OGJmZjEyMTEyMjEyNDQyMjg5CmxvYWQgNjgKZGlnIDEKbGVuCnN1YnN0cmluZzMKY29uY2F0CnN0b3JlIDcxCmxvYWQgNzEKY29uY2F0CnNoYTUxMl8yNTYKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMAp0eG4gR3JvdXBJbmRleApndHhucyBTZW5kZXIKPT0KLy8gUHJlY29uZGl0aW9ucyBmb3IgU01MIHNpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkCmFzc2VydAp0eG4gR3JvdXBJbmRleApndHhucyBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBQcmVjb25kaXRpb25zIGZvciBTTUwgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQKYXNzZXJ0CnR4biBHcm91cEluZGV4Cmd0eG5zIENsb3NlUmVtYWluZGVyVG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIFByZWNvbmRpdGlvbnMgZm9yIFNNTCBzaWduYXR1cmUgdmVyaWZpY2F0aW9uIGZhaWxlZAphc3NlcnQKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQpjYWxsc3ViIGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzYKcmV0c3ViCgovLyBkZWxldGUKZGVsZXRlXzI2Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlYyA3IC8vICJsaWZlY3ljbGUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCj09Ci8vIEFwcCBzdGlsbCBoYXMgYWN0aXZlIHN1YnNjcmlwdGlvbnMgb3IgYWN0aXZlIGxpZmVjeWNsZSBzdGF0ZQphc3NlcnQKYnl0ZWNfMiAvLyAiYWN0aXZlX3N1YnMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj09Ci8vIEFwcCBzdGlsbCBoYXMgYWN0aXZlIHN1YnNjcmlwdGlvbnMgb3IgYWN0aXZlIGxpZmVjeWNsZSBzdGF0ZQphc3NlcnQKcmV0c3Vi";
  override clearProgram =
    "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu";
  override methods: algosdk.ABIMethod[] = [
    new algosdk.ABIMethod({
      name: "create",
      desc: "Creates a new instance of the subscription service with the provided parameters.",
      args: [
        {
          type: "string",
          name: "version",
          desc: "The version of the subscription service.",
        },
        {
          type: "string",
          name: "name",
          desc: "The name of the subscription service.",
        },
        {
          type: "address",
          name: "manager",
          desc: "Manager of the subscription service.",
        },
        {
          type: "uint64",
          name: "sub_type",
          desc: "The type of subscription service (e.g., monthly, yearly).",
        },
        {
          type: "uint64",
          name: "price",
          desc: "The price of the subscription in the specified coin.",
        },
        {
          type: "uint64",
          name: "max_subs",
          desc: "The maximum number of allowed subscriptions.",
        },
        {
          type: "uint64",
          name: "coin_id",
          desc: "The ID of the coin used for subscription payments.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "update_manager",
      desc: "Updates the manager account of the subscription service.",
      args: [
        {
          type: "address",
          name: "new_manager_account",
          desc: "The new manager account address.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "create_discount",
      desc: "Creates a new discount for the subscription service.",
      args: [
        { type: "uint64", name: "expiration_type", desc: "" },
        { type: "uint64", name: "discount_type", desc: "" },
        { type: "uint64", name: "discount_value", desc: "" },
        { type: "uint64", name: "expires_in", desc: "" },
        { type: "pay", name: "fee_txn", desc: "" },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "delete_discount",
      desc: "Deletes a discount for the subscription service.",
      args: [{ type: "uint64", name: "expiration_type", desc: "" }],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "subscribe",
      desc: "Subscribes a user to the subscription service and creates a new\nsubscription.",
      args: [
        {
          type: "address",
          name: "subscriber_account",
          desc: "The subscriber's account address.",
        },
        { type: "uint64", name: "expiration_type", desc: "" },
        {
          type: "pay",
          name: "fee_txn",
          desc: "The transaction for the subscription fee payment.",
        },
        {
          type: "txn",
          name: "subscribe_pay_txn",
          desc: "The transaction representing the payment for the subscription. Can be either abi.PaymentTransaction or abi.AssetTransferTransaction.",
        },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that subscribes the user and creates a new subscription.",
      },
    }),
    new algosdk.ABIMethod({
      name: "get_subscription",
      desc: "Retrieves the subscription details of a given subscriber.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address.",
        },
      ],
      returns: {
        type: "(uint64,uint64,uint64,uint64,uint64)",
        desc: "An expression that retrieves the subscription details.",
      },
    }),
    new algosdk.ABIMethod({
      name: "is_subscriber",
      desc: "Checks if a given address is a subscriber of the subscription service.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address.",
        },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that checks if the address is a subscriber.",
      },
    }),
    new algosdk.ABIMethod({
      name: "claim_subscription",
      desc: "Allows a subscriber to claim their subscription.",
      args: [{ type: "uint64", name: "subscription_id", desc: "" }],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "transfer_subscription",
      desc: "Transfers a subscription from the sender's address to a new address.",
      args: [
        {
          type: "address",
          name: "new_address",
          desc: "The new address to transfer the subscription to.",
        },
        { type: "uint64", name: "subscription_id", desc: "" },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "unsubscribe",
      desc: "Unsubscribes a user from the subscription service and deletes the\nsubscription.",
      args: [
        { type: "asset", name: "sub_id", desc: "The subscription ASA ID." },
      ],
      returns: {
        type: "uint64",
        desc: "An expression that unsubscribes the user and deletes the subscription.",
      },
    }),
    new algosdk.ABIMethod({
      name: "mark_for_deletion",
      desc: "Marks the subscription service for deletion. Can only be called by the\nmanager account.",
      args: [
        {
          type: "pay",
          name: "locker_fund_txn",
          desc: "The locker fund transaction.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "delete_subscription",
      desc: "Deletes a subscription for a given subscriber. Can only be called by the\nmanager account.",
      args: [
        {
          type: "address",
          name: "subscriber",
          desc: "The subscriber address whose subscription needs to be deleted.",
        },
        {
          type: "uint64",
          name: "subscription_id",
          desc: "The subscription ID to delete.",
        },
      ],
      returns: { type: "void", desc: "" },
    }),
    new algosdk.ABIMethod({
      name: "delete",
      desc: "Deletes the subscription service. Can only be called by the manager account\nwhen there are no active subscriptions or the lifecycle state is not active.",
      args: [],
      returns: { type: "void", desc: "" },
    }),
  ];
  async create(
    args: {
      version: string;
      name: string;
      manager: string;
      sub_type: bigint;
      price: bigint;
      max_subs: bigint;
      coin_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.create(
        {
          version: args.version,
          name: args.name,
          manager: args.manager,
          sub_type: args.sub_type,
          price: args.price,
          max_subs: args.max_subs,
          coin_id: args.coin_id,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async update_manager(
    args: {
      new_manager_account: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.update_manager(
        { new_manager_account: args.new_manager_account },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async create_discount(
    args: {
      expiration_type: bigint;
      discount_type: bigint;
      discount_value: bigint;
      expires_in: bigint;
      fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.create_discount(
        {
          expiration_type: args.expiration_type,
          discount_type: args.discount_type,
          discount_value: args.discount_value,
          expires_in: args.expires_in,
          fee_txn: args.fee_txn,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async delete_discount(
    args: {
      expiration_type: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.delete_discount(
        { expiration_type: args.expiration_type },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async subscribe(
    args: {
      subscriber_account: string;
      expiration_type: bigint;
      fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      subscribe_pay_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.subscribe(
        {
          subscriber_account: args.subscriber_account,
          expiration_type: args.expiration_type,
          fee_txn: args.fee_txn,
          subscribe_pay_txn: args.subscribe_pay_txn,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async get_subscription(
    args: {
      subscriber: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<Subscription>> {
    const result = await this._execute(
      await this.compose.get_subscription(
        { subscriber: args.subscriber },
        txnParams
      )
    );
    return new bkr.ABIResult<Subscription>(
      result,
      Subscription.decodeResult(result.returnValue)
    );
  }
  async is_subscriber(
    args: {
      subscriber: string;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.is_subscriber(
        { subscriber: args.subscriber },
        txnParams
      )
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async claim_subscription(
    args: {
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.claim_subscription(
        { subscription_id: args.subscription_id },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async transfer_subscription(
    args: {
      new_address: string;
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.transfer_subscription(
        {
          new_address: args.new_address,
          subscription_id: args.subscription_id,
        },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async unsubscribe(
    args: {
      sub_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<bigint>> {
    const result = await this._execute(
      await this.compose.unsubscribe({ sub_id: args.sub_id }, txnParams)
    );
    return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
  }
  async mark_for_deletion(
    args: {
      locker_fund_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.mark_for_deletion(
        { locker_fund_txn: args.locker_fund_txn },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async delete_subscription(
    args: {
      subscriber: string;
      subscription_id: bigint;
    },
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(
      await this.compose.delete_subscription(
        { subscriber: args.subscriber, subscription_id: args.subscription_id },
        txnParams
      )
    );
    return new bkr.ABIResult<void>(result);
  }
  async delete(
    txnParams?: bkr.TransactionOverrides
  ): Promise<bkr.ABIResult<void>> {
    const result = await this._execute(await this.compose.delete(txnParams));
    return new bkr.ABIResult<void>(result);
  }
  compose = {
    create: async (
      args: {
        version: string;
        name: string;
        manager: string;
        sub_type: bigint;
        price: bigint;
        max_subs: bigint;
        coin_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "create"),
        {
          version: args.version,
          name: args.name,
          manager: args.manager,
          sub_type: args.sub_type,
          price: args.price,
          max_subs: args.max_subs,
          coin_id: args.coin_id,
        },
        txnParams,
        atc
      );
    },
    update_manager: async (
      args: {
        new_manager_account: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "update_manager"),
        { new_manager_account: args.new_manager_account },
        txnParams,
        atc
      );
    },
    create_discount: async (
      args: {
        expiration_type: bigint;
        discount_type: bigint;
        discount_value: bigint;
        expires_in: bigint;
        fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "create_discount"),
        {
          expiration_type: args.expiration_type,
          discount_type: args.discount_type,
          discount_value: args.discount_value,
          expires_in: args.expires_in,
          fee_txn: args.fee_txn,
        },
        txnParams,
        atc
      );
    },
    delete_discount: async (
      args: {
        expiration_type: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "delete_discount"),
        { expiration_type: args.expiration_type },
        txnParams,
        atc
      );
    },
    subscribe: async (
      args: {
        subscriber_account: string;
        expiration_type: bigint;
        fee_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
        subscribe_pay_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "subscribe"),
        {
          subscriber_account: args.subscriber_account,
          expiration_type: args.expiration_type,
          fee_txn: args.fee_txn,
          subscribe_pay_txn: args.subscribe_pay_txn,
        },
        txnParams,
        atc
      );
    },
    get_subscription: async (
      args: {
        subscriber: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "get_subscription"),
        { subscriber: args.subscriber },
        txnParams,
        atc
      );
    },
    is_subscriber: async (
      args: {
        subscriber: string;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "is_subscriber"),
        { subscriber: args.subscriber },
        txnParams,
        atc
      );
    },
    claim_subscription: async (
      args: {
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "claim_subscription"),
        { subscription_id: args.subscription_id },
        txnParams,
        atc
      );
    },
    transfer_subscription: async (
      args: {
        new_address: string;
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "transfer_subscription"),
        {
          new_address: args.new_address,
          subscription_id: args.subscription_id,
        },
        txnParams,
        atc
      );
    },
    unsubscribe: async (
      args: {
        sub_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "unsubscribe"),
        { sub_id: args.sub_id },
        txnParams,
        atc
      );
    },
    mark_for_deletion: async (
      args: {
        locker_fund_txn: algosdk.TransactionWithSigner | algosdk.Transaction;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "mark_for_deletion"),
        { locker_fund_txn: args.locker_fund_txn },
        txnParams,
        atc
      );
    },
    delete_subscription: async (
      args: {
        subscriber: string;
        subscription_id: bigint;
      },
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "delete_subscription"),
        { subscriber: args.subscriber, subscription_id: args.subscription_id },
        txnParams,
        atc
      );
    },
    delete: async (
      txnParams?: bkr.TransactionOverrides,
      atc?: algosdk.AtomicTransactionComposer
    ): Promise<algosdk.AtomicTransactionComposer> => {
      const deleteParams = await this._deleteParameters({ ...txnParams });
      return this._addMethodCall(
        algosdk.getMethodByName(this.methods, "delete"),
        {},
        deleteParams,
        atc
      );
    },
  };
}
