/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "get_version()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opt_in_smi(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opt_out_smi(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opt_in_coin(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opt_out_coin(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_coin(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_algo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager",
          "descr": "Address of the manager of the locker"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SML",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "address",
            "name": "manager"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_version",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "opt_in_smi",
        "args": [
          {
            "type": "application",
            "name": "smi"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "opt_out_smi",
        "args": [
          {
            "type": "application",
            "name": "smi"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "opt_in_coin",
        "args": [
          {
            "type": "asset",
            "name": "coin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "opt_out_coin",
        "args": [
          {
            "type": "asset",
            "name": "coin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw_coin",
        "args": [
          {
            "type": "asset",
            "name": "coin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw_algo",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "opt_in": "CALL",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Sml smart contract.
 */
export type Sml = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address)void' | 'create', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: void
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'opt_in_smi(application)void' | 'opt_in_smi', {
      argsObj: {
        smi: number | bigint
      }
      argsTuple: [smi: number | bigint]
      returns: void
    }>
    & Record<'opt_out_smi(application)void' | 'opt_out_smi', {
      argsObj: {
        smi: number | bigint
      }
      argsTuple: [smi: number | bigint]
      returns: void
    }>
    & Record<'opt_in_coin(asset)void' | 'opt_in_coin', {
      argsObj: {
        coin: number | bigint
      }
      argsTuple: [coin: number | bigint]
      returns: void
    }>
    & Record<'opt_out_coin(asset)void' | 'opt_out_coin', {
      argsObj: {
        coin: number | bigint
      }
      argsTuple: [coin: number | bigint]
      returns: void
    }>
    & Record<'withdraw_coin(asset)void' | 'withdraw_coin', {
      argsObj: {
        coin: number | bigint
      }
      argsTuple: [coin: number | bigint]
      returns: void
    }>
    & Record<'withdraw_algo()void' | 'withdraw_algo', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * Address of the manager of the locker
       */
      'manager'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SmlSig = keyof Sml['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SmlSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Sml smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SmlSig> = Sml['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Sml smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SmlSig> = Sml['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SmlCreateCalls = (typeof SmlCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SmlCreateCallParams =
  | (TypedCallParams<'create(address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type SmlUpdateCalls = (typeof SmlCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type SmlUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type SmlDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SmlCreateCalls) => SmlCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: SmlUpdateCalls) => SmlUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SmlCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SML smart contract using the create(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.manager],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the SML smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the SML smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_version()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_in_smi(application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInSmi(args: MethodArgs<'opt_in_smi(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_in_smi(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.smi],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_out_smi(application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optOutSmi(args: MethodArgs<'opt_out_smi(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_out_smi(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.smi],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_in_coin(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInCoin(args: MethodArgs<'opt_in_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_in_coin(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.coin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_out_coin(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optOutCoin(args: MethodArgs<'opt_out_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_out_coin(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.coin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_coin(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawCoin(args: MethodArgs<'withdraw_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_coin(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.coin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_algo()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAlgo(args: MethodArgs<'withdraw_algo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_algo()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SML smart contract
 */
export class SmlClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SmlClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Sml['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SML smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SmlDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SmlCallFactory.create)
    const updateArgs = params.updateCall?.(SmlCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SML smart contract using the create(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'create(address)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(SmlCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the SML smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the SML smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SML smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.getVersion(args, params))
  }

  /**
   * Calls the opt_in_smi(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInSmi(args: MethodArgs<'opt_in_smi(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.optInSmi(args, params))
  }

  /**
   * Calls the opt_out_smi(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optOutSmi(args: MethodArgs<'opt_out_smi(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.optOutSmi(args, params))
  }

  /**
   * Calls the opt_in_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInCoin(args: MethodArgs<'opt_in_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.optInCoin(args, params))
  }

  /**
   * Calls the opt_out_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optOutCoin(args: MethodArgs<'opt_out_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.optOutCoin(args, params))
  }

  /**
   * Calls the withdraw_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawCoin(args: MethodArgs<'withdraw_coin(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.withdrawCoin(args, params))
  }

  /**
   * Calls the withdraw_algo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAlgo(args: MethodArgs<'withdraw_algo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmlCallFactory.withdrawAlgo(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Sml['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get manager() {
        return SmlClient.getBinaryState(state, 'manager')
      },
    }
  }

  public compose(): SmlComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInSmi(args: MethodArgs<'opt_in_smi(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optOutSmi(args: MethodArgs<'opt_out_smi(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optOutSmi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInCoin(args: MethodArgs<'opt_in_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInCoin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optOutCoin(args: MethodArgs<'opt_out_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optOutCoin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawCoin(args: MethodArgs<'withdraw_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawCoin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAlgo(args: MethodArgs<'withdraw_algo()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SmlComposer
  }
}
export type SmlComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'get_version()string'>]>

  /**
   * Calls the opt_in_smi(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInSmi(args: MethodArgs<'opt_in_smi(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'opt_in_smi(application)void'>]>

  /**
   * Calls the opt_out_smi(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optOutSmi(args: MethodArgs<'opt_out_smi(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'opt_out_smi(application)void'>]>

  /**
   * Calls the opt_in_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInCoin(args: MethodArgs<'opt_in_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'opt_in_coin(asset)void'>]>

  /**
   * Calls the opt_out_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optOutCoin(args: MethodArgs<'opt_out_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'opt_out_coin(asset)void'>]>

  /**
   * Calls the withdraw_coin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawCoin(args: MethodArgs<'withdraw_coin(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'withdraw_coin(asset)void'>]>

  /**
   * Calls the withdraw_algo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAlgo(args: MethodArgs<'withdraw_algo()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, MethodReturn<'withdraw_algo()void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the SML smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): SmlComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the SML smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the SML smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmlComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SmlComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<SmlComposerResults<TReturns>>
}
export type SmlComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
