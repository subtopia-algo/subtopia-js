/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "get_version()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_manager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_sma_id(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "Discount",
          "elements": [
            [
              "expiration_type",
              "uint64"
            ],
            [
              "discount_type",
              "uint64"
            ],
            [
              "discount_value",
              "uint64"
            ],
            [
              "expires_at",
              "uint64"
            ],
            [
              "created_at",
              "uint64"
            ],
            [
              "total_claims",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "is_discount_expired(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_discount(uint64,uint64,uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_discount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_price(uint64,bool)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_platform_fee(uint64,application)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_subscription(address,uint64,pay,pay,txn,application,application)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_subscription(address)(uint64,uint64,uint64,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "Subscription",
          "elements": [
            [
              "sub_type",
              "uint64"
            ],
            [
              "sub_id",
              "uint64"
            ],
            [
              "created_at",
              "uint64"
            ],
            [
              "expires_at",
              "uint64"
            ],
            [
              "expiration_type",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "is_subscriber(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_subscription(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_subscription(address,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_subscription(asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "enable()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "disable()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "coin_id": {
          "type": "uint64",
          "key": "coin_id",
          "descr": "ASA ID of the subscription, default is ALGO"
        },
        "created_at": {
          "type": "uint64",
          "key": "created_at",
          "descr": "Timestamp of the subscription service creation"
        },
        "image_url": {
          "type": "bytes",
          "key": "image_url",
          "descr": "Image URL of the subscription NFT"
        },
        "lifecycle": {
          "type": "uint64",
          "key": "lifecycle",
          "descr": "Lifecycle state of the subscription service"
        },
        "manager": {
          "type": "bytes",
          "key": "manager",
          "descr": "Address of the manager of the subscription"
        },
        "max_subs": {
          "type": "uint64",
          "key": "max_subs",
          "descr": "Max subscriptions to be sold"
        },
        "name": {
          "type": "bytes",
          "key": "name",
          "descr": "Name of the service providing subscription"
        },
        "price": {
          "type": "uint64",
          "key": "price",
          "descr": "Price of the subscription"
        },
        "sma_id": {
          "type": "uint64",
          "key": "sma_id",
          "descr": "ID of Subtopia Admin Oracle contract"
        },
        "sub_type": {
          "type": "uint64",
          "key": "sub_type",
          "descr": "Type of the subscription"
        },
        "total_subs": {
          "type": "uint64",
          "key": "total_subs",
          "descr": "Total subscriptions sold"
        },
        "unit_name": {
          "type": "bytes",
          "key": "unit_name",
          "descr": "Unit name of the subscription NFT"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SMI",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "string",
            "name": "name",
            "desc": "The name of the subscription service."
          },
          {
            "type": "address",
            "name": "manager",
            "desc": "The address of the manager of the subscription service."
          },
          {
            "type": "uint64",
            "name": "sub_type",
            "desc": "The type of the subscription service."
          },
          {
            "type": "uint64",
            "name": "price",
            "desc": "The price of the subscription service."
          },
          {
            "type": "uint64",
            "name": "max_subs",
            "desc": "The maximum number of subscriptions to be sold."
          },
          {
            "type": "uint64",
            "name": "coin_id",
            "desc": "The ASA ID of the subscription service."
          },
          {
            "type": "uint64",
            "name": "sma_id",
            "desc": "The ID of the Subtopia Price Oracle contract."
          },
          {
            "type": "string",
            "name": "unit_name"
          },
          {
            "type": "string",
            "name": "image_url"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Creates a new instance of the subscription service with the provided parameters."
      },
      {
        "name": "get_version",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "update_manager",
        "args": [
          {
            "type": "address",
            "name": "new_manager_account",
            "desc": "The new manager account address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Updates the manager account of the subscription service."
      },
      {
        "name": "update_sma_id",
        "args": [
          {
            "type": "uint64",
            "name": "new_sma_id",
            "desc": "The new ID of the Subtopia Price Oracle contract."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Updates the ID of the Subtopia Price Oracle contract."
      },
      {
        "name": "get_discount",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_type",
            "desc": "The expiration type of the discount."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "An expression that returns the discount."
        },
        "desc": "Returns the discount for the specified expiration type."
      },
      {
        "name": "is_discount_expired",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_type",
            "desc": "The expiration type of the discount."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "An expression that checks if the discount is expired."
        },
        "desc": "Checks if the discount for the specified expiration type is expired."
      },
      {
        "name": "create_discount",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_type"
          },
          {
            "type": "uint64",
            "name": "discount_type"
          },
          {
            "type": "uint64",
            "name": "discount_value"
          },
          {
            "type": "uint64",
            "name": "expires_in"
          },
          {
            "type": "pay",
            "name": "fee_txn"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Creates a new discount for the subscription service."
      },
      {
        "name": "delete_discount",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_type"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Deletes a discount for the subscription service."
      },
      {
        "name": "compute_price",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_type",
            "desc": "The expiration type of the subscription."
          },
          {
            "type": "bool",
            "name": "with_discount"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "An expression that computes the price of the subscription."
        },
        "desc": "Computes the price of the subscription for the given expiration type."
      },
      {
        "name": "compute_platform_fee",
        "args": [
          {
            "type": "uint64",
            "name": "whole_usd"
          },
          {
            "type": "application",
            "name": "sma_id"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "create_subscription",
        "args": [
          {
            "type": "address",
            "name": "subscriber",
            "desc": "The subscriber address."
          },
          {
            "type": "uint64",
            "name": "expiration_type",
            "desc": "The expiration type of the subscription."
          },
          {
            "type": "pay",
            "name": "fee_txn",
            "desc": "The fee transaction."
          },
          {
            "type": "pay",
            "name": "platform_fee_txn"
          },
          {
            "type": "txn",
            "name": "pay_txn",
            "desc": "The payment transaction."
          },
          {
            "type": "application",
            "name": "locker",
            "desc": "The locker application."
          },
          {
            "type": "application",
            "name": "sma_id"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "An expression that subscribes the user and creates a new subscription."
        },
        "desc": "Subscribes a user to the subscription service and creates a new\nsubscription."
      },
      {
        "name": "get_subscription",
        "args": [
          {
            "type": "address",
            "name": "subscriber",
            "desc": "The subscriber address."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64)",
          "desc": "An expression that retrieves the subscription details."
        },
        "desc": "Retrieves the subscription details of a given subscriber."
      },
      {
        "name": "is_subscriber",
        "args": [
          {
            "type": "address",
            "name": "subscriber",
            "desc": "The subscriber address."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "An expression that checks if the address is a subscriber."
        },
        "desc": "Checks if a given address is a subscriber of the subscription service."
      },
      {
        "name": "claim_subscription",
        "args": [
          {
            "type": "asset",
            "name": "subscription"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows a subscriber to claim their subscription."
      },
      {
        "name": "transfer_subscription",
        "args": [
          {
            "type": "address",
            "name": "new_address",
            "desc": "The new address to transfer the subscription to."
          },
          {
            "type": "asset",
            "name": "subscription"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Transfers a subscription from the sender's address to a new address."
      },
      {
        "name": "delete_subscription",
        "args": [
          {
            "type": "asset",
            "name": "sub_id",
            "desc": "The subscription ASA ID."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "An expression that unsubscribes the user and deletes the subscription."
        },
        "desc": "Unsubscribes a user from the subscription service and deletes the\nsubscription."
      },
      {
        "name": "enable",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "disable",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delete",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Deletes the subscription service. Can only be called by the manager account\nwhen there are no active subscriptions or the lifecycle state is not active."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "close_out": "CALL",
    "opt_in": "CALL",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Smi smart contract.
 */
export type Smi = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void' | 'create', {
      argsObj: {
        /**
         * The name of the subscription service.
         */
        name: string
        /**
         * The address of the manager of the subscription service.
         */
        manager: string
        /**
         * The type of the subscription service.
         */
        sub_type: bigint | number
        /**
         * The price of the subscription service.
         */
        price: bigint | number
        /**
         * The maximum number of subscriptions to be sold.
         */
        max_subs: bigint | number
        /**
         * The ASA ID of the subscription service.
         */
        coin_id: bigint | number
        /**
         * The ID of the Subtopia Price Oracle contract.
         */
        sma_id: bigint | number
        unit_name: string
        image_url: string
      }
      argsTuple: [name: string, manager: string, sub_type: bigint | number, price: bigint | number, max_subs: bigint | number, coin_id: bigint | number, sma_id: bigint | number, unit_name: string, image_url: string]
      returns: void
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'update_manager(address)void' | 'update_manager', {
      argsObj: {
        /**
         * The new manager account address.
         */
        new_manager_account: string
      }
      argsTuple: [new_manager_account: string]
      returns: void
    }>
    & Record<'update_sma_id(uint64)void' | 'update_sma_id', {
      argsObj: {
        /**
         * The new ID of the Subtopia Price Oracle contract.
         */
        new_sma_id: bigint | number
      }
      argsTuple: [new_sma_id: bigint | number]
      returns: void
    }>
    & Record<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)' | 'get_discount', {
      argsObj: {
        /**
         * The expiration type of the discount.
         */
        expiration_type: bigint | number
      }
      argsTuple: [expiration_type: bigint | number]
      /**
       * An expression that returns the discount.
       */
      returns: Discount
    }>
    & Record<'is_discount_expired(uint64)uint64' | 'is_discount_expired', {
      argsObj: {
        /**
         * The expiration type of the discount.
         */
        expiration_type: bigint | number
      }
      argsTuple: [expiration_type: bigint | number]
      /**
       * An expression that checks if the discount is expired.
       */
      returns: bigint
    }>
    & Record<'create_discount(uint64,uint64,uint64,uint64,pay)void' | 'create_discount', {
      argsObj: {
        expiration_type: bigint | number
        discount_type: bigint | number
        discount_value: bigint | number
        expires_in: bigint | number
        fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [expiration_type: bigint | number, discount_type: bigint | number, discount_value: bigint | number, expires_in: bigint | number, fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'delete_discount(uint64)void' | 'delete_discount', {
      argsObj: {
        expiration_type: bigint | number
      }
      argsTuple: [expiration_type: bigint | number]
      returns: void
    }>
    & Record<'compute_price(uint64,bool)uint64' | 'compute_price', {
      argsObj: {
        /**
         * The expiration type of the subscription.
         */
        expiration_type: bigint | number
        with_discount: boolean
      }
      argsTuple: [expiration_type: bigint | number, with_discount: boolean]
      /**
       * An expression that computes the price of the subscription.
       */
      returns: bigint
    }>
    & Record<'compute_platform_fee(uint64,application)uint64' | 'compute_platform_fee', {
      argsObj: {
        whole_usd: bigint | number
        sma_id: number | bigint
      }
      argsTuple: [whole_usd: bigint | number, sma_id: number | bigint]
      returns: bigint
    }>
    & Record<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64' | 'create_subscription', {
      argsObj: {
        /**
         * The subscriber address.
         */
        subscriber: string
        /**
         * The expiration type of the subscription.
         */
        expiration_type: bigint | number
        /**
         * The fee transaction.
         */
        fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        platform_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The payment transaction.
         */
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The locker application.
         */
        locker: number | bigint
        sma_id: number | bigint
      }
      argsTuple: [subscriber: string, expiration_type: bigint | number, fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, platform_fee_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, locker: number | bigint, sma_id: number | bigint]
      /**
       * An expression that subscribes the user and creates a new subscription.
       */
      returns: bigint
    }>
    & Record<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)' | 'get_subscription', {
      argsObj: {
        /**
         * The subscriber address.
         */
        subscriber: string
      }
      argsTuple: [subscriber: string]
      /**
       * An expression that retrieves the subscription details.
       */
      returns: Subscription
    }>
    & Record<'is_subscriber(address)uint64' | 'is_subscriber', {
      argsObj: {
        /**
         * The subscriber address.
         */
        subscriber: string
      }
      argsTuple: [subscriber: string]
      /**
       * An expression that checks if the address is a subscriber.
       */
      returns: bigint
    }>
    & Record<'claim_subscription(asset)void' | 'claim_subscription', {
      argsObj: {
        subscription: number | bigint
      }
      argsTuple: [subscription: number | bigint]
      returns: void
    }>
    & Record<'transfer_subscription(address,asset)void' | 'transfer_subscription', {
      argsObj: {
        /**
         * The new address to transfer the subscription to.
         */
        new_address: string
        subscription: number | bigint
      }
      argsTuple: [new_address: string, subscription: number | bigint]
      returns: void
    }>
    & Record<'delete_subscription(asset)uint64' | 'delete_subscription', {
      argsObj: {
        /**
         * The subscription ASA ID.
         */
        sub_id: number | bigint
      }
      argsTuple: [sub_id: number | bigint]
      /**
       * An expression that unsubscribes the user and deletes the subscription.
       */
      returns: bigint
    }>
    & Record<'enable()void' | 'enable', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'disable()void' | 'disable', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * ASA ID of the subscription, default is ALGO
       */
      'coin_id'?: IntegerState
      /**
       * Timestamp of the subscription service creation
       */
      'created_at'?: IntegerState
      /**
       * Image URL of the subscription NFT
       */
      'image_url'?: BinaryState
      /**
       * Lifecycle state of the subscription service
       */
      'lifecycle'?: IntegerState
      /**
       * Address of the manager of the subscription
       */
      'manager'?: BinaryState
      /**
       * Max subscriptions to be sold
       */
      'max_subs'?: IntegerState
      /**
       * Name of the service providing subscription
       */
      'name'?: BinaryState
      /**
       * Price of the subscription
       */
      'price'?: IntegerState
      /**
       * ID of Subtopia Admin Oracle contract
       */
      'sma_id'?: IntegerState
      /**
       * Type of the subscription
       */
      'sub_type'?: IntegerState
      /**
       * Total subscriptions sold
       */
      'total_subs'?: IntegerState
      /**
       * Unit name of the subscription NFT
       */
      'unit_name'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SmiSig = keyof Smi['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SmiSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Discount result as a struct
 */
export type Discount = {
  expiration_type: bigint
  discount_type: bigint
  discount_value: bigint
  expires_at: bigint
  created_at: bigint
  total_claims: bigint
}
/**
 * Converts the tuple representation of a Discount to the struct representation
 */
export function Discount([expiration_type, discount_type, discount_value, expires_at, created_at, total_claims]: [bigint, bigint, bigint, bigint, bigint, bigint] ) {
  return {
    expiration_type,
    discount_type,
    discount_value,
    expires_at,
    created_at,
    total_claims,
  }
}
/**
 * Represents a Subscription result as a struct
 */
export type Subscription = {
  sub_type: bigint
  sub_id: bigint
  created_at: bigint
  expires_at: bigint
  expiration_type: bigint
}
/**
 * Converts the tuple representation of a Subscription to the struct representation
 */
export function Subscription([sub_type, sub_id, created_at, expires_at, expiration_type]: [bigint, bigint, bigint, bigint, bigint] ) {
  return {
    sub_type,
    sub_id,
    created_at,
    expires_at,
    expiration_type,
  }
}
/**
 * Maps a method signature from the Smi smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SmiSig> = Smi['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Smi smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SmiSig> = Smi['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SmiCreateCalls = (typeof SmiCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SmiCreateCallParams =
  | (TypedCallParams<'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type SmiUpdateCalls = (typeof SmiCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type SmiUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type SmiDeleteCalls = (typeof SmiCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type SmiDeleteCallParams =
  | TypedCallParams<'delete()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type SmiDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SmiCreateCalls) => SmiCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: SmiUpdateCalls) => SmiUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: SmiDeleteCalls) => SmiDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SmiCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SMI smart contract using the create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.name, args.manager, args.sub_type, args.price, args.max_subs, args.coin_id, args.sma_id, args.unit_name, args.image_url],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the SMI smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the SMI smart contract using the delete()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(args: MethodArgs<'delete()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'delete()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the SMI smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the SMI smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_version()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_manager(address)void ABI method
   *
   * Updates the manager account of the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateManager(args: MethodArgs<'update_manager(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_manager(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_manager_account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_sma_id(uint64)void ABI method
   *
   * Updates the ID of the Subtopia Price Oracle contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSmaId(args: MethodArgs<'update_sma_id(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_sma_id(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_sma_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the discount for the specified expiration type.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDiscount(args: MethodArgs<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_type],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the is_discount_expired(uint64)uint64 ABI method
   *
   * Checks if the discount for the specified expiration type is expired.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isDiscountExpired(args: MethodArgs<'is_discount_expired(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'is_discount_expired(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_type],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_discount(uint64,uint64,uint64,uint64,pay)void ABI method
   *
   * Creates a new discount for the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createDiscount(args: MethodArgs<'create_discount(uint64,uint64,uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_discount(uint64,uint64,uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_type, args.discount_type, args.discount_value, args.expires_in, args.fee_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_discount(uint64)void ABI method
   *
   * Deletes a discount for the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteDiscount(args: MethodArgs<'delete_discount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_discount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_type],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_price(uint64,bool)uint64 ABI method
   *
   * Computes the price of the subscription for the given expiration type.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computePrice(args: MethodArgs<'compute_price(uint64,bool)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_price(uint64,bool)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_type, args.with_discount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_platform_fee(uint64,application)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computePlatformFee(args: MethodArgs<'compute_platform_fee(uint64,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_platform_fee(uint64,application)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.whole_usd, args.sma_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_subscription(address,uint64,pay,pay,txn,application,application)uint64 ABI method
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSubscription(args: MethodArgs<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_subscription(address,uint64,pay,pay,txn,application,application)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.subscriber, args.expiration_type, args.fee_txn, args.platform_fee_txn, args.pay_txn, args.locker, args.sma_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSubscription(args: MethodArgs<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.subscriber],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the is_subscriber(address)uint64 ABI method
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isSubscriber(args: MethodArgs<'is_subscriber(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'is_subscriber(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.subscriber],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_subscription(asset)void ABI method
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimSubscription(args: MethodArgs<'claim_subscription(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_subscription(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.subscription],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_subscription(address,asset)void ABI method
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferSubscription(args: MethodArgs<'transfer_subscription(address,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_subscription(address,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_address, args.subscription],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_subscription(asset)uint64 ABI method
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteSubscription(args: MethodArgs<'delete_subscription(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_subscription(asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.sub_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the enable()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static enable(args: MethodArgs<'enable()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'enable()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the disable()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static disable(args: MethodArgs<'disable()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'disable()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SMI smart contract
 */
export class SmiClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SmiClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Smi['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SMI smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SmiDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SmiCallFactory.create)
    const updateArgs = params.updateCall?.(SmiCallFactory.update)
    const deleteArgs = params.deleteCall?.(SmiCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SMI smart contract using the create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'create(string,address,uint64,uint64,uint64,uint64,uint64,string,string)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(SmiCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the SMI smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the SMI smart contract using the delete()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(args: MethodArgs<'delete()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'delete()void'>>> {
        return $this.mapReturnValue(await $this.appClient.delete(SmiCallFactory.delete.delete(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the SMI smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this
    return {
      /**
       * Makes a close out call to an existing instance of the SMI smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The closeOut result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.closeOut(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SMI smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVersion(args: MethodArgs<'get_version()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.getVersion(args, params))
  }

  /**
   * Calls the update_manager(address)void ABI method.
   *
   * Updates the manager account of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateManager(args: MethodArgs<'update_manager(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.updateManager(args, params))
  }

  /**
   * Calls the update_sma_id(uint64)void ABI method.
   *
   * Updates the ID of the Subtopia Price Oracle contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSmaId(args: MethodArgs<'update_sma_id(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.updateSmaId(args, params))
  }

  /**
   * Calls the get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the discount for the specified expiration type.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that returns the discount.
   */
  public getDiscount(args: MethodArgs<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.getDiscount(args, params), Discount)
  }

  /**
   * Calls the is_discount_expired(uint64)uint64 ABI method.
   *
   * Checks if the discount for the specified expiration type is expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that checks if the discount is expired.
   */
  public isDiscountExpired(args: MethodArgs<'is_discount_expired(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.isDiscountExpired(args, params))
  }

  /**
   * Calls the create_discount(uint64,uint64,uint64,uint64,pay)void ABI method.
   *
   * Creates a new discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createDiscount(args: MethodArgs<'create_discount(uint64,uint64,uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.createDiscount(args, params))
  }

  /**
   * Calls the delete_discount(uint64)void ABI method.
   *
   * Deletes a discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteDiscount(args: MethodArgs<'delete_discount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.deleteDiscount(args, params))
  }

  /**
   * Calls the compute_price(uint64,bool)uint64 ABI method.
   *
   * Computes the price of the subscription for the given expiration type.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that computes the price of the subscription.
   */
  public computePrice(args: MethodArgs<'compute_price(uint64,bool)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.computePrice(args, params))
  }

  /**
   * Calls the compute_platform_fee(uint64,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computePlatformFee(args: MethodArgs<'compute_platform_fee(uint64,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.computePlatformFee(args, params))
  }

  /**
   * Calls the create_subscription(address,uint64,pay,pay,txn,application,application)uint64 ABI method.
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that subscribes the user and creates a new subscription.
   */
  public createSubscription(args: MethodArgs<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.createSubscription(args, params))
  }

  /**
   * Calls the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that retrieves the subscription details.
   */
  public getSubscription(args: MethodArgs<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.getSubscription(args, params), Subscription)
  }

  /**
   * Calls the is_subscriber(address)uint64 ABI method.
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that checks if the address is a subscriber.
   */
  public isSubscriber(args: MethodArgs<'is_subscriber(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.isSubscriber(args, params))
  }

  /**
   * Calls the claim_subscription(asset)void ABI method.
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimSubscription(args: MethodArgs<'claim_subscription(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.claimSubscription(args, params))
  }

  /**
   * Calls the transfer_subscription(address,asset)void ABI method.
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferSubscription(args: MethodArgs<'transfer_subscription(address,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.transferSubscription(args, params))
  }

  /**
   * Calls the delete_subscription(asset)uint64 ABI method.
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that unsubscribes the user and deletes the subscription.
   */
  public deleteSubscription(args: MethodArgs<'delete_subscription(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.deleteSubscription(args, params))
  }

  /**
   * Calls the enable()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public enable(args: MethodArgs<'enable()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.enable(args, params))
  }

  /**
   * Calls the disable()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public disable(args: MethodArgs<'disable()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmiCallFactory.disable(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Smi['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get coin_id() {
        return SmiClient.getIntegerState(state, 'coin_id')
      },
      get created_at() {
        return SmiClient.getIntegerState(state, 'created_at')
      },
      get image_url() {
        return SmiClient.getBinaryState(state, 'image_url')
      },
      get lifecycle() {
        return SmiClient.getIntegerState(state, 'lifecycle')
      },
      get manager() {
        return SmiClient.getBinaryState(state, 'manager')
      },
      get max_subs() {
        return SmiClient.getIntegerState(state, 'max_subs')
      },
      get name() {
        return SmiClient.getBinaryState(state, 'name')
      },
      get price() {
        return SmiClient.getIntegerState(state, 'price')
      },
      get sma_id() {
        return SmiClient.getIntegerState(state, 'sma_id')
      },
      get sub_type() {
        return SmiClient.getIntegerState(state, 'sub_type')
      },
      get total_subs() {
        return SmiClient.getIntegerState(state, 'total_subs')
      },
      get unit_name() {
        return SmiClient.getBinaryState(state, 'unit_name')
      },
    }
  }

  public compose(): SmiComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateManager(args: MethodArgs<'update_manager(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateManager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSmaId(args: MethodArgs<'update_sma_id(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSmaId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDiscount(args: MethodArgs<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDiscount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Discount)
        return this
      },
      isDiscountExpired(args: MethodArgs<'is_discount_expired(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isDiscountExpired(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createDiscount(args: MethodArgs<'create_discount(uint64,uint64,uint64,uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createDiscount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteDiscount(args: MethodArgs<'delete_discount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteDiscount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computePrice(args: MethodArgs<'compute_price(uint64,bool)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computePrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computePlatformFee(args: MethodArgs<'compute_platform_fee(uint64,application)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computePlatformFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createSubscription(args: MethodArgs<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSubscription(args: MethodArgs<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Subscription)
        return this
      },
      isSubscriber(args: MethodArgs<'is_subscriber(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isSubscriber(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimSubscription(args: MethodArgs<'claim_subscription(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferSubscription(args: MethodArgs<'transfer_subscription(address,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteSubscription(args: MethodArgs<'delete_subscription(asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      enable(args: MethodArgs<'enable()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.enable(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      disable(args: MethodArgs<'disable()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.disable(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          delete(args: MethodArgs<'delete()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.delete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get closeOut() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.closeOut.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SmiComposer
  }
}
export type SmiComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(args: MethodArgs<'get_version()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'get_version()string'>]>

  /**
   * Calls the update_manager(address)void ABI method.
   *
   * Updates the manager account of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(args: MethodArgs<'update_manager(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'update_manager(address)void'>]>

  /**
   * Calls the update_sma_id(uint64)void ABI method.
   *
   * Updates the ID of the Subtopia Price Oracle contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSmaId(args: MethodArgs<'update_sma_id(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'update_sma_id(uint64)void'>]>

  /**
   * Calls the get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the discount for the specified expiration type.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDiscount(args: MethodArgs<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'get_discount(uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the is_discount_expired(uint64)uint64 ABI method.
   *
   * Checks if the discount for the specified expiration type is expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isDiscountExpired(args: MethodArgs<'is_discount_expired(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'is_discount_expired(uint64)uint64'>]>

  /**
   * Calls the create_discount(uint64,uint64,uint64,uint64,pay)void ABI method.
   *
   * Creates a new discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDiscount(args: MethodArgs<'create_discount(uint64,uint64,uint64,uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'create_discount(uint64,uint64,uint64,uint64,pay)void'>]>

  /**
   * Calls the delete_discount(uint64)void ABI method.
   *
   * Deletes a discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteDiscount(args: MethodArgs<'delete_discount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'delete_discount(uint64)void'>]>

  /**
   * Calls the compute_price(uint64,bool)uint64 ABI method.
   *
   * Computes the price of the subscription for the given expiration type.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computePrice(args: MethodArgs<'compute_price(uint64,bool)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'compute_price(uint64,bool)uint64'>]>

  /**
   * Calls the compute_platform_fee(uint64,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computePlatformFee(args: MethodArgs<'compute_platform_fee(uint64,application)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'compute_platform_fee(uint64,application)uint64'>]>

  /**
   * Calls the create_subscription(address,uint64,pay,pay,txn,application,application)uint64 ABI method.
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSubscription(args: MethodArgs<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'create_subscription(address,uint64,pay,pay,txn,application,application)uint64'>]>

  /**
   * Calls the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSubscription(args: MethodArgs<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the is_subscriber(address)uint64 ABI method.
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isSubscriber(args: MethodArgs<'is_subscriber(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'is_subscriber(address)uint64'>]>

  /**
   * Calls the claim_subscription(asset)void ABI method.
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimSubscription(args: MethodArgs<'claim_subscription(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'claim_subscription(asset)void'>]>

  /**
   * Calls the transfer_subscription(address,asset)void ABI method.
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferSubscription(args: MethodArgs<'transfer_subscription(address,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'transfer_subscription(address,asset)void'>]>

  /**
   * Calls the delete_subscription(asset)uint64 ABI method.
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteSubscription(args: MethodArgs<'delete_subscription(asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'delete_subscription(asset)uint64'>]>

  /**
   * Calls the enable()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  enable(args: MethodArgs<'enable()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'enable()void'>]>

  /**
   * Calls the disable()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  disable(args: MethodArgs<'disable()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, MethodReturn<'disable()void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the SMI smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): SmiComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the SMI smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(args: MethodArgs<'delete()void'>, params?: AppClientCallCoreParams): SmiComposer<[...TReturns, MethodReturn<'delete()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the SMI smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the SMI smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the SMI smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): SmiComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SmiComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<SmiComposerResults<TReturns>>
}
export type SmiComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
