/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner, modelsv2 } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void":
      {
        call_config: {
          no_op: "CREATE",
        },
      },
    "delete()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "get_version()string": {
      read_only: true,
      call_config: {
        no_op: "CALL",
      },
    },
    "get_discount()(uint64,uint64,uint64,uint64,uint64)": {
      read_only: true,
      structs: {
        output: {
          name: "Discount",
          elements: [
            ["discount_type", "uint64"],
            ["discount_value", "uint64"],
            ["expires_at", "uint64"],
            ["created_at", "uint64"],
            ["total_claims", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "get_subscription(address)(uint64,uint64,uint64,uint64,uint64)": {
      read_only: true,
      structs: {
        output: {
          name: "Subscription",
          elements: [
            ["subscription_id", "uint64"],
            ["product_type", "uint64"],
            ["created_at", "uint64"],
            ["expires_at", "uint64"],
            ["duration", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "update_oracle_id(application)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "update_manager(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "update_price(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "update_lifecycle(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "is_discount_expired()uint64": {
      read_only: true,
      call_config: {
        no_op: "CALL",
      },
    },
    "create_discount(uint64,uint64,uint64,pay)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "delete_discount()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "compute_price(bool)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "create_subscription(address,application,application,pay,pay,txn)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "is_subscriber(address)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "claim_subscription(asset)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "transfer_subscription(address,asset)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "delete_subscription(asset)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA0IDYgMTAwMDAwIDEwMDAwIDIxNzAwIDMxMzAwCmJ5dGVjYmxvY2sgMHggMHg2MjVmNjQgMHg2NzczNWYzMyAweDY3NzM1ZjM1IDB4MTUxZjdjNzUgMHg2NzczNWYzMTMxIDB4Njc3MzVmMzQgMHg2NzczNWYzOSAweDY3NzM1ZjMxMzQgMHg2NzczNWYzNiAweDY3NzM1ZjMxMzIgMHg2NzczNWYzMTMzIDB4Njc3MzVmMzggMHg2NzczNWYzNyAweDY3NzM1ZjMxMzAgMHg2NzczNWYzMSAweDY0NjU2NjYxNzU2Yzc0IDB4Njc3MzVmMzIgMHg2ZDYxNmU2MTY3NjU3Mgp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMzgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4ZTIzZGRiNSAvLyAiY3JlYXRlKHN0cmluZyxzdHJpbmcsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDM3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MjQzNzhkM2MgLy8gImRlbGV0ZSgpdm9pZCIKPT0KYm56IG1haW5fbDM2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MmZiYTVhMWIgLy8gImdldF92ZXJzaW9uKClzdHJpbmciCj09CmJueiBtYWluX2wzNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDA2MjFkZTFmIC8vICJnZXRfZGlzY291bnQoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSIKPT0KYm56IG1haW5fbDM0CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4YzE2ODZmZWQgLy8gImdldF9zdWJzY3JpcHRpb24oYWRkcmVzcykodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiCj09CmJueiBtYWluX2wzMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGM3OWMzYTA4IC8vICJ1cGRhdGVfb3JhY2xlX2lkKGFwcGxpY2F0aW9uKXZvaWQiCj09CmJueiBtYWluX2wzMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGM4NmZkYjAxIC8vICJ1cGRhdGVfbWFuYWdlcihhZGRyZXNzKXZvaWQiCj09CmJueiBtYWluX2wzMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGE1NzgxODE4IC8vICJ1cGRhdGVfcHJpY2UodWludDY0KXZvaWQiCj09CmJueiBtYWluX2wzMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDdiMWY5NjRkIC8vICJ1cGRhdGVfbGlmZWN5Y2xlKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMjkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiN2NkNzgyOSAvLyAiaXNfZGlzY291bnRfZXhwaXJlZCgpdWludDY0Igo9PQpibnogbWFpbl9sMjgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkYzNkNGQzMyAvLyAiY3JlYXRlX2Rpc2NvdW50KHVpbnQ2NCx1aW50NjQsdWludDY0LHBheSl2b2lkIgo9PQpibnogbWFpbl9sMjcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyMDI5MzNjMiAvLyAiZGVsZXRlX2Rpc2NvdW50KCl2b2lkIgo9PQpibnogbWFpbl9sMjYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiNGEwZDExNSAvLyAiY29tcHV0ZV9wcmljZShib29sKXVpbnQ2NCIKPT0KYm56IG1haW5fbDI1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4ZGQwMWQ5NWEgLy8gImNyZWF0ZV9zdWJzY3JpcHRpb24oYWRkcmVzcyxhcHBsaWNhdGlvbixhcHBsaWNhdGlvbixwYXkscGF5LHR4bil1aW50NjQiCj09CmJueiBtYWluX2wyNAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDFlYzVlOThhIC8vICJpc19zdWJzY3JpYmVyKGFkZHJlc3MpdWludDY0Igo9PQpibnogbWFpbl9sMjMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg5OGY0MzJjMCAvLyAiY2xhaW1fc3Vic2NyaXB0aW9uKGFzc2V0KXZvaWQiCj09CmJueiBtYWluX2wyMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDNiMzk1YTc0IC8vICJ0cmFuc2Zlcl9zdWJzY3JpcHRpb24oYWRkcmVzcyxhc3NldCl2b2lkIgo9PQpibnogbWFpbl9sMjEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg1YjFjMDkxZCAvLyAiZGVsZXRlX3N1YnNjcmlwdGlvbihhc3NldCl1aW50NjQiCj09CmJueiBtYWluX2wyMAplcnIKbWFpbl9sMjA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZGVsZXRlc3Vic2NyaXB0aW9uY2FzdGVyXzQ5CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB0cmFuc2ZlcnN1YnNjcmlwdGlvbmNhc3Rlcl80OAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY2xhaW1zdWJzY3JpcHRpb25jYXN0ZXJfNDcKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIzOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGlzc3Vic2NyaWJlcmNhc3Rlcl80NgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjQ6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY3JlYXRlc3Vic2NyaXB0aW9uY2FzdGVyXzQ1CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjb21wdXRlcHJpY2VjYXN0ZXJfNDQKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGRlbGV0ZWRpc2NvdW50Y2FzdGVyXzQzCmludGNfMSAvLyAxCnJldHVybgptYWluX2wyNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVkaXNjb3VudGNhc3Rlcl80MgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgaXNkaXNjb3VudGV4cGlyZWRjYXN0ZXJfNDEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI5Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVwZGF0ZWxpZmVjeWNsZWNhc3Rlcl80MAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMzA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgdXBkYXRlcHJpY2VjYXN0ZXJfMzkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDMxOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVwZGF0ZW1hbmFnZXJjYXN0ZXJfMzgKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDMyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVwZGF0ZW9yYWNsZWlkY2FzdGVyXzM3CmludGNfMSAvLyAxCnJldHVybgptYWluX2wzMzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXRzdWJzY3JpcHRpb25jYXN0ZXJfMzYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDM0Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGdldGRpc2NvdW50Y2FzdGVyXzM1CmludGNfMSAvLyAxCnJldHVybgptYWluX2wzNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXR2ZXJzaW9uY2FzdGVyXzM0CmludGNfMSAvLyAxCnJldHVybgptYWluX2wzNjoKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZGVsZXRlY2FzdGVyXzMzCmludGNfMSAvLyAxCnJldHVybgptYWluX2wzNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVjYXN0ZXJfMzIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDM4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sNDQKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDIgLy8gQ2xvc2VPdXQKPT0KYm56IG1haW5fbDQzCnR4biBPbkNvbXBsZXRpb24KaW50Y18yIC8vIFVwZGF0ZUFwcGxpY2F0aW9uCj09CmJueiBtYWluX2w0MgplcnIKbWFpbl9sNDI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHVwZGF0ZV8xMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNDM6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIGNsb3Nlb3V0XzE0CmludGNfMSAvLyAxCnJldHVybgptYWluX2w0NDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgb3B0aW5fMTMKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBpbnRfdG9fYXNjaWkKaW50dG9hc2NpaV8wOgpwcm90byAxIDEKcHVzaGJ5dGVzIDB4MzAzMTMyMzMzNDM1MzYzNzM4MzkgLy8gIjAxMjM0NTY3ODkiCmZyYW1lX2RpZyAtMQppbnRjXzEgLy8gMQpleHRyYWN0MwpyZXRzdWIKCi8vIGl0b2EKaXRvYV8xOgpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmludGNfMCAvLyAwCj09CmJueiBpdG9hXzFfbDUKZnJhbWVfZGlnIC0xCnB1c2hpbnQgMTAgLy8gMTAKLwppbnRjXzAgLy8gMAo+CmJueiBpdG9hXzFfbDQKYnl0ZWNfMCAvLyAiIgppdG9hXzFfbDM6CmZyYW1lX2RpZyAtMQpwdXNoaW50IDEwIC8vIDEwCiUKY2FsbHN1YiBpbnR0b2FzY2lpXzAKY29uY2F0CmIgaXRvYV8xX2w2Cml0b2FfMV9sNDoKZnJhbWVfZGlnIC0xCnB1c2hpbnQgMTAgLy8gMTAKLwpjYWxsc3ViIGl0b2FfMQpiIGl0b2FfMV9sMwppdG9hXzFfbDU6CnB1c2hieXRlcyAweDMwIC8vICIwIgppdG9hXzFfbDY6CnJldHN1YgoKLy8gaW5uZXJfdXNkX2luX21pY3JvYWxnbwppbm5lcnVzZGlubWljcm9hbGdvXzI6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKcHVzaGJ5dGVzIDB4NzU3MDY0NjE3NDY1NjQ1ZjYxNzQgLy8gInVwZGF0ZWRfYXQiCmFwcF9nbG9iYWxfZ2V0X2V4CnN0b3JlIDUyCnN0b3JlIDUxCmZyYW1lX2RpZyAtMgpwdXNoYnl0ZXMgMHg2NDY1NjM2OTZkNjE2YzczIC8vICJkZWNpbWFscyIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgNTQKc3RvcmUgNTMKZnJhbWVfZGlnIC0yCnB1c2hieXRlcyAweDcwNzI2OTYzNjUgLy8gInByaWNlIgphcHBfZ2xvYmFsX2dldF9leApzdG9yZSA1NgpzdG9yZSA1NQpsb2FkIDUxCnN0b3JlIDQzCmxvYWQgNTMKc3RvcmUgNDYKbG9hZCA1NQpzdG9yZSA0OApnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCmxvYWQgNDMKLQpwdXNoaW50IDg2NDAwIC8vIDg2NDAwCj4KYm56IGlubmVydXNkaW5taWNyb2FsZ29fMl9sMwppbm5lcnVzZGlubWljcm9hbGdvXzJfbDE6CmZyYW1lX2RpZyAtMQppbnRjIDUgLy8gMTAwMDAKKgpwdXNoaW50IDEwIC8vIDEwCmxvYWQgNDYKZXhwCioKbG9hZCA0OAovCmludGMgNSAvLyAxMDAwMAovCmludGMgNSAvLyAxMDAwMAoqCnN0b3JlIDUwCmxvYWQgNTAKaW50YyA0IC8vIDEwMDAwMAo8CmJ6IGlubmVydXNkaW5taWNyb2FsZ29fMl9sNAppbnRjIDQgLy8gMTAwMDAwCnJldHN1Ygppbm5lcnVzZGlubWljcm9hbGdvXzJfbDM6CnB1c2hpbnQgMiAvLyAyCnN0b3JlIDQ2CnB1c2hpbnQgMzAgLy8gMzAKc3RvcmUgNDgKYiBpbm5lcnVzZGlubWljcm9hbGdvXzJfbDEKaW5uZXJ1c2Rpbm1pY3JvYWxnb18yX2w0Ogpsb2FkIDUwCnJldHN1YgoKLy8gaW5uZXJfY3JlYXRlX2Fzc2V0CmlubmVyY3JlYXRlYXNzZXRfMzoKcHJvdG8gMyAxCml0eG5fYmVnaW4KcHVzaGludCAzIC8vIGFjZmcKaXR4bl9maWVsZCBUeXBlRW51bQppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCmludGNfMSAvLyAxCml0eG5fZmllbGQgQ29uZmlnQXNzZXREZWZhdWx0RnJvemVuCmZyYW1lX2RpZyAtMgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKZnJhbWVfZGlnIC0zCml0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCmdsb2JhbCBaZXJvQWRkcmVzcwppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RnJlZXplCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdAppdHhuIENyZWF0ZWRBc3NldElECnJldHN1YgoKLy8gaW5uZXJfdHJhbnNmZXJfYXNzZXQKaW5uZXJ0cmFuc2ZlcmFzc2V0XzQ6CnByb3RvIDMgMAppdHhuX2JlZ2luCmludGNfMiAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKaXR4bl9maWVsZCBYZmVyQXNzZXQKaW50Y18xIC8vIDEKaXR4bl9maWVsZCBBc3NldEFtb3VudApmcmFtZV9kaWcgLTIKaXR4bl9maWVsZCBBc3NldFNlbmRlcgpmcmFtZV9kaWcgLTEKaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCmludGNfMCAvLyAwCml0eG5fZmllbGQgRmVlCml0eG5fc3VibWl0CnJldHN1YgoKLy8gaW5uZXJfZGVsZXRlX2Fzc2V0CmlubmVyZGVsZXRlYXNzZXRfNToKcHJvdG8gMSAwCml0eG5fYmVnaW4KcHVzaGludCAzIC8vIGFjZmcKaXR4bl9maWVsZCBUeXBlRW51bQpmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCml0eG5fZmllbGQgQ29uZmlnQXNzZXQKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBpbm5lcl9kZWxldGVfc3Vic2NyaXB0aW9uCmlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzY6CnByb3RvIDIgMApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwphc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKc3RvcmUgNDkKc3RvcmUgNDcKbG9hZCA0OQpsb2FkIDQ3CmludGNfMCAvLyAwCj4KJiYKYm56IGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzZfbDMKaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sMToKZnJhbWVfZGlnIC0xCmNhbGxzdWIgaW5uZXJkZWxldGVhc3NldF81CmJ5dGVjXzMgLy8gImdzXzUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCiE9CmJ6IGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzZfbDQKYnl0ZWNfMyAvLyAiZ3NfNSIKYnl0ZWNfMyAvLyAiZ3NfNSIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKLQphcHBfZ2xvYmFsX3B1dApiIGlubmVyZGVsZXRlc3Vic2NyaXB0aW9uXzZfbDQKaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sMzoKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAtMgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpjYWxsc3ViIGlubmVydHJhbnNmZXJhc3NldF80CmIgaW5uZXJkZWxldGVzdWJzY3JpcHRpb25fNl9sMQppbm5lcmRlbGV0ZXN1YnNjcmlwdGlvbl82X2w0OgpmcmFtZV9kaWcgLTIKYm94X2RlbApwb3AKcmV0c3ViCgovLyBpbm5lcl9jb21wdXRlX2V4cGlyYXRpb24KaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83Ogpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmludGNfMCAvLyAwCj09CmJueiBpbm5lcmNvbXB1dGVleHBpcmF0aW9uXzdfbDIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgLTEKKwpiIGlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sMwppbm5lcmNvbXB1dGVleHBpcmF0aW9uXzdfbDI6CmludGNfMCAvLyAwCmlubmVyY29tcHV0ZWV4cGlyYXRpb25fN19sMzoKcmV0c3ViCgovLyBpbm5lcl9pbmNyZW1lbnRfZGlzY291bnRfdG90YWxfY2xhaW1zX2NvdW50CmlubmVyaW5jcmVtZW50ZGlzY291bnR0b3RhbGNsYWltc2NvdW50Xzg6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gNQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cApieXRlY18xIC8vICJiX2QiCmJveF9sZW4Kc3RvcmUgMTcKc3RvcmUgMTYKbG9hZCAxNwpieiBpbm5lcmluY3JlbWVudGRpc2NvdW50dG90YWxjbGFpbXNjb3VudF84X2wyCmJ5dGVjXzEgLy8gImJfZCIKYm94X2dldApzdG9yZSAxOQpzdG9yZSAxOApsb2FkIDE5CmFzc2VydApsb2FkIDE4CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEKaW5uZXJpbmNyZW1lbnRkaXNjb3VudHRvdGFsY2xhaW1zY291bnRfOF9sMjoKZnJhbWVfZGlnIDAKcHVzaGludCA4IC8vIDgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgMTYgLy8gMTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCnB1c2hpbnQgMjQgLy8gMjQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgMzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmludGNfMSAvLyAxCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAxCml0b2IKZnJhbWVfZGlnIDIKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDYKaXRvYgpjb25jYXQKZnJhbWVfYnVyeSA3CmJ5dGVjXzEgLy8gImJfZCIKYm94X2RlbApwb3AKYnl0ZWNfMSAvLyAiYl9kIgpmcmFtZV9kaWcgNwpib3hfcHV0CnJldHN1YgoKLy8gaW5uZXJfY29tcHV0ZV9kaXNjb3VudF9wcmljZQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzk6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gMgpieXRlY18xIC8vICJiX2QiCmJveF9sZW4Kc3RvcmUgMTMKc3RvcmUgMTIKbG9hZCAxMwpibnogaW5uZXJjb21wdXRlZGlzY291bnRwcmljZV85X2wyCmZyYW1lX2RpZyAtMQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDI6CmJ5dGVjXzEgLy8gImJfZCIKYm94X2dldApzdG9yZSAxNQpzdG9yZSAxNApsb2FkIDE1CmFzc2VydApsb2FkIDE0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKcHVzaGludCA4IC8vIDgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgMTYgLy8gMTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAzCmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKPApmcmFtZV9kaWcgMwppbnRjXzAgLy8gMAo+CiYmCmJueiBpbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDgKZnJhbWVfZGlnIDEKaW50Y18wIC8vIDAKPT0KYm56IGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sNwpmcmFtZV9kaWcgMQppbnRjXzEgLy8gMQo9PQpibnogaW5uZXJjb21wdXRlZGlzY291bnRwcmljZV85X2w2CmZyYW1lX2RpZyAtMQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDY6CmNhbGxzdWIgaW5uZXJpbmNyZW1lbnRkaXNjb3VudHRvdGFsY2xhaW1zY291bnRfOApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDIKLQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDc6CmNhbGxzdWIgaW5uZXJpbmNyZW1lbnRkaXNjb3VudHRvdGFsY2xhaW1zY291bnRfOApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAyCioKcHVzaGludCAxMDAgLy8gMTAwCi8KLQpiIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOV9sOQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDg6CmZyYW1lX2RpZyAtMQppbm5lcmNvbXB1dGVkaXNjb3VudHByaWNlXzlfbDk6CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGlubmVyX2NvbXB1dGVfcHJpY2UKaW5uZXJjb21wdXRlcHJpY2VfMTA6CnByb3RvIDEgMQppbnRjXzAgLy8gMApieXRlYyA2IC8vICJnc180IgphcHBfZ2xvYmFsX2dldApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0xCmludGNfMSAvLyAxCj09CmJueiBpbm5lcmNvbXB1dGVwcmljZV8xMF9sMgpmcmFtZV9kaWcgMApiIGlubmVyY29tcHV0ZXByaWNlXzEwX2wzCmlubmVyY29tcHV0ZXByaWNlXzEwX2wyOgpmcmFtZV9kaWcgMApjYWxsc3ViIGlubmVyY29tcHV0ZWRpc2NvdW50cHJpY2VfOQppbm5lcmNvbXB1dGVwcmljZV8xMF9sMzoKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gY3JlYXRlCmNyZWF0ZV8xMToKcHJvdG8gMTAgMApieXRlYyAxMyAvLyAiZ3NfNyIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgMTQgLy8gImdzXzEwIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA4IC8vICJnc18xNCIKaW50Y18xIC8vIDEKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4Njc3MzVmMzEzNSAvLyAiZ3NfMTUiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4Njc3MzVmMzEzNiAvLyAiZ3NfMTYiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgMTEgLy8gImdzXzEzIgpwdXNoYnl0ZXMgMHg2OTcwNjY3MzNhMmYyZjYyNjE2Njc5NjI2NTY5NjM2NDY0N2EzNzZiNjI3NTc4NjE2YTZhMzY2MjZmNjIzNTYyNmE3MTc0Nzc2NTcxMzY3NzYzNjg2YjY0NmI2OTcxMzQ3Njc2Njg3NzcyNzc3MjZlNjUzNzY5N2EzNDY2MzIzNTc4NjkgLy8gImlwZnM6Ly9iYWZ5YmVpY2RkejdrYnV4YWpqNmJvYjVianF0d2VxNndjaGtka2lxNHZ2aHdyd3JuZTdpejRmMjV4aSIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNyAvLyAiZ3NfOSIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAiZ3NfMyIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDkgLy8gImdzXzYiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDUgLy8gImdzXzExIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJnc180IgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyAxNSAvLyAiZ3NfMSIKYnl0ZWMgMTYgLy8gImRlZmF1bHQiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEyIC8vICJnc184IgpwdXNoaW50IDIgLy8gMgphcHBfZ2xvYmFsX3B1dApieXRlYyAxNyAvLyAiZ3NfMiIKYnl0ZWMgMTYgLy8gImRlZmF1bHQiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gImdzXzUiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEwIC8vICJnc18xMiIKcHVzaGJ5dGVzIDB4NTM1NDUwIC8vICJTVFAiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDE1IC8vICJnc18xIgpmcmFtZV9kaWcgLTEwCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDE3IC8vICJnc18yIgpmcmFtZV9kaWcgLTkKZXh0cmFjdCAyIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAiZ3NfMyIKZnJhbWVfZGlnIC04CmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEyIC8vICJnc184IgpwdXNoaW50IDIgLy8gMgphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJnc180IgpmcmFtZV9kaWcgLTcKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgOSAvLyAiZ3NfNiIKZnJhbWVfZGlnIC02CmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDEzIC8vICJnc183IgpmcmFtZV9kaWcgLTUKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNSAvLyAiZ3NfMTEiCmZyYW1lX2RpZyAtNAphcHBfZ2xvYmFsX3B1dApieXRlYyAxMCAvLyAiZ3NfMTIiCmZyYW1lX2RpZyAtMwpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlYyAxMSAvLyAiZ3NfMTMiCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlYyA4IC8vICJnc18xNCIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDE0IC8vICJnc18xMCIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfMTI6CnByb3RvIDAgMAp0eG4gVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQp0eG4gVHlwZUVudW0KaW50Y18zIC8vIGFwcGwKPT0KfHwKYm56IHVwZGF0ZV8xMl9sNAp0eG4gVHlwZUVudW0KaW50Y18yIC8vIGF4ZmVyCj09CmJueiB1cGRhdGVfMTJfbDMKZXJyCnVwZGF0ZV8xMl9sMzoKdHhuIEFzc2V0Q2xvc2VUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CnR4biBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBBc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKYiB1cGRhdGVfMTJfbDUKdXBkYXRlXzEyX2w0Ogp0eG4gQ2xvc2VSZW1haW5kZXJUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CnR4biBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBQYXltZW50VHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKdXBkYXRlXzEyX2w1Ogp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQphc3NlcnQKcmV0c3ViCgovLyBvcHRpbgpvcHRpbl8xMzoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4biBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CnR4biBUeXBlRW51bQppbnRjXzMgLy8gYXBwbAo9PQp8fApibnogb3B0aW5fMTNfbDQKdHhuIFR5cGVFbnVtCmludGNfMiAvLyBheGZlcgo9PQpibnogb3B0aW5fMTNfbDMKZXJyCm9wdGluXzEzX2wzOgp0eG4gQXNzZXRDbG9zZVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBBc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKdHhuIFJla2V5VG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIEFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApiIG9wdGluXzEzX2w1Cm9wdGluXzEzX2w0Ogp0eG4gQ2xvc2VSZW1haW5kZXJUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CnR4biBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBQYXltZW50VHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKb3B0aW5fMTNfbDU6Cmdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAphcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCnN0b3JlIDAKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIE9ubHkgbG9ja2VycyBjcmVhdGVkIGJ5IHNhbWUgcmVnaXN0cnkgY2FuIG9wdC1pbgphc3NlcnQKcmV0c3ViCgovLyBjbG9zZW91dApjbG9zZW91dF8xNDoKcHJvdG8gMCAwCmdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECmJ5dGVjIDE4IC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldF9leApzdG9yZSAxCmJ5dGVjXzIgLy8gImdzXzMiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIE9ubHkgc2FtZSBtYW5hZ2VyIGNhbiBvcHQtb3V0CmFzc2VydApyZXRzdWIKCi8vIGRlbGV0ZQpkZWxldGVfMTU6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjIDcgLy8gImdzXzkiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCj09Ci8vIEFwcCBzdGlsbCBoYXMgYWN0aXZlIHN1YnNjcmliZXJzIG9yIGFjdGl2ZSBsaWZlY3ljbGUgc3RhdGUKYXNzZXJ0CmJ5dGVjXzMgLy8gImdzXzUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj09Ci8vIEFwcCBzdGlsbCBoYXMgYWN0aXZlIHN1YnNjcmliZXJzIG9yIGFjdGl2ZSBsaWZlY3ljbGUgc3RhdGUKYXNzZXJ0CnJldHN1YgoKLy8gZ2V0X3ZlcnNpb24KZ2V0dmVyc2lvbl8xNjoKcHJvdG8gMCAxCmJ5dGVjXzAgLy8gIiIKZHVwCnB1c2hieXRlcyAweDMxMmUzMCAvLyAiMS4wIgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDEKY29uY2F0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpleHRyYWN0IDIgMApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGdldF9kaXNjb3VudApnZXRkaXNjb3VudF8xNzoKcHJvdG8gMCAxCmJ5dGVjXzAgLy8gIiIKYnl0ZWNfMSAvLyAiYl9kIgpib3hfZ2V0CnN0b3JlIDMKc3RvcmUgMgpsb2FkIDMKYXNzZXJ0CmxvYWQgMgpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBnZXRfc3Vic2NyaXB0aW9uCmdldHN1YnNjcmlwdGlvbl8xODoKcHJvdG8gMSAxCmJ5dGVjXzAgLy8gIiIKZnJhbWVfZGlnIC0xCmJveF9nZXQKc3RvcmUgNQpzdG9yZSA0CmxvYWQgNQphc3NlcnQKbG9hZCA0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIHVwZGF0ZV9vcmFjbGVfaWQKdXBkYXRlb3JhY2xlaWRfMTk6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjIDUgLy8gImdzXzExIgpmcmFtZV9kaWcgLTEKdHhuYXMgQXBwbGljYXRpb25zCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gdXBkYXRlX21hbmFnZXIKdXBkYXRlbWFuYWdlcl8yMDoKcHJvdG8gMSAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMiAvLyAiZ3NfMyIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCiE9Ci8vIE5ldyBtYW5hZ2VyIGNhbm5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgb2xkIG1hbmFnZXIKYXNzZXJ0CmJ5dGVjXzIgLy8gImdzXzMiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHVwZGF0ZV9wcmljZQp1cGRhdGVwcmljZV8yMToKcHJvdG8gMSAwCnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZ3NfMyIKYXBwX2dsb2JhbF9nZXQKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlYyA2IC8vICJnc180IgpmcmFtZV9kaWcgLTEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyB1cGRhdGVfbGlmZWN5Y2xlCnVwZGF0ZWxpZmVjeWNsZV8yMjoKcHJvdG8gMSAwCnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZ3NfMyIKYXBwX2dsb2JhbF9nZXQKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApmcmFtZV9kaWcgLTEKaW50Y18wIC8vIDAKPT0KZnJhbWVfZGlnIC0xCmludGNfMSAvLyAxCj09Cnx8Ci8vIEludmFsaWQgbGlmZWN5Y2xlIHN0YXRlCmFzc2VydApieXRlYyA3IC8vICJnc185IgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKIT0KLy8gU3Vic2NyaXB0aW9uIHByb2R1Y3QgaXMgYWxyZWFkeSBzZXQgdG8gc2FtZSBzdGF0ZQphc3NlcnQKYnl0ZWMgNyAvLyAiZ3NfOSIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gaXNfZGlzY291bnRfZXhwaXJlZAppc2Rpc2NvdW50ZXhwaXJlZF8yMzoKcHJvdG8gMCAxCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMSAvLyAiYl9kIgpib3hfbGVuCnN0b3JlIDcKc3RvcmUgNgpsb2FkIDcKYm56IGlzZGlzY291bnRleHBpcmVkXzIzX2wyCmludGNfMSAvLyAxCmZyYW1lX2J1cnkgMApiIGlzZGlzY291bnRleHBpcmVkXzIzX2w3CmlzZGlzY291bnRleHBpcmVkXzIzX2wyOgpieXRlY18xIC8vICJiX2QiCmJveF9nZXQKc3RvcmUgOQpzdG9yZSA4CmxvYWQgOQphc3NlcnQKbG9hZCA4CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpwdXNoaW50IDE2IC8vIDE2CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgppbnRjXzAgLy8gMAo9PQpibnogaXNkaXNjb3VudGV4cGlyZWRfMjNfbDYKZnJhbWVfZGlnIDIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAo+CmJueiBpc2Rpc2NvdW50ZXhwaXJlZF8yM19sNQppbnRjXzEgLy8gMQpmcmFtZV9idXJ5IDAKYiBpc2Rpc2NvdW50ZXhwaXJlZF8yM19sNwppc2Rpc2NvdW50ZXhwaXJlZF8yM19sNToKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAwCmIgaXNkaXNjb3VudGV4cGlyZWRfMjNfbDcKaXNkaXNjb3VudGV4cGlyZWRfMjNfbDY6CmludGNfMCAvLyAwCmZyYW1lX2J1cnkgMAppc2Rpc2NvdW50ZXhwaXJlZF8yM19sNzoKcmV0c3ViCgovLyBjcmVhdGVfZGlzY291bnQKY3JlYXRlZGlzY291bnRfMjQ6CnByb3RvIDQgMAppbnRjXzAgLy8gMApkdXBuIDIKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuIFNlbmRlcgpieXRlY18yIC8vICJnc18zIgphcHBfZ2xvYmFsX2dldAo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQppbnRjXzMgLy8gYXBwbAo9PQp8fApibnogY3JlYXRlZGlzY291bnRfMjRfbDEwCmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQppbnRjXzIgLy8gYXhmZXIKPT0KYm56IGNyZWF0ZWRpc2NvdW50XzI0X2wzCmVycgpjcmVhdGVkaXNjb3VudF8yNF9sMzoKZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0Q2xvc2VUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBBc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKY3JlYXRlZGlzY291bnRfMjRfbDQ6CmZyYW1lX2RpZyAtNAppbnRjXzAgLy8gMAo9PQpibnogY3JlYXRlZGlzY291bnRfMjRfbDkKZnJhbWVfZGlnIC0zCmludGNfMCAvLyAwCmNhbGxzdWIgaW5uZXJjb21wdXRlcHJpY2VfMTAKPD0KLy8gRGlzY291bnQgYW1vdW50IGNhbm5vdCBleGNlZWQgYWN0dWFsIHByaWNlCmFzc2VydApjcmVhdGVkaXNjb3VudF8yNF9sNjoKZnJhbWVfZGlnIC0xCmd0eG5zIFNlbmRlcgpieXRlY18yIC8vICJnc18zIgphcHBfZ2xvYmFsX2dldAo9PQovLyBGZWUgdHhuIHNlbnQgYnkgdGhlIG1hbmFnZXIgbXVzdCBiZSBvZiB0aGUgcmlnaHQgYW1vdW50CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQW1vdW50CmludGMgNiAvLyAyMTcwMAo9PQovLyBGZWUgdHhuIHNlbnQgYnkgdGhlIG1hbmFnZXIgbXVzdCBiZSBvZiB0aGUgcmlnaHQgYW1vdW50CmFzc2VydApmcmFtZV9kaWcgLTQKaW50Y18wIC8vIDAKPT0KZnJhbWVfZGlnIC00CmludGNfMSAvLyAxCj09Cnx8Ci8vIERpc2NvdW50IHR5cGUgbXVzdCBiZSBlaXRoZXIgcGVyY2VudGFnZSBvciBhbW91bnQKYXNzZXJ0CmJ5dGVjXzEgLy8gImJfZCIKYm94X2xlbgpzdG9yZSAxMQpzdG9yZSAxMApsb2FkIDExCmludGNfMSAvLyAxCiE9Ci8vIERpc2NvdW50IGFscmVhZHkgZXhpc3RzLCBkZWxldGUgb25lIGZpcnN0CmFzc2VydApnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTIKaW50Y18wIC8vIDAKPgpibnogY3JlYXRlZGlzY291bnRfMjRfbDgKaW50Y18wIC8vIDAKYiBjcmVhdGVkaXNjb3VudF8yNF9sMTEKY3JlYXRlZGlzY291bnRfMjRfbDg6CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAtMgorCmIgY3JlYXRlZGlzY291bnRfMjRfbDExCmNyZWF0ZWRpc2NvdW50XzI0X2w5OgpmcmFtZV9kaWcgLTMKcHVzaGludCAxMDAgLy8gMTAwCjw9Ci8vIFBlcmNlbnRhZ2UgZGlzY291bnQgbXVzdCBiZSA8PSAxMDAKYXNzZXJ0CmIgY3JlYXRlZGlzY291bnRfMjRfbDYKY3JlYXRlZGlzY291bnRfMjRfbDEwOgpmcmFtZV9kaWcgLTEKZ3R4bnMgQ2xvc2VSZW1haW5kZXJUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBQYXltZW50VHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKYiBjcmVhdGVkaXNjb3VudF8yNF9sNApjcmVhdGVkaXNjb3VudF8yNF9sMTE6CmZyYW1lX2J1cnkgMQppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIC00Cml0b2IKZnJhbWVfZGlnIC0zCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxCml0b2IKY29uY2F0CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2J1cnkgMwpieXRlY18xIC8vICJiX2QiCmJveF9kZWwKcG9wCmJ5dGVjXzEgLy8gImJfZCIKZnJhbWVfZGlnIDMKYm94X3B1dApyZXRzdWIKCi8vIGRlbGV0ZV9kaXNjb3VudApkZWxldGVkaXNjb3VudF8yNToKcHJvdG8gMCAwCnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZ3NfMyIKYXBwX2dsb2JhbF9nZXQKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlY18xIC8vICJiX2QiCmJveF9sZW4Kc3RvcmUgMjEKc3RvcmUgMjAKbG9hZCAyMQppbnRjXzEgLy8gMQo9PQovLyBEaXNjb3VudCBkb2VzIG5vdCBleGlzdAphc3NlcnQKaXR4bl9iZWdpbgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIFNlbmRlcgppbnRjXzEgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KdHhuIFNlbmRlcgppdHhuX2ZpZWxkIFJlY2VpdmVyCmludGMgNiAvLyAyMTcwMAppdHhuX2ZpZWxkIEFtb3VudAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApieXRlY18xIC8vICJiX2QiCmJveF9kZWwKcG9wCnJldHN1YgoKLy8gY29tcHV0ZV9wcmljZQpjb21wdXRlcHJpY2VfMjY6CnByb3RvIDEgMQppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTEKY2FsbHN1YiBpbm5lcmNvbXB1dGVwcmljZV8xMApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjcmVhdGVfc3Vic2NyaXB0aW9uCmNyZWF0ZXN1YnNjcmlwdGlvbl8yNzoKcHJvdG8gNiAxCmludGNfMCAvLyAwCmR1cG4gNQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cApmcmFtZV9kaWcgLTMKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQpmcmFtZV9kaWcgLTMKZ3R4bnMgVHlwZUVudW0KaW50Y18zIC8vIGFwcGwKPT0KfHwKYm56IGNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sMjEKZnJhbWVfZGlnIC0zCmd0eG5zIFR5cGVFbnVtCmludGNfMiAvLyBheGZlcgo9PQpibnogY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wzCmVycgpjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDM6CmZyYW1lX2RpZyAtMwpndHhucyBBc3NldENsb3NlVG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIEFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApmcmFtZV9kaWcgLTMKZ3R4bnMgUmVrZXlUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sNDoKZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCmludGNfMyAvLyBhcHBsCj09Cnx8CmJueiBjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDIwCmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQppbnRjXzIgLy8gYXhmZXIKPT0KYm56IGNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sNwplcnIKY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2w3OgpmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRDbG9zZVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBBc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIFJla2V5VG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIEFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDg6CmZyYW1lX2RpZyAtMgpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmZyYW1lX2RpZyAtMgpndHhucyBUeXBlRW51bQppbnRjXzMgLy8gYXBwbAo9PQp8fApibnogY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wxOQpmcmFtZV9kaWcgLTIKZ3R4bnMgVHlwZUVudW0KaW50Y18yIC8vIGF4ZmVyCj09CmJueiBjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDExCmVycgpjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDExOgpmcmFtZV9kaWcgLTIKZ3R4bnMgQXNzZXRDbG9zZVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBBc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKZnJhbWVfZGlnIC0yCmd0eG5zIFJla2V5VG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIEFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDEyOgpieXRlYyA3IC8vICJnc185IgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo9PQovLyBTdWJzY3JpcHRpb24gcHJvZHVjdCBpcyBkaXNhYmxlZAphc3NlcnQKYnl0ZWMgOCAvLyAiZ3NfMTQiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgaW5uZXJjb21wdXRlZXhwaXJhdGlvbl83CmZyYW1lX2J1cnkgMQpieXRlYyAxMiAvLyAiZ3NfOCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfYnVyeSAyCmludGNfMCAvLyAwCmZyYW1lX2J1cnkgMwppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDQKaW50Y18xIC8vIDEKY2FsbHN1YiBpbm5lcmNvbXB1dGVwcmljZV8xMApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIC00CnR4bmFzIEFwcGxpY2F0aW9ucwpieXRlYyA1IC8vICJnc18xMSIKYXBwX2dsb2JhbF9nZXQKPT0KLy8gT1JBQ0xFIElEIG11c3QgbWF0Y2gKYXNzZXJ0CmZyYW1lX2RpZyAtMwpndHhucyBTZW5kZXIKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgo9PQovLyBTdWJzY3JpYmVyIGFjY291bnQgbXVzdCBtYXRjaCBmZWUgYW5kIHBheSB0eG4gc2VuZGVyCmFzc2VydApieXRlYyA1IC8vICJnc18xMSIKYXBwX2dsb2JhbF9nZXQKcHVzaGJ5dGVzIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCmFwcF9nbG9iYWxfZ2V0X2V4CnN0b3JlIDIzCnN0b3JlIDIyCmZyYW1lX2RpZyAtMgpndHhucyBBbW91bnQKYnl0ZWMgNSAvLyAiZ3NfMTEiCmFwcF9nbG9iYWxfZ2V0CnB1c2hpbnQgMTAgLy8gMTAKY2FsbHN1YiBpbm5lcnVzZGlubWljcm9hbGdvXzIKPT0KYnl0ZWMgNiAvLyAiZ3NfNCIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KZnJhbWVfZGlnIC0yCmd0eG5zIEFtb3VudAppbnRjXzAgLy8gMAo9PQomJgp8fAovLyBQbGF0Zm9ybSBmZWUgcGFyYW1zIG1pc21hdGNoCmFzc2VydApmcmFtZV9kaWcgLTIKZ3R4bnMgUmVjZWl2ZXIKbG9hZCAyMgo9PQovLyBQbGF0Zm9ybSBmZWUgcGFyYW1zIG1pc21hdGNoCmFzc2VydApmcmFtZV9kaWcgLTUKdHhuYXMgQXBwbGljYXRpb25zCmJ5dGVjIDE4IC8vICJtYW5hZ2VyIgphcHBfZ2xvYmFsX2dldF9leApzdG9yZSAyNApieXRlY18yIC8vICJnc18zIgphcHBfZ2xvYmFsX2dldAo9PQovLyBMb2NrZXIgZG9lcyBub3QgYmVsb25nIHRvIG1hbmFnZXIgb2YgdGhpcyBQcm9kdWN0CmFzc2VydApmcmFtZV9kaWcgLTUKdHhuYXMgQXBwbGljYXRpb25zCmFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKc3RvcmUgMjYKc3RvcmUgMjUKZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApmcmFtZV9kaWcgNQo9PQomJgpmcmFtZV9kaWcgLTEKZ3R4bnMgUmVjZWl2ZXIKbG9hZCAyNQo9PQomJgpmcmFtZV9kaWcgLTEKZ3R4bnMgVHlwZUVudW0KaW50Y18yIC8vIGF4ZmVyCj09CmZyYW1lX2RpZyAtMQpndHhucyBBc3NldEFtb3VudApmcmFtZV9kaWcgNQo9PQomJgpmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRSZWNlaXZlcgpsb2FkIDI1Cj09CiYmCnx8Ci8vIFN1YnNjcmlwdGlvbiBwYXltZW50IG11c3QgYmUgc2VuZCB0byBsb2NrZXIgd2l0aCByaWdodCBwYXkKYXNzZXJ0CmJ5dGVjIDkgLy8gImdzXzYiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj4KYm56IGNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sMTgKY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wxMzoKZnJhbWVfZGlnIC02CmJveF9sZW4Kc3RvcmUgMjgKc3RvcmUgMjcKbG9hZCAyOApibnogY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wxNQpmcmFtZV9kaWcgLTMKZ3R4bnMgQW1vdW50CmludGMgNyAvLyAzMTMwMAppbnRjIDQgLy8gMTAwMDAwCisKPT0KLy8gRmVlIHR4biBtdXN0IGJlIG9mIHRoZSByaWdodCBhbW91bnQKYXNzZXJ0CmJ5dGVjXzMgLy8gImdzXzUiCmJ5dGVjXzMgLy8gImdzXzUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCisKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4MjMgLy8gIiMiCmJ5dGVjXzMgLy8gImdzXzUiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgaXRvYV8xCmNvbmNhdApwdXNoYnl0ZXMgMHgyZCAvLyAiLSIKY29uY2F0CmJ5dGVjIDEwIC8vICJnc18xMiIKYXBwX2dsb2JhbF9nZXQKY29uY2F0CmJ5dGVjIDEwIC8vICJnc18xMiIKYXBwX2dsb2JhbF9nZXQKYnl0ZWMgMTEgLy8gImdzXzEzIgphcHBfZ2xvYmFsX2dldApjYWxsc3ViIGlubmVyY3JlYXRlYXNzZXRfMwpmcmFtZV9idXJ5IDMKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9idXJ5IDQKYiBjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDIyCmNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sMTU6CmZyYW1lX2RpZyAtMwpndHhucyBBbW91bnQKaW50Y18wIC8vIDAKPT0KLy8gRmVlIHR4biBtdXN0IGJlIG9mIHRoZSByaWdodCBhbW91bnQKYXNzZXJ0CmZyYW1lX2RpZyAtNgpib3hfZ2V0CnN0b3JlIDMwCnN0b3JlIDI5CmxvYWQgMzAKYXNzZXJ0CmxvYWQgMjkKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CnB1c2hpbnQgMjQgLy8gMjQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmludGNfMCAvLyAwCiE9CmJueiBjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDE3CmludGNfMCAvLyAwCnJldHVybgpjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDE3OgpmcmFtZV9kaWcgNwpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCjwKLy8gU3Vic2NyaXB0aW9uIHN0aWxsIGFjdGl2ZQphc3NlcnQKZnJhbWVfZGlnIDYKaW50Y18wIC8vIDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyA2CnB1c2hpbnQgMTYgLy8gMTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmIgY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wyMgpjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDE4OgpieXRlY18zIC8vICJnc181IgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmJ5dGVjIDkgLy8gImdzXzYiCmFwcF9nbG9iYWxfZ2V0Cjw9Ci8vIE1heCBpdGVtcyByZWFjaGVkCmFzc2VydApiIGNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sMTMKY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wxOToKZnJhbWVfZGlnIC0yCmd0eG5zIENsb3NlUmVtYWluZGVyVG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIFBheW1lbnRUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApmcmFtZV9kaWcgLTIKZ3R4bnMgUmVrZXlUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmIgY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wxMgpjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDIwOgpmcmFtZV9kaWcgLTEKZ3R4bnMgQ2xvc2VSZW1haW5kZXJUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWtleVRvCmdsb2JhbCBaZXJvQWRkcmVzcwo9PQovLyBQYXltZW50VHJhbnNhY3Rpb24gaGFzIGluc2VjdXJlIGZpZWxkcwphc3NlcnQKYiBjcmVhdGVzdWJzY3JpcHRpb25fMjdfbDgKY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2wyMToKZnJhbWVfZGlnIC0zCmd0eG5zIENsb3NlUmVtYWluZGVyVG8KZ2xvYmFsIFplcm9BZGRyZXNzCj09Ci8vIFBheW1lbnRUcmFuc2FjdGlvbiBoYXMgaW5zZWN1cmUgZmllbGRzCmFzc2VydApmcmFtZV9kaWcgLTMKZ3R4bnMgUmVrZXlUbwpnbG9iYWwgWmVyb0FkZHJlc3MKPT0KLy8gUGF5bWVudFRyYW5zYWN0aW9uIGhhcyBpbnNlY3VyZSBmaWVsZHMKYXNzZXJ0CmIgY3JlYXRlc3Vic2NyaXB0aW9uXzI3X2w0CmNyZWF0ZXN1YnNjcmlwdGlvbl8yN19sMjI6CmJ5dGVjIDggLy8gImdzXzE0IgphcHBfZ2xvYmFsX2dldApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDIKaXRvYgpmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9kaWcgNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgOAppdG9iCmNvbmNhdApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIC02CmJveF9kZWwKcG9wCmZyYW1lX2RpZyAtNgpmcmFtZV9kaWcgOQpib3hfcHV0CmZyYW1lX2RpZyAzCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGlzX3N1YnNjcmliZXIKaXNzdWJzY3JpYmVyXzI4Ogpwcm90byAxIDEKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTEKYm94X2xlbgpzdG9yZSAzMgpzdG9yZSAzMQpsb2FkIDMyCmJueiBpc3N1YnNjcmliZXJfMjhfbDIKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAwCmIgaXNzdWJzY3JpYmVyXzI4X2w1Cmlzc3Vic2NyaWJlcl8yOF9sMjoKZnJhbWVfZGlnIC0xCmJveF9nZXQKc3RvcmUgMzQKc3RvcmUgMzMKbG9hZCAzNAphc3NlcnQKbG9hZCAzMwpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKcHVzaGludCAyNCAvLyAyNApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDIKaW50Y18wIC8vIDAKPT0KYm56IGlzc3Vic2NyaWJlcl8yOF9sNApmcmFtZV9kaWcgMgpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCj4KZnJhbWVfYnVyeSAwCmIgaXNzdWJzY3JpYmVyXzI4X2w1Cmlzc3Vic2NyaWJlcl8yOF9sNDoKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSAwCmlzc3Vic2NyaWJlcl8yOF9sNToKcmV0c3ViCgovLyBjbGFpbV9zdWJzY3JpcHRpb24KY2xhaW1zdWJzY3JpcHRpb25fMjk6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDM2CnN0b3JlIDM1CmxvYWQgMzYKLy8gU3Vic2NyaWJlciBub3Qgb3B0ZWQtaW4gZm9yIFN1YnNjcmlwdGlvbiBORlQKYXNzZXJ0CmZyYW1lX2RpZyAtMQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwp0eG4gU2VuZGVyCmNhbGxzdWIgaW5uZXJ0cmFuc2ZlcmFzc2V0XzQKcmV0c3ViCgovLyB0cmFuc2Zlcl9zdWJzY3JpcHRpb24KdHJhbnNmZXJzdWJzY3JpcHRpb25fMzA6CnByb3RvIDIgMApieXRlY18wIC8vICIiCnR4biBTZW5kZXIKYm94X2xlbgpzdG9yZSAzOApzdG9yZSAzNwpsb2FkIDM4Ci8vIEN1cnJlbnQgYWRkcmVzcyBub3Qgc3Vic2NyaWJlZAphc3NlcnQKdHhuIFNlbmRlcgpmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA0MApzdG9yZSAzOQpsb2FkIDQwCmxvYWQgMzkKaW50Y18wIC8vIDAKPgomJgpieiB0cmFuc2ZlcnN1YnNjcmlwdGlvbl8zMF9sMgpmcmFtZV9kaWcgLTEKdHhuIFNlbmRlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpjYWxsc3ViIGlubmVydHJhbnNmZXJhc3NldF80CnRyYW5zZmVyc3Vic2NyaXB0aW9uXzMwX2wyOgp0eG4gU2VuZGVyCmJveF9nZXQKc3RvcmUgNDIKc3RvcmUgNDEKbG9hZCA0Mgphc3NlcnQKbG9hZCA0MQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0yCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgMApib3hfcHV0CnR4biBTZW5kZXIKYm94X2RlbApwb3AKcmV0c3ViCgovLyBkZWxldGVfc3Vic2NyaXB0aW9uCmRlbGV0ZXN1YnNjcmlwdGlvbl8zMToKcHJvdG8gMSAxCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKdHhuIFNlbmRlcgpib3hfbGVuCnN0b3JlIDQ1CnN0b3JlIDQ0CmxvYWQgNDUKLy8gTm90IHN1YnNjcmliZWQKYXNzZXJ0CnR4biBTZW5kZXIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgLTEKY2FsbHN1YiBpbm5lcmRlbGV0ZXN1YnNjcmlwdGlvbl82Cml0eG5fYmVnaW4KZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBTZW5kZXIKaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAxCml0eG5fZmllbGQgUmVjZWl2ZXIKaW50YyA3IC8vIDMxMzAwCmludGMgNCAvLyAxMDAwMDAKKwppdHhuX2ZpZWxkIEFtb3VudAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGNyZWF0ZV9jYXN0ZXIKY3JlYXRlY2FzdGVyXzMyOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKaW50Y18wIC8vIDAKZHVwbiAzCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAxCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDQKYnRvaQpmcmFtZV9idXJ5IDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQpidG9pCmZyYW1lX2J1cnkgNAp0eG5hIEFwcGxpY2F0aW9uQXJncyA2CmJ0b2kKZnJhbWVfYnVyeSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDcKYnRvaQpmcmFtZV9idXJ5IDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOApmcmFtZV9idXJ5IDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQpmcmFtZV9idXJ5IDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTAKYnRvaQpmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIDQKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDYKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDgKZnJhbWVfZGlnIDkKY2FsbHN1YiBjcmVhdGVfMTEKcmV0c3ViCgovLyBkZWxldGVfY2FzdGVyCmRlbGV0ZWNhc3Rlcl8zMzoKcHJvdG8gMCAwCmNhbGxzdWIgZGVsZXRlXzE1CnJldHN1YgoKLy8gZ2V0X3ZlcnNpb25fY2FzdGVyCmdldHZlcnNpb25jYXN0ZXJfMzQ6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmNhbGxzdWIgZ2V0dmVyc2lvbl8xNgpmcmFtZV9idXJ5IDAKYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBnZXRfZGlzY291bnRfY2FzdGVyCmdldGRpc2NvdW50Y2FzdGVyXzM1Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpjYWxsc3ViIGdldGRpc2NvdW50XzE3CmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGdldF9zdWJzY3JpcHRpb25fY2FzdGVyCmdldHN1YnNjcmlwdGlvbmNhc3Rlcl8zNjoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgZ2V0c3Vic2NyaXB0aW9uXzE4CmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHVwZGF0ZV9vcmFjbGVfaWRfY2FzdGVyCnVwZGF0ZW9yYWNsZWlkY2FzdGVyXzM3Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIHVwZGF0ZW9yYWNsZWlkXzE5CnJldHN1YgoKLy8gdXBkYXRlX21hbmFnZXJfY2FzdGVyCnVwZGF0ZW1hbmFnZXJjYXN0ZXJfMzg6CnByb3RvIDAgMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdXBkYXRlbWFuYWdlcl8yMApyZXRzdWIKCi8vIHVwZGF0ZV9wcmljZV9jYXN0ZXIKdXBkYXRlcHJpY2VjYXN0ZXJfMzk6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdXBkYXRlcHJpY2VfMjEKcmV0c3ViCgovLyB1cGRhdGVfbGlmZWN5Y2xlX2Nhc3Rlcgp1cGRhdGVsaWZlY3ljbGVjYXN0ZXJfNDA6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdXBkYXRlbGlmZWN5Y2xlXzIyCnJldHN1YgoKLy8gaXNfZGlzY291bnRfZXhwaXJlZF9jYXN0ZXIKaXNkaXNjb3VudGV4cGlyZWRjYXN0ZXJfNDE6CnByb3RvIDAgMAppbnRjXzAgLy8gMApjYWxsc3ViIGlzZGlzY291bnRleHBpcmVkXzIzCmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKaXRvYgpjb25jYXQKbG9nCnJldHN1YgoKLy8gY3JlYXRlX2Rpc2NvdW50X2Nhc3RlcgpjcmVhdGVkaXNjb3VudGNhc3Rlcl80MjoKcHJvdG8gMCAwCmludGNfMCAvLyAwCmR1cG4gMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKYnRvaQpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpidG9pCmZyYW1lX2J1cnkgMgp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMwpjYWxsc3ViIGNyZWF0ZWRpc2NvdW50XzI0CnJldHN1YgoKLy8gZGVsZXRlX2Rpc2NvdW50X2Nhc3RlcgpkZWxldGVkaXNjb3VudGNhc3Rlcl80MzoKcHJvdG8gMCAwCmNhbGxzdWIgZGVsZXRlZGlzY291bnRfMjUKcmV0c3ViCgovLyBjb21wdXRlX3ByaWNlX2Nhc3Rlcgpjb21wdXRlcHJpY2VjYXN0ZXJfNDQ6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApwdXNoaW50IDggLy8gOAoqCmdldGJpdApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBjb21wdXRlcHJpY2VfMjYKZnJhbWVfYnVyeSAwCmJ5dGVjIDQgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMAppdG9iCmNvbmNhdApsb2cKcmV0c3ViCgovLyBjcmVhdGVfc3Vic2NyaXB0aW9uX2Nhc3RlcgpjcmVhdGVzdWJzY3JpcHRpb25jYXN0ZXJfNDU6CnByb3RvIDAgMAppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gNAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDMKdHhuIEdyb3VwSW5kZXgKcHVzaGludCAzIC8vIDMKLQpmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDQKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKdHhuIEdyb3VwSW5kZXgKcHVzaGludCAyIC8vIDIKLQpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIDQKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDYKY2FsbHN1YiBjcmVhdGVzdWJzY3JpcHRpb25fMjcKZnJhbWVfYnVyeSAwCmJ5dGVjIDQgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMAppdG9iCmNvbmNhdApsb2cKcmV0c3ViCgovLyBpc19zdWJzY3JpYmVyX2Nhc3Rlcgppc3N1YnNjcmliZXJjYXN0ZXJfNDY6CnByb3RvIDAgMAppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgaXNzdWJzY3JpYmVyXzI4CmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKaXRvYgpjb25jYXQKbG9nCnJldHN1YgoKLy8gY2xhaW1fc3Vic2NyaXB0aW9uX2Nhc3RlcgpjbGFpbXN1YnNjcmlwdGlvbmNhc3Rlcl80NzoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBjbGFpbXN1YnNjcmlwdGlvbl8yOQpyZXRzdWIKCi8vIHRyYW5zZmVyX3N1YnNjcmlwdGlvbl9jYXN0ZXIKdHJhbnNmZXJzdWJzY3JpcHRpb25jYXN0ZXJfNDg6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKY2FsbHN1YiB0cmFuc2ZlcnN1YnNjcmlwdGlvbl8zMApyZXRzdWIKCi8vIGRlbGV0ZV9zdWJzY3JpcHRpb25fY2FzdGVyCmRlbGV0ZXN1YnNjcmlwdGlvbmNhc3Rlcl80OToKcHJvdG8gMCAwCmludGNfMCAvLyAwCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgZGVsZXRlc3Vic2NyaXB0aW9uXzMxCmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKaXRvYgpjb25jYXQKbG9nCnJldHN1Yg==",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu",
  },
  state: {
    global: {
      num_byte_slices: 7,
      num_uints: 9,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        coin_id: {
          type: "uint64",
          key: "gs_7",
          descr: "ASA ID of the subscription, default is ALGO",
        },
        created_at: {
          type: "uint64",
          key: "gs_10",
          descr: "Timestamp of the subscription service creation",
        },
        duration: {
          type: "uint64",
          key: "gs_14",
          descr: "Duration of the subscription in seconds",
        },
        extra_slot_1: {
          type: "bytes",
          key: "gs_15",
          descr: "Reserved extra slot",
        },
        extra_slot_2: {
          type: "bytes",
          key: "gs_16",
          descr: "Reserved extra slot",
        },
        image_url: {
          type: "bytes",
          key: "gs_13",
          descr: "Image URL of the subscription NFT",
        },
        lifecycle: {
          type: "uint64",
          key: "gs_9",
          descr: "Lifecycle state of the subscription service",
        },
        manager: {
          type: "bytes",
          key: "gs_3",
          descr: "Address of the manager of the subscription",
        },
        max_subscribers: {
          type: "uint64",
          key: "gs_6",
          descr: "Max subscriptions to be sold",
        },
        oracle_id: {
          type: "uint64",
          key: "gs_11",
          descr: "ID of Subtopia Admin Oracle contract",
        },
        price: {
          type: "uint64",
          key: "gs_4",
          descr: "Price of the subscription",
        },
        product_name: {
          type: "bytes",
          key: "gs_1",
          descr: "Name of the product providing subscription",
        },
        product_type: {
          type: "uint64",
          key: "gs_8",
          descr: "Type of the subscription",
        },
        subscription_name: {
          type: "bytes",
          key: "gs_2",
          descr: "Name of the service providing subscription",
        },
        total_subscribers: {
          type: "uint64",
          key: "gs_5",
          descr: "Total subscriptions sold",
        },
        unit_name: {
          type: "bytes",
          key: "gs_12",
          descr: "Unit name of the subscription NFT",
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "TokenBasedProduct",
    methods: [
      {
        name: "create",
        args: [
          {
            type: "string",
            name: "product_name",
            desc: "The title of the product offering subscription.",
          },
          {
            type: "string",
            name: "subscription_name",
            desc: "The title of product's subscription, for ex Plus, Pro, etc.",
          },
          {
            type: "address",
            name: "manager",
            desc: "The address of the manager of the subscription service.",
          },
          {
            type: "uint64",
            name: "price",
            desc: "The price of the subscription service.",
          },
          {
            type: "uint64",
            name: "max_subscribers",
            desc: "The maximum number of subscriptions to be sold.",
          },
          {
            type: "uint64",
            name: "coin_id",
            desc: "The ASA ID of the subscription service.",
          },
          {
            type: "uint64",
            name: "oracle_id",
            desc: "The ID of the Subtopia Price Oracle contract.",
          },
          {
            type: "string",
            name: "unit_name",
          },
          {
            type: "string",
            name: "image_url",
          },
          {
            type: "uint64",
            name: "duration",
            desc: "The duration of the subscription service.",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Creates a new instance of the subscription service with the provided parameters.",
      },
      {
        name: "delete",
        args: [],
        returns: {
          type: "void",
        },
        desc: "Deletes the subscription service. Can only be called by the manager account\nwhen there are no active subscriptions or the lifecycle state is not active.",
      },
      {
        name: "get_version",
        args: [],
        returns: {
          type: "string",
        },
      },
      {
        name: "get_discount",
        args: [],
        returns: {
          type: "(uint64,uint64,uint64,uint64,uint64)",
          desc: "An expression that returns the discount.",
        },
        desc: "Returns the discount if exists.",
      },
      {
        name: "get_subscription",
        args: [
          {
            type: "address",
            name: "subscriber",
            desc: "The subscriber address.",
          },
        ],
        returns: {
          type: "(uint64,uint64,uint64,uint64,uint64)",
          desc: "An expression that retrieves the subscription details.",
        },
        desc: "Retrieves the subscription details of a given subscriber.",
      },
      {
        name: "update_oracle_id",
        args: [
          {
            type: "application",
            name: "new_oracle",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Updates the ORACLE (Subtopia Price Oracle) application ID.\nArs: new_oracle (abi.Application): The new ORACLE application ID.",
      },
      {
        name: "update_manager",
        args: [
          {
            type: "address",
            name: "new_manager_account",
            desc: "The new manager account address.",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Updates the manager account of the subscription service.",
      },
      {
        name: "update_price",
        args: [
          {
            type: "uint64",
            name: "new_price",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Updates the price of the subscription service.",
      },
      {
        name: "update_lifecycle",
        args: [
          {
            type: "uint64",
            name: "lifecycle_state",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.",
      },
      {
        name: "is_discount_expired",
        args: [],
        returns: {
          type: "uint64",
          desc: "An expression that checks if the discount is expired.",
        },
        desc: "Checks if the discount for the specified duration is expired.",
      },
      {
        name: "create_discount",
        args: [
          {
            type: "uint64",
            name: "discount_type",
            desc: "The type of discount (percentage or amount).",
          },
          {
            type: "uint64",
            name: "discount_value",
            desc: "The discount value in micro ALGOs.",
          },
          {
            type: "uint64",
            name: "expires_in",
            desc: "The number of seconds to append to creation date",
          },
          {
            type: "pay",
            name: "fee_txn",
            desc: "The transaction fee.",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Creates a new discount for the subscription service.",
      },
      {
        name: "delete_discount",
        args: [],
        returns: {
          type: "void",
        },
        desc: "Deletes a discount for the subscription service.",
      },
      {
        name: "compute_price",
        args: [
          {
            type: "bool",
            name: "with_discount",
            desc: "Whether to apply a discount or not.",
          },
        ],
        returns: {
          type: "uint64",
          desc: "An expression that computes the price of the subscription.",
        },
        desc: "Computes the price of the subscription for the given duration.",
      },
      {
        name: "create_subscription",
        args: [
          {
            type: "address",
            name: "subscriber",
            desc: "The subscriber's address.",
          },
          {
            type: "application",
            name: "creator_locker",
            desc: "The locker of creator",
          },
          {
            type: "application",
            name: "oracle_id",
            desc: "The oracle app used.",
          },
          {
            type: "pay",
            name: "fee_txn",
            desc: "The transaction fee paid to the app.",
          },
          {
            type: "pay",
            name: "platform_fee_txn",
            desc: "The platform fee paid.",
          },
          {
            type: "txn",
            name: "pay_txn",
            desc: "The payment transaction to fund the subscription.",
          },
        ],
        returns: {
          type: "uint64",
          desc: "An expression that subscribes the user and creates a new subscription.",
        },
        desc: "Subscribes a user to the subscription service and creates a new\nsubscription.",
      },
      {
        name: "is_subscriber",
        args: [
          {
            type: "address",
            name: "subscriber",
            desc: "The subscriber address.",
          },
        ],
        returns: {
          type: "uint64",
          desc: "An expression that checks if the address is a subscriber.",
        },
        desc: "Checks if a given address is a subscriber of the subscription service.",
      },
      {
        name: "claim_subscription",
        args: [
          {
            type: "asset",
            name: "subscription",
            desc: "The subscription asset.",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Allows a subscriber to claim their subscription.",
      },
      {
        name: "transfer_subscription",
        args: [
          {
            type: "address",
            name: "new_subscriber",
            desc: "The new address to transfer the subscription to.",
          },
          {
            type: "asset",
            name: "subscription",
            desc: "The subscription asset.",
          },
        ],
        returns: {
          type: "void",
        },
        desc: "Transfers a subscription from the sender's address to a new address.",
      },
      {
        name: "delete_subscription",
        args: [
          {
            type: "asset",
            name: "subscription",
            desc: "The subscription ASA ID.",
          },
        ],
        returns: {
          type: "uint64",
          desc: "An expression that unsubscribes the user and deletes the subscription.",
        },
        desc: "Unsubscribes a user from the subscription service and deletes the\nsubscription.",
      },
    ],
    networks: {},
  },
  bare_call_config: {
    close_out: "CALL",
    opt_in: "CALL",
    update_application: "CALL",
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the TokenBasedProduct smart contract.
 */
export type TokenBasedProduct = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    | "create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void"
    | "create",
    {
      argsObj: {
        /**
         * The title of the product offering subscription.
         */
        product_name: string;
        /**
         * The title of product's subscription, for ex Plus, Pro, etc.
         */
        subscription_name: string;
        /**
         * The address of the manager of the subscription service.
         */
        manager: string;
        /**
         * The price of the subscription service.
         */
        price: bigint | number;
        /**
         * The maximum number of subscriptions to be sold.
         */
        max_subscribers: bigint | number;
        /**
         * The ASA ID of the subscription service.
         */
        coin_id: bigint | number;
        /**
         * The ID of the Subtopia Price Oracle contract.
         */
        oracle_id: bigint | number;
        unit_name: string;
        image_url: string;
        /**
         * The duration of the subscription service.
         */
        duration: bigint | number;
      };
      argsTuple: [
        product_name: string,
        subscription_name: string,
        manager: string,
        price: bigint | number,
        max_subscribers: bigint | number,
        coin_id: bigint | number,
        oracle_id: bigint | number,
        unit_name: string,
        image_url: string,
        duration: bigint | number
      ];
      returns: void;
    }
  > &
    Record<
      "delete()void" | "delete",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "get_version()string" | "get_version",
      {
        argsObj: {};
        argsTuple: [];
        returns: string;
      }
    > &
    Record<
      "get_discount()(uint64,uint64,uint64,uint64,uint64)" | "get_discount",
      {
        argsObj: {};
        argsTuple: [];
        /**
         * An expression that returns the discount.
         */
        returns: Discount;
      }
    > &
    Record<
      | "get_subscription(address)(uint64,uint64,uint64,uint64,uint64)"
      | "get_subscription",
      {
        argsObj: {
          /**
           * The subscriber address.
           */
          subscriber: string;
        };
        argsTuple: [subscriber: string];
        /**
         * An expression that retrieves the subscription details.
         */
        returns: Subscription;
      }
    > &
    Record<
      "update_oracle_id(application)void" | "update_oracle_id",
      {
        argsObj: {
          new_oracle: number | bigint;
        };
        argsTuple: [new_oracle: number | bigint];
        returns: void;
      }
    > &
    Record<
      "update_manager(address)void" | "update_manager",
      {
        argsObj: {
          /**
           * The new manager account address.
           */
          new_manager_account: string;
        };
        argsTuple: [new_manager_account: string];
        returns: void;
      }
    > &
    Record<
      "update_price(uint64)void" | "update_price",
      {
        argsObj: {
          new_price: bigint | number;
        };
        argsTuple: [new_price: bigint | number];
        returns: void;
      }
    > &
    Record<
      "update_lifecycle(uint64)void" | "update_lifecycle",
      {
        argsObj: {
          lifecycle_state: bigint | number;
        };
        argsTuple: [lifecycle_state: bigint | number];
        returns: void;
      }
    > &
    Record<
      "is_discount_expired()uint64" | "is_discount_expired",
      {
        argsObj: {};
        argsTuple: [];
        /**
         * An expression that checks if the discount is expired.
         */
        returns: bigint;
      }
    > &
    Record<
      "create_discount(uint64,uint64,uint64,pay)void" | "create_discount",
      {
        argsObj: {
          /**
           * The type of discount (percentage or amount).
           */
          discount_type: bigint | number;
          /**
           * The discount value in micro ALGOs.
           */
          discount_value: bigint | number;
          /**
           * The number of seconds to append to creation date
           */
          expires_in: bigint | number;
          /**
           * The transaction fee.
           */
          fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          discount_type: bigint | number,
          discount_value: bigint | number,
          expires_in: bigint | number,
          fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    > &
    Record<
      "delete_discount()void" | "delete_discount",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "compute_price(bool)uint64" | "compute_price",
      {
        argsObj: {
          /**
           * Whether to apply a discount or not.
           */
          with_discount: boolean;
        };
        argsTuple: [with_discount: boolean];
        /**
         * An expression that computes the price of the subscription.
         */
        returns: bigint;
      }
    > &
    Record<
      | "create_subscription(address,application,application,pay,pay,txn)uint64"
      | "create_subscription",
      {
        argsObj: {
          /**
           * The subscriber's address.
           */
          subscriber: string;
          /**
           * The locker of creator
           */
          creator_locker: number | bigint;
          /**
           * The oracle app used.
           */
          oracle_id: number | bigint;
          /**
           * The transaction fee paid to the app.
           */
          fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * The platform fee paid.
           */
          platform_fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * The payment transaction to fund the subscription.
           */
          pay_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          subscriber: string,
          creator_locker: number | bigint,
          oracle_id: number | bigint,
          fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          platform_fee_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          pay_txn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        /**
         * An expression that subscribes the user and creates a new subscription.
         */
        returns: bigint;
      }
    > &
    Record<
      "is_subscriber(address)uint64" | "is_subscriber",
      {
        argsObj: {
          /**
           * The subscriber address.
           */
          subscriber: string;
        };
        argsTuple: [subscriber: string];
        /**
         * An expression that checks if the address is a subscriber.
         */
        returns: bigint;
      }
    > &
    Record<
      "claim_subscription(asset)void" | "claim_subscription",
      {
        argsObj: {
          /**
           * The subscription asset.
           */
          subscription: number | bigint;
        };
        argsTuple: [subscription: number | bigint];
        returns: void;
      }
    > &
    Record<
      "transfer_subscription(address,asset)void" | "transfer_subscription",
      {
        argsObj: {
          /**
           * The new address to transfer the subscription to.
           */
          new_subscriber: string;
          /**
           * The subscription asset.
           */
          subscription: number | bigint;
        };
        argsTuple: [new_subscriber: string, subscription: number | bigint];
        returns: void;
      }
    > &
    Record<
      "delete_subscription(asset)uint64" | "delete_subscription",
      {
        argsObj: {
          /**
           * The subscription ASA ID.
           */
          subscription: number | bigint;
        };
        argsTuple: [subscription: number | bigint];
        /**
         * An expression that unsubscribes the user and deletes the subscription.
         */
        returns: bigint;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * ASA ID of the subscription, default is ALGO
       */
      gs_7?: IntegerState;
      /**
       * Timestamp of the subscription service creation
       */
      gs_10?: IntegerState;
      /**
       * Duration of the subscription in seconds
       */
      gs_14?: IntegerState;
      /**
       * Reserved extra slot
       */
      gs_15?: BinaryState;
      /**
       * Reserved extra slot
       */
      gs_16?: BinaryState;
      /**
       * Image URL of the subscription NFT
       */
      gs_13?: BinaryState;
      /**
       * Lifecycle state of the subscription service
       */
      gs_9?: IntegerState;
      /**
       * Address of the manager of the subscription
       */
      gs_3?: BinaryState;
      /**
       * Max subscriptions to be sold
       */
      gs_6?: IntegerState;
      /**
       * ID of Subtopia Admin Oracle contract
       */
      gs_11?: IntegerState;
      /**
       * Price of the subscription
       */
      gs_4?: IntegerState;
      /**
       * Name of the product providing subscription
       */
      gs_1?: BinaryState;
      /**
       * Type of the subscription
       */
      gs_8?: IntegerState;
      /**
       * Name of the service providing subscription
       */
      gs_2?: BinaryState;
      /**
       * Total subscriptions sold
       */
      gs_5?: IntegerState;
      /**
       * Unit name of the subscription NFT
       */
      gs_12?: BinaryState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type TokenBasedProductSig = keyof TokenBasedProduct["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<
  TSignature extends TokenBasedProductSig | undefined
> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Represents a Discount result as a struct
 */
export type Discount = {
  discount_type: bigint;
  discount_value: bigint;
  expires_at: bigint;
  created_at: bigint;
  total_claims: bigint;
};
/**
 * Converts the tuple representation of a Discount to the struct representation
 */
export function Discount([
  discount_type,
  discount_value,
  expires_at,
  created_at,
  total_claims,
]: [bigint, bigint, bigint, bigint, bigint]) {
  return {
    discount_type,
    discount_value,
    expires_at,
    created_at,
    total_claims,
  };
}
/**
 * Represents a Subscription result as a struct
 */
export type Subscription = {
  subscription_id: bigint;
  product_type: bigint;
  created_at: bigint;
  expires_at: bigint;
  duration: bigint;
};
/**
 * Converts the tuple representation of a Subscription to the struct representation
 */
export function Subscription([
  subscription_id,
  product_type,
  created_at,
  expires_at,
  duration,
]: [bigint, bigint, bigint, bigint, bigint]) {
  return {
    subscription_id,
    product_type,
    created_at,
    expires_at,
    duration,
  };
}
/**
 * Maps a method signature from the TokenBasedProduct smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TokenBasedProductSig> =
  TokenBasedProduct["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the TokenBasedProduct smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenBasedProductSig> =
  TokenBasedProduct["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type TokenBasedProductCreateCalls =
  (typeof TokenBasedProductCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type TokenBasedProductCreateCallParams =
  | TypedCallParams<"create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void"> &
      OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type TokenBasedProductUpdateCalls =
  (typeof TokenBasedProductCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type TokenBasedProductUpdateCallParams = TypedCallParams<undefined>;
/**
 * A factory for available 'delete' calls
 */
export type TokenBasedProductDeleteCalls =
  (typeof TokenBasedProductCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type TokenBasedProductDeleteCallParams = TypedCallParams<"delete()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type TokenBasedProductDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: TokenBasedProductCreateCalls
  ) => TokenBasedProductCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (
    callFactory: TokenBasedProductUpdateCalls
  ) => TokenBasedProductUpdateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (
    callFactory: TokenBasedProductDeleteCalls
  ) => TokenBasedProductDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TokenBasedProductCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the TokenBasedProduct smart contract using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(
        args: MethodArgs<"create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method:
            "create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void" as const,
          methodArgs: Array.isArray(args)
            ? args
            : [
                args.product_name,
                args.subscription_name,
                args.manager,
                args.price,
                args.max_subscribers,
                args.coin_id,
                args.oracle_id,
                args.unit_name,
                args.image_url,
                args.duration,
              ],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the TokenBasedProduct smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs &
          AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams = {}
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the TokenBasedProduct smart contract using the delete()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(
        args: MethodArgs<"delete()void">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: "delete()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the TokenBasedProduct smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the TokenBasedProduct smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVersion(
    args: MethodArgs<"get_version()string">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "get_version()string" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the get_discount()(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the discount if exists.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDiscount(
    args: MethodArgs<"get_discount()(uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "get_discount()(uint64,uint64,uint64,uint64,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSubscription(
    args: MethodArgs<"get_subscription(address)(uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "get_subscription(address)(uint64,uint64,uint64,uint64,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [args.subscriber],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_oracle_id(application)void ABI method
   *
   * Updates the ORACLE (Subtopia Price Oracle) application ID.
Ars: new_oracle (abi.Application): The new ORACLE application ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateOracleId(
    args: MethodArgs<"update_oracle_id(application)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "update_oracle_id(application)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.new_oracle],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_manager(address)void ABI method
   *
   * Updates the manager account of the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateManager(
    args: MethodArgs<"update_manager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "update_manager(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.new_manager_account],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_price(uint64)void ABI method
   *
   * Updates the price of the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePrice(
    args: MethodArgs<"update_price(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "update_price(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.new_price],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_lifecycle(uint64)void ABI method
   *
   * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateLifecycle(
    args: MethodArgs<"update_lifecycle(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "update_lifecycle(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.lifecycle_state],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the is_discount_expired()uint64 ABI method
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isDiscountExpired(
    args: MethodArgs<"is_discount_expired()uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "is_discount_expired()uint64" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the create_discount(uint64,uint64,uint64,pay)void ABI method
   *
   * Creates a new discount for the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createDiscount(
    args: MethodArgs<"create_discount(uint64,uint64,uint64,pay)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "create_discount(uint64,uint64,uint64,pay)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.discount_type,
            args.discount_value,
            args.expires_in,
            args.fee_txn,
          ],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the delete_discount()void ABI method
   *
   * Deletes a discount for the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteDiscount(
    args: MethodArgs<"delete_discount()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "delete_discount()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the compute_price(bool)uint64 ABI method
   *
   * Computes the price of the subscription for the given duration.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computePrice(
    args: MethodArgs<"compute_price(bool)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "compute_price(bool)uint64" as const,
      methodArgs: Array.isArray(args) ? args : [args.with_discount],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the create_subscription(address,application,application,pay,pay,txn)uint64 ABI method
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSubscription(
    args: MethodArgs<"create_subscription(address,application,application,pay,pay,txn)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "create_subscription(address,application,application,pay,pay,txn)uint64" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.subscriber,
            args.creator_locker,
            args.oracle_id,
            args.fee_txn,
            args.platform_fee_txn,
            args.pay_txn,
          ],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the is_subscriber(address)uint64 ABI method
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isSubscriber(
    args: MethodArgs<"is_subscriber(address)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "is_subscriber(address)uint64" as const,
      methodArgs: Array.isArray(args) ? args : [args.subscriber],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the claim_subscription(asset)void ABI method
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimSubscription(
    args: MethodArgs<"claim_subscription(asset)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "claim_subscription(asset)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.subscription],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the transfer_subscription(address,asset)void ABI method
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferSubscription(
    args: MethodArgs<"transfer_subscription(address,asset)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "transfer_subscription(address,asset)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.new_subscriber, args.subscription],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the delete_subscription(asset)uint64 ABI method
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteSubscription(
    args: MethodArgs<"delete_subscription(asset)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "delete_subscription(asset)uint64" as const,
      methodArgs: Array.isArray(args) ? args : [args.subscription],
      ...params,
    };
  }
}

/**
 * A client to make calls to the TokenBasedProduct smart contract
 */
export class TokenBasedProductClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `TokenBasedProductClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TokenBasedProduct["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the TokenBasedProduct smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: TokenBasedProductDeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(TokenBasedProductCallFactory.create);
    const updateArgs = params.updateCall?.(TokenBasedProductCallFactory.update);
    const deleteArgs = params.deleteCall?.(TokenBasedProductCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the TokenBasedProduct smart contract using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(
        args: MethodArgs<"create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ): Promise<
        AppCallTransactionResultOfType<
          MethodReturn<"create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void">
        >
      > {
        return $this.mapReturnValue(
          await $this.appClient.create(
            TokenBasedProductCallFactory.create.create(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(
        args: BareCallArgs &
          AppClientCallCoreParams &
          AppClientCompilationParams &
          CoreAppCallArgs = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the TokenBasedProduct smart contract using the delete()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(
        args: MethodArgs<"delete()void">,
        params: AppClientCallCoreParams = {}
      ): Promise<AppCallTransactionResultOfType<MethodReturn<"delete()void">>> {
        return $this.mapReturnValue(
          await $this.appClient.delete(
            TokenBasedProductCallFactory.delete.delete(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this;
    return {
      /**
       * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(
        args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this;
    return {
      /**
       * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The closeOut result
       */
      bare(
        args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.closeOut(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVersion(
    args: MethodArgs<"get_version()string">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.getVersion(args, params));
  }

  /**
   * Calls the get_discount()(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the discount if exists.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that returns the discount.
   */
  public getDiscount(
    args: MethodArgs<"get_discount()(uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.getDiscount(args, params),
      Discount
    );
  }

  /**
   * Calls the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that retrieves the subscription details.
   */
  public getSubscription(
    args: MethodArgs<"get_subscription(address)(uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.getSubscription(args, params),
      Subscription
    );
  }

  /**
   * Calls the update_oracle_id(application)void ABI method.
   *
   * Updates the ORACLE (Subtopia Price Oracle) application ID.
Ars: new_oracle (abi.Application): The new ORACLE application ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateOracleId(
    args: MethodArgs<"update_oracle_id(application)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.updateOracleId(args, params));
  }

  /**
   * Calls the update_manager(address)void ABI method.
   *
   * Updates the manager account of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateManager(
    args: MethodArgs<"update_manager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.updateManager(args, params));
  }

  /**
   * Calls the update_price(uint64)void ABI method.
   *
   * Updates the price of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePrice(
    args: MethodArgs<"update_price(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.updatePrice(args, params));
  }

  /**
   * Calls the update_lifecycle(uint64)void ABI method.
   *
   * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateLifecycle(
    args: MethodArgs<"update_lifecycle(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.updateLifecycle(args, params)
    );
  }

  /**
   * Calls the is_discount_expired()uint64 ABI method.
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that checks if the discount is expired.
   */
  public isDiscountExpired(
    args: MethodArgs<"is_discount_expired()uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.isDiscountExpired(args, params)
    );
  }

  /**
   * Calls the create_discount(uint64,uint64,uint64,pay)void ABI method.
   *
   * Creates a new discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createDiscount(
    args: MethodArgs<"create_discount(uint64,uint64,uint64,pay)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.createDiscount(args, params));
  }

  /**
   * Calls the delete_discount()void ABI method.
   *
   * Deletes a discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteDiscount(
    args: MethodArgs<"delete_discount()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.deleteDiscount(args, params));
  }

  /**
   * Calls the compute_price(bool)uint64 ABI method.
   *
   * Computes the price of the subscription for the given duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that computes the price of the subscription.
   */
  public computePrice(
    args: MethodArgs<"compute_price(bool)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.computePrice(args, params));
  }

  /**
   * Calls the create_subscription(address,application,application,pay,pay,txn)uint64 ABI method.
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that subscribes the user and creates a new subscription.
   */
  public createSubscription(
    args: MethodArgs<"create_subscription(address,application,application,pay,pay,txn)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.createSubscription(args, params)
    );
  }

  /**
   * Calls the is_subscriber(address)uint64 ABI method.
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that checks if the address is a subscriber.
   */
  public isSubscriber(
    args: MethodArgs<"is_subscriber(address)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(TokenBasedProductCallFactory.isSubscriber(args, params));
  }

  /**
   * Calls the claim_subscription(asset)void ABI method.
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimSubscription(
    args: MethodArgs<"claim_subscription(asset)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.claimSubscription(args, params)
    );
  }

  /**
   * Calls the transfer_subscription(address,asset)void ABI method.
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferSubscription(
    args: MethodArgs<"transfer_subscription(address,asset)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.transferSubscription(args, params)
    );
  }

  /**
   * Calls the delete_subscription(asset)uint64 ABI method.
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An expression that unsubscribes the user and deletes the subscription.
   */
  public deleteSubscription(
    args: MethodArgs<"delete_subscription(asset)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      TokenBasedProductCallFactory.deleteSubscription(args, params)
    );
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TokenBasedProduct["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get gs_7() {
        return TokenBasedProductClient.getIntegerState(state, "gs_7");
      },
      get gs_10() {
        return TokenBasedProductClient.getIntegerState(state, "gs_10");
      },
      get gs_14() {
        return TokenBasedProductClient.getIntegerState(state, "gs_14");
      },
      get gs_15() {
        return TokenBasedProductClient.getBinaryState(state, "gs_15");
      },
      get gs_16() {
        return TokenBasedProductClient.getBinaryState(state, "gs_16");
      },
      get gs_13() {
        return TokenBasedProductClient.getBinaryState(state, "gs_13");
      },
      get gs_9() {
        return TokenBasedProductClient.getIntegerState(state, "gs_9");
      },
      get gs_3() {
        return TokenBasedProductClient.getBinaryState(state, "gs_3");
      },
      get gs_6() {
        return TokenBasedProductClient.getIntegerState(state, "gs_6");
      },
      get gs_11() {
        return TokenBasedProductClient.getIntegerState(state, "gs_11");
      },
      get gs_4() {
        return TokenBasedProductClient.getIntegerState(state, "gs_4");
      },
      get gs_1() {
        return TokenBasedProductClient.getBinaryState(state, "gs_1");
      },
      get gs_8() {
        return TokenBasedProductClient.getIntegerState(state, "gs_8");
      },
      get gs_2() {
        return TokenBasedProductClient.getBinaryState(state, "gs_2");
      },
      get gs_5() {
        return TokenBasedProductClient.getIntegerState(state, "gs_5");
      },
      get gs_12() {
        return TokenBasedProductClient.getBinaryState(state, "gs_12");
      },
    };
  }

  public compose(): TokenBasedProductComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      getVersion(
        args: MethodArgs<"get_version()string">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getVersion(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getDiscount(
        args: MethodArgs<"get_discount()(uint64,uint64,uint64,uint64,uint64)">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getDiscount(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(Discount);
        return this;
      },
      getSubscription(
        args: MethodArgs<"get_subscription(address)(uint64,uint64,uint64,uint64,uint64)">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getSubscription(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(Subscription);
        return this;
      },
      updateOracleId(
        args: MethodArgs<"update_oracle_id(application)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateOracleId(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      updateManager(
        args: MethodArgs<"update_manager(address)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      updatePrice(
        args: MethodArgs<"update_price(uint64)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updatePrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      updateLifecycle(
        args: MethodArgs<"update_lifecycle(uint64)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateLifecycle(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      isDiscountExpired(
        args: MethodArgs<"is_discount_expired()uint64">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.isDiscountExpired(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      createDiscount(
        args: MethodArgs<"create_discount(uint64,uint64,uint64,pay)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.createDiscount(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      deleteDiscount(
        args: MethodArgs<"delete_discount()void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.deleteDiscount(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      computePrice(
        args: MethodArgs<"compute_price(bool)uint64">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.computePrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      createSubscription(
        args: MethodArgs<"create_subscription(address,application,application,pay,pay,txn)uint64">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.createSubscription(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      isSubscriber(
        args: MethodArgs<"is_subscriber(address)uint64">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.isSubscriber(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      claimSubscription(
        args: MethodArgs<"claim_subscription(asset)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.claimSubscription(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      transferSubscription(
        args: MethodArgs<"transfer_subscription(address,asset)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.transferSubscription(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      deleteSubscription(
        args: MethodArgs<"delete_subscription(asset)uint64">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.deleteSubscription(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get update() {
        const $this = this;
        return {
          bare(
            args?: BareCallArgs &
              AppClientCallCoreParams &
              AppClientCompilationParams &
              CoreAppCallArgs
          ) {
            promiseChain = promiseChain.then(() =>
              client.update.bare({
                ...args,
                sendParams: { ...args?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get delete() {
        const $this = this;
        return {
          delete(
            args: MethodArgs<"delete()void">,
            params?: AppClientCallCoreParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.delete(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get optIn() {
        const $this = this;
        return {
          bare(
            args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
          ) {
            promiseChain = promiseChain.then(() =>
              client.optIn.bare({
                ...args,
                sendParams: { ...args?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get closeOut() {
        const $this = this;
        return {
          bare(
            args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
          ) {
            promiseChain = promiseChain.then(() =>
              client.closeOut.bare({
                ...args,
                sendParams: { ...args?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate() {
        await promiseChain;
        const result = await atc.simulate(client.algod);
        return result;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as TokenBasedProductComposer;
  }
}
export type TokenBasedProductComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(
    args: MethodArgs<"get_version()string">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"get_version()string">]
  >;

  /**
   * Calls the get_discount()(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the discount if exists.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDiscount(
    args: MethodArgs<"get_discount()(uint64,uint64,uint64,uint64,uint64)">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [
      ...TReturns,
      MethodReturn<"get_discount()(uint64,uint64,uint64,uint64,uint64)">
    ]
  >;

  /**
   * Calls the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSubscription(
    args: MethodArgs<"get_subscription(address)(uint64,uint64,uint64,uint64,uint64)">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [
      ...TReturns,
      MethodReturn<"get_subscription(address)(uint64,uint64,uint64,uint64,uint64)">
    ]
  >;

  /**
   * Calls the update_oracle_id(application)void ABI method.
   *
   * Updates the ORACLE (Subtopia Price Oracle) application ID.
Ars: new_oracle (abi.Application): The new ORACLE application ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOracleId(
    args: MethodArgs<"update_oracle_id(application)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"update_oracle_id(application)void">]
  >;

  /**
   * Calls the update_manager(address)void ABI method.
   *
   * Updates the manager account of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(
    args: MethodArgs<"update_manager(address)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"update_manager(address)void">]
  >;

  /**
   * Calls the update_price(uint64)void ABI method.
   *
   * Updates the price of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(
    args: MethodArgs<"update_price(uint64)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"update_price(uint64)void">]
  >;

  /**
   * Calls the update_lifecycle(uint64)void ABI method.
   *
   * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLifecycle(
    args: MethodArgs<"update_lifecycle(uint64)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"update_lifecycle(uint64)void">]
  >;

  /**
   * Calls the is_discount_expired()uint64 ABI method.
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isDiscountExpired(
    args: MethodArgs<"is_discount_expired()uint64">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"is_discount_expired()uint64">]
  >;

  /**
   * Calls the create_discount(uint64,uint64,uint64,pay)void ABI method.
   *
   * Creates a new discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDiscount(
    args: MethodArgs<"create_discount(uint64,uint64,uint64,pay)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"create_discount(uint64,uint64,uint64,pay)void">]
  >;

  /**
   * Calls the delete_discount()void ABI method.
   *
   * Deletes a discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteDiscount(
    args: MethodArgs<"delete_discount()void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"delete_discount()void">]
  >;

  /**
   * Calls the compute_price(bool)uint64 ABI method.
   *
   * Computes the price of the subscription for the given duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computePrice(
    args: MethodArgs<"compute_price(bool)uint64">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"compute_price(bool)uint64">]
  >;

  /**
   * Calls the create_subscription(address,application,application,pay,pay,txn)uint64 ABI method.
   *
   * Subscribes a user to the subscription service and creates a new
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSubscription(
    args: MethodArgs<"create_subscription(address,application,application,pay,pay,txn)uint64">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [
      ...TReturns,
      MethodReturn<"create_subscription(address,application,application,pay,pay,txn)uint64">
    ]
  >;

  /**
   * Calls the is_subscriber(address)uint64 ABI method.
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isSubscriber(
    args: MethodArgs<"is_subscriber(address)uint64">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"is_subscriber(address)uint64">]
  >;

  /**
   * Calls the claim_subscription(asset)void ABI method.
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimSubscription(
    args: MethodArgs<"claim_subscription(asset)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"claim_subscription(asset)void">]
  >;

  /**
   * Calls the transfer_subscription(address,asset)void ABI method.
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferSubscription(
    args: MethodArgs<"transfer_subscription(address,asset)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"transfer_subscription(address,asset)void">]
  >;

  /**
   * Calls the delete_subscription(asset)uint64 ABI method.
   *
   * Unsubscribes a user from the subscription service and deletes the
subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteSubscription(
    args: MethodArgs<"delete_subscription(asset)uint64">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<
    [...TReturns, MethodReturn<"delete_subscription(asset)uint64">]
  >;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs &
        AppClientCallCoreParams &
        AppClientCompilationParams &
        CoreAppCallArgs
    ): TokenBasedProductComposer<[...TReturns, undefined]>;
  };

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TokenBasedProduct smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(
      args: MethodArgs<"delete()void">,
      params?: AppClientCallCoreParams
    ): TokenBasedProductComposer<[...TReturns, MethodReturn<"delete()void">]>;
  };

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
    ): TokenBasedProductComposer<[...TReturns, undefined]>;
  };

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
    ): TokenBasedProductComposer<[...TReturns, undefined]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
  ): TokenBasedProductComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): TokenBasedProductComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenBasedProductComposerSimulateResult>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<TokenBasedProductComposerResults<TReturns>>;
};
export type TokenBasedProductComposerSimulateResult = {
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type TokenBasedProductComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
